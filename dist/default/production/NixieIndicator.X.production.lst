

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Mar 22 19:41:10 2023

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F1939
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 2.20
    74                           ; Generated 12/02/2020 GMT
    75                           ; 
    76                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F1939 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009B                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011D                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018F                     	;# 
   177  0190                     	;# 
   178  0191                     	;# 
   179  0191                     	;# 
   180  0192                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0193                     	;# 
   184  0194                     	;# 
   185  0195                     	;# 
   186  0196                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019D                     	;# 
   196  019E                     	;# 
   197  019F                     	;# 
   198  020D                     	;# 
   199  0210                     	;# 
   200  0211                     	;# 
   201  0212                     	;# 
   202  0213                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0217                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0294                     	;# 
   213  0295                     	;# 
   214  0295                     	;# 
   215  0296                     	;# 
   216  0298                     	;# 
   217  0298                     	;# 
   218  0299                     	;# 
   219  029A                     	;# 
   220  029B                     	;# 
   221  029C                     	;# 
   222  029C                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029F                     	;# 
   226  0311                     	;# 
   227  0311                     	;# 
   228  0312                     	;# 
   229  0313                     	;# 
   230  0314                     	;# 
   231  0315                     	;# 
   232  0315                     	;# 
   233  0316                     	;# 
   234  0318                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  031C                     	;# 
   239  031C                     	;# 
   240  031D                     	;# 
   241  031E                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0791                     	;# 
   252  0792                     	;# 
   253  0793                     	;# 
   254  0794                     	;# 
   255  0795                     	;# 
   256  0798                     	;# 
   257  0799                     	;# 
   258  079A                     	;# 
   259  07A0                     	;# 
   260  07A1                     	;# 
   261  07A2                     	;# 
   262  07A3                     	;# 
   263  07A4                     	;# 
   264  07A5                     	;# 
   265  07A6                     	;# 
   266  07A7                     	;# 
   267  07A8                     	;# 
   268  07A9                     	;# 
   269  07AA                     	;# 
   270  07AB                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000F                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  001E                     	;# 
   312  001F                     	;# 
   313  008C                     	;# 
   314  008D                     	;# 
   315  008E                     	;# 
   316  008F                     	;# 
   317  0090                     	;# 
   318  0091                     	;# 
   319  0092                     	;# 
   320  0093                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0098                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  010C                     	;# 
   333  010D                     	;# 
   334  010E                     	;# 
   335  010F                     	;# 
   336  0110                     	;# 
   337  0111                     	;# 
   338  0112                     	;# 
   339  0113                     	;# 
   340  0114                     	;# 
   341  0115                     	;# 
   342  0116                     	;# 
   343  0117                     	;# 
   344  0118                     	;# 
   345  0119                     	;# 
   346  011A                     	;# 
   347  011B                     	;# 
   348  011D                     	;# 
   349  018C                     	;# 
   350  018D                     	;# 
   351  018F                     	;# 
   352  0190                     	;# 
   353  0191                     	;# 
   354  0191                     	;# 
   355  0192                     	;# 
   356  0193                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0199                     	;# 
   363  019A                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019C                     	;# 
   369  019C                     	;# 
   370  019D                     	;# 
   371  019E                     	;# 
   372  019F                     	;# 
   373  020D                     	;# 
   374  0210                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0213                     	;# 
   378  0214                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0216                     	;# 
   382  0217                     	;# 
   383  0291                     	;# 
   384  0291                     	;# 
   385  0292                     	;# 
   386  0293                     	;# 
   387  0294                     	;# 
   388  0295                     	;# 
   389  0295                     	;# 
   390  0296                     	;# 
   391  0298                     	;# 
   392  0298                     	;# 
   393  0299                     	;# 
   394  029A                     	;# 
   395  029B                     	;# 
   396  029C                     	;# 
   397  029C                     	;# 
   398  029D                     	;# 
   399  029E                     	;# 
   400  029F                     	;# 
   401  0311                     	;# 
   402  0311                     	;# 
   403  0312                     	;# 
   404  0313                     	;# 
   405  0314                     	;# 
   406  0315                     	;# 
   407  0315                     	;# 
   408  0316                     	;# 
   409  0318                     	;# 
   410  0318                     	;# 
   411  0319                     	;# 
   412  031A                     	;# 
   413  031C                     	;# 
   414  031C                     	;# 
   415  031D                     	;# 
   416  031E                     	;# 
   417  0394                     	;# 
   418  0395                     	;# 
   419  0396                     	;# 
   420  0415                     	;# 
   421  0416                     	;# 
   422  0417                     	;# 
   423  041C                     	;# 
   424  041D                     	;# 
   425  041E                     	;# 
   426  0791                     	;# 
   427  0792                     	;# 
   428  0793                     	;# 
   429  0794                     	;# 
   430  0795                     	;# 
   431  0798                     	;# 
   432  0799                     	;# 
   433  079A                     	;# 
   434  07A0                     	;# 
   435  07A1                     	;# 
   436  07A2                     	;# 
   437  07A3                     	;# 
   438  07A4                     	;# 
   439  07A5                     	;# 
   440  07A6                     	;# 
   441  07A7                     	;# 
   442  07A8                     	;# 
   443  07A9                     	;# 
   444  07AA                     	;# 
   445  07AB                     	;# 
   446  0FE4                     	;# 
   447  0FE5                     	;# 
   448  0FE6                     	;# 
   449  0FE7                     	;# 
   450  0FE8                     	;# 
   451  0FE9                     	;# 
   452  0FEA                     	;# 
   453  0FEB                     	;# 
   454  0FED                     	;# 
   455  0FEE                     	;# 
   456  0FEF                     	;# 
   457  0000                     	;# 
   458  0001                     	;# 
   459  0002                     	;# 
   460  0003                     	;# 
   461  0004                     	;# 
   462  0005                     	;# 
   463  0006                     	;# 
   464  0007                     	;# 
   465  0008                     	;# 
   466  0009                     	;# 
   467  000A                     	;# 
   468  000B                     	;# 
   469  000C                     	;# 
   470  000D                     	;# 
   471  000E                     	;# 
   472  000F                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0015                     	;# 
   478  0016                     	;# 
   479  0016                     	;# 
   480  0017                     	;# 
   481  0018                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  001B                     	;# 
   485  001C                     	;# 
   486  001E                     	;# 
   487  001F                     	;# 
   488  008C                     	;# 
   489  008D                     	;# 
   490  008E                     	;# 
   491  008F                     	;# 
   492  0090                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0095                     	;# 
   497  0096                     	;# 
   498  0097                     	;# 
   499  0098                     	;# 
   500  0099                     	;# 
   501  009A                     	;# 
   502  009B                     	;# 
   503  009B                     	;# 
   504  009C                     	;# 
   505  009D                     	;# 
   506  009E                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  0110                     	;# 
   512  0111                     	;# 
   513  0112                     	;# 
   514  0113                     	;# 
   515  0114                     	;# 
   516  0115                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  0118                     	;# 
   520  0119                     	;# 
   521  011A                     	;# 
   522  011B                     	;# 
   523  011D                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018F                     	;# 
   527  0190                     	;# 
   528  0191                     	;# 
   529  0191                     	;# 
   530  0192                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0193                     	;# 
   534  0194                     	;# 
   535  0195                     	;# 
   536  0196                     	;# 
   537  0199                     	;# 
   538  019A                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019C                     	;# 
   544  019C                     	;# 
   545  019D                     	;# 
   546  019E                     	;# 
   547  019F                     	;# 
   548  020D                     	;# 
   549  0210                     	;# 
   550  0211                     	;# 
   551  0212                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0217                     	;# 
   558  0291                     	;# 
   559  0291                     	;# 
   560  0292                     	;# 
   561  0293                     	;# 
   562  0294                     	;# 
   563  0295                     	;# 
   564  0295                     	;# 
   565  0296                     	;# 
   566  0298                     	;# 
   567  0298                     	;# 
   568  0299                     	;# 
   569  029A                     	;# 
   570  029B                     	;# 
   571  029C                     	;# 
   572  029C                     	;# 
   573  029D                     	;# 
   574  029E                     	;# 
   575  029F                     	;# 
   576  0311                     	;# 
   577  0311                     	;# 
   578  0312                     	;# 
   579  0313                     	;# 
   580  0314                     	;# 
   581  0315                     	;# 
   582  0315                     	;# 
   583  0316                     	;# 
   584  0318                     	;# 
   585  0318                     	;# 
   586  0319                     	;# 
   587  031A                     	;# 
   588  031C                     	;# 
   589  031C                     	;# 
   590  031D                     	;# 
   591  031E                     	;# 
   592  0394                     	;# 
   593  0395                     	;# 
   594  0396                     	;# 
   595  0415                     	;# 
   596  0416                     	;# 
   597  0417                     	;# 
   598  041C                     	;# 
   599  041D                     	;# 
   600  041E                     	;# 
   601  0791                     	;# 
   602  0792                     	;# 
   603  0793                     	;# 
   604  0794                     	;# 
   605  0795                     	;# 
   606  0798                     	;# 
   607  0799                     	;# 
   608  079A                     	;# 
   609  07A0                     	;# 
   610  07A1                     	;# 
   611  07A2                     	;# 
   612  07A3                     	;# 
   613  07A4                     	;# 
   614  07A5                     	;# 
   615  07A6                     	;# 
   616  07A7                     	;# 
   617  07A8                     	;# 
   618  07A9                     	;# 
   619  07AA                     	;# 
   620  07AB                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001E                     	;# 
   662  001F                     	;# 
   663  008C                     	;# 
   664  008D                     	;# 
   665  008E                     	;# 
   666  008F                     	;# 
   667  0090                     	;# 
   668  0091                     	;# 
   669  0092                     	;# 
   670  0093                     	;# 
   671  0095                     	;# 
   672  0096                     	;# 
   673  0097                     	;# 
   674  0098                     	;# 
   675  0099                     	;# 
   676  009A                     	;# 
   677  009B                     	;# 
   678  009B                     	;# 
   679  009C                     	;# 
   680  009D                     	;# 
   681  009E                     	;# 
   682  010C                     	;# 
   683  010D                     	;# 
   684  010E                     	;# 
   685  010F                     	;# 
   686  0110                     	;# 
   687  0111                     	;# 
   688  0112                     	;# 
   689  0113                     	;# 
   690  0114                     	;# 
   691  0115                     	;# 
   692  0116                     	;# 
   693  0117                     	;# 
   694  0118                     	;# 
   695  0119                     	;# 
   696  011A                     	;# 
   697  011B                     	;# 
   698  011D                     	;# 
   699  018C                     	;# 
   700  018D                     	;# 
   701  018F                     	;# 
   702  0190                     	;# 
   703  0191                     	;# 
   704  0191                     	;# 
   705  0192                     	;# 
   706  0193                     	;# 
   707  0193                     	;# 
   708  0193                     	;# 
   709  0194                     	;# 
   710  0195                     	;# 
   711  0196                     	;# 
   712  0199                     	;# 
   713  019A                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019C                     	;# 
   719  019C                     	;# 
   720  019D                     	;# 
   721  019E                     	;# 
   722  019F                     	;# 
   723  020D                     	;# 
   724  0210                     	;# 
   725  0211                     	;# 
   726  0212                     	;# 
   727  0213                     	;# 
   728  0214                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0217                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029C                     	;# 
   748  029D                     	;# 
   749  029E                     	;# 
   750  029F                     	;# 
   751  0311                     	;# 
   752  0311                     	;# 
   753  0312                     	;# 
   754  0313                     	;# 
   755  0314                     	;# 
   756  0315                     	;# 
   757  0315                     	;# 
   758  0316                     	;# 
   759  0318                     	;# 
   760  0318                     	;# 
   761  0319                     	;# 
   762  031A                     	;# 
   763  031C                     	;# 
   764  031C                     	;# 
   765  031D                     	;# 
   766  031E                     	;# 
   767  0394                     	;# 
   768  0395                     	;# 
   769  0396                     	;# 
   770  0415                     	;# 
   771  0416                     	;# 
   772  0417                     	;# 
   773  041C                     	;# 
   774  041D                     	;# 
   775  041E                     	;# 
   776  0791                     	;# 
   777  0792                     	;# 
   778  0793                     	;# 
   779  0794                     	;# 
   780  0795                     	;# 
   781  0798                     	;# 
   782  0799                     	;# 
   783  079A                     	;# 
   784  07A0                     	;# 
   785  07A1                     	;# 
   786  07A2                     	;# 
   787  07A3                     	;# 
   788  07A4                     	;# 
   789  07A5                     	;# 
   790  07A6                     	;# 
   791  07A7                     	;# 
   792  07A8                     	;# 
   793  07A9                     	;# 
   794  07AA                     	;# 
   795  07AB                     	;# 
   796  0FE4                     	;# 
   797  0FE5                     	;# 
   798  0FE6                     	;# 
   799  0FE7                     	;# 
   800  0FE8                     	;# 
   801  0FE9                     	;# 
   802  0FEA                     	;# 
   803  0FEB                     	;# 
   804  0FED                     	;# 
   805  0FEE                     	;# 
   806  0FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000D                     	;# 
   821  000E                     	;# 
   822  000F                     	;# 
   823  0010                     	;# 
   824  0011                     	;# 
   825  0012                     	;# 
   826  0013                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0016                     	;# 
   830  0017                     	;# 
   831  0018                     	;# 
   832  0019                     	;# 
   833  001A                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  001E                     	;# 
   837  001F                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  008F                     	;# 
   842  0090                     	;# 
   843  0091                     	;# 
   844  0092                     	;# 
   845  0093                     	;# 
   846  0095                     	;# 
   847  0096                     	;# 
   848  0097                     	;# 
   849  0098                     	;# 
   850  0099                     	;# 
   851  009A                     	;# 
   852  009B                     	;# 
   853  009B                     	;# 
   854  009C                     	;# 
   855  009D                     	;# 
   856  009E                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  010F                     	;# 
   861  0110                     	;# 
   862  0111                     	;# 
   863  0112                     	;# 
   864  0113                     	;# 
   865  0114                     	;# 
   866  0115                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  0118                     	;# 
   870  0119                     	;# 
   871  011A                     	;# 
   872  011B                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018F                     	;# 
   877  0190                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0194                     	;# 
   885  0195                     	;# 
   886  0196                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019C                     	;# 
   894  019C                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  020D                     	;# 
   899  0210                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0294                     	;# 
   913  0295                     	;# 
   914  0295                     	;# 
   915  0296                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  029B                     	;# 
   921  029C                     	;# 
   922  029C                     	;# 
   923  029D                     	;# 
   924  029E                     	;# 
   925  029F                     	;# 
   926  0311                     	;# 
   927  0311                     	;# 
   928  0312                     	;# 
   929  0313                     	;# 
   930  0314                     	;# 
   931  0315                     	;# 
   932  0315                     	;# 
   933  0316                     	;# 
   934  0318                     	;# 
   935  0318                     	;# 
   936  0319                     	;# 
   937  031A                     	;# 
   938  031C                     	;# 
   939  031C                     	;# 
   940  031D                     	;# 
   941  031E                     	;# 
   942  0394                     	;# 
   943  0395                     	;# 
   944  0396                     	;# 
   945  0415                     	;# 
   946  0416                     	;# 
   947  0417                     	;# 
   948  041C                     	;# 
   949  041D                     	;# 
   950  041E                     	;# 
   951  0791                     	;# 
   952  0792                     	;# 
   953  0793                     	;# 
   954  0794                     	;# 
   955  0795                     	;# 
   956  0798                     	;# 
   957  0799                     	;# 
   958  079A                     	;# 
   959  07A0                     	;# 
   960  07A1                     	;# 
   961  07A2                     	;# 
   962  07A3                     	;# 
   963  07A4                     	;# 
   964  07A5                     	;# 
   965  07A6                     	;# 
   966  07A7                     	;# 
   967  07A8                     	;# 
   968  07A9                     	;# 
   969  07AA                     	;# 
   970  07AB                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  000F                     	;# 
   998  0010                     	;# 
   999  0011                     	;# 
  1000  0012                     	;# 
  1001  0013                     	;# 
  1002  0015                     	;# 
  1003  0016                     	;# 
  1004  0016                     	;# 
  1005  0017                     	;# 
  1006  0018                     	;# 
  1007  0019                     	;# 
  1008  001A                     	;# 
  1009  001B                     	;# 
  1010  001C                     	;# 
  1011  001E                     	;# 
  1012  001F                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0095                     	;# 
  1022  0096                     	;# 
  1023  0097                     	;# 
  1024  0098                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0111                     	;# 
  1038  0112                     	;# 
  1039  0113                     	;# 
  1040  0114                     	;# 
  1041  0115                     	;# 
  1042  0116                     	;# 
  1043  0117                     	;# 
  1044  0118                     	;# 
  1045  0119                     	;# 
  1046  011A                     	;# 
  1047  011B                     	;# 
  1048  011D                     	;# 
  1049  018C                     	;# 
  1050  018D                     	;# 
  1051  018F                     	;# 
  1052  0190                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0194                     	;# 
  1060  0195                     	;# 
  1061  0196                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019C                     	;# 
  1069  019C                     	;# 
  1070  019D                     	;# 
  1071  019E                     	;# 
  1072  019F                     	;# 
  1073  020D                     	;# 
  1074  0210                     	;# 
  1075  0211                     	;# 
  1076  0212                     	;# 
  1077  0213                     	;# 
  1078  0214                     	;# 
  1079  0215                     	;# 
  1080  0215                     	;# 
  1081  0216                     	;# 
  1082  0217                     	;# 
  1083  0291                     	;# 
  1084  0291                     	;# 
  1085  0292                     	;# 
  1086  0293                     	;# 
  1087  0294                     	;# 
  1088  0295                     	;# 
  1089  0295                     	;# 
  1090  0296                     	;# 
  1091  0298                     	;# 
  1092  0298                     	;# 
  1093  0299                     	;# 
  1094  029A                     	;# 
  1095  029B                     	;# 
  1096  029C                     	;# 
  1097  029C                     	;# 
  1098  029D                     	;# 
  1099  029E                     	;# 
  1100  029F                     	;# 
  1101  0311                     	;# 
  1102  0311                     	;# 
  1103  0312                     	;# 
  1104  0313                     	;# 
  1105  0314                     	;# 
  1106  0315                     	;# 
  1107  0315                     	;# 
  1108  0316                     	;# 
  1109  0318                     	;# 
  1110  0318                     	;# 
  1111  0319                     	;# 
  1112  031A                     	;# 
  1113  031C                     	;# 
  1114  031C                     	;# 
  1115  031D                     	;# 
  1116  031E                     	;# 
  1117  0394                     	;# 
  1118  0395                     	;# 
  1119  0396                     	;# 
  1120  0415                     	;# 
  1121  0416                     	;# 
  1122  0417                     	;# 
  1123  041C                     	;# 
  1124  041D                     	;# 
  1125  041E                     	;# 
  1126  0791                     	;# 
  1127  0792                     	;# 
  1128  0793                     	;# 
  1129  0794                     	;# 
  1130  0795                     	;# 
  1131  0798                     	;# 
  1132  0799                     	;# 
  1133  079A                     	;# 
  1134  07A0                     	;# 
  1135  07A1                     	;# 
  1136  07A2                     	;# 
  1137  07A3                     	;# 
  1138  07A4                     	;# 
  1139  07A5                     	;# 
  1140  07A6                     	;# 
  1141  07A7                     	;# 
  1142  07A8                     	;# 
  1143  07A9                     	;# 
  1144  07AA                     	;# 
  1145  07AB                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157  0000                     	;# 
  1158  0001                     	;# 
  1159  0002                     	;# 
  1160  0003                     	;# 
  1161  0004                     	;# 
  1162  0005                     	;# 
  1163  0006                     	;# 
  1164  0007                     	;# 
  1165  0008                     	;# 
  1166  0009                     	;# 
  1167  000A                     	;# 
  1168  000B                     	;# 
  1169  000C                     	;# 
  1170  000D                     	;# 
  1171  000E                     	;# 
  1172  000F                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0013                     	;# 
  1177  0015                     	;# 
  1178  0016                     	;# 
  1179  0016                     	;# 
  1180  0017                     	;# 
  1181  0018                     	;# 
  1182  0019                     	;# 
  1183  001A                     	;# 
  1184  001B                     	;# 
  1185  001C                     	;# 
  1186  001E                     	;# 
  1187  001F                     	;# 
  1188  008C                     	;# 
  1189  008D                     	;# 
  1190  008E                     	;# 
  1191  008F                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0098                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  010F                     	;# 
  1211  0110                     	;# 
  1212  0111                     	;# 
  1213  0112                     	;# 
  1214  0113                     	;# 
  1215  0114                     	;# 
  1216  0115                     	;# 
  1217  0116                     	;# 
  1218  0117                     	;# 
  1219  0118                     	;# 
  1220  0119                     	;# 
  1221  011A                     	;# 
  1222  011B                     	;# 
  1223  011D                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018F                     	;# 
  1227  0190                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0193                     	;# 
  1234  0194                     	;# 
  1235  0195                     	;# 
  1236  0196                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0212                     	;# 
  1252  0213                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0291                     	;# 
  1259  0291                     	;# 
  1260  0292                     	;# 
  1261  0293                     	;# 
  1262  0294                     	;# 
  1263  0295                     	;# 
  1264  0295                     	;# 
  1265  0296                     	;# 
  1266  0298                     	;# 
  1267  0298                     	;# 
  1268  0299                     	;# 
  1269  029A                     	;# 
  1270  029B                     	;# 
  1271  029C                     	;# 
  1272  029C                     	;# 
  1273  029D                     	;# 
  1274  029E                     	;# 
  1275  029F                     	;# 
  1276  0311                     	;# 
  1277  0311                     	;# 
  1278  0312                     	;# 
  1279  0313                     	;# 
  1280  0314                     	;# 
  1281  0315                     	;# 
  1282  0315                     	;# 
  1283  0316                     	;# 
  1284  0318                     	;# 
  1285  0318                     	;# 
  1286  0319                     	;# 
  1287  031A                     	;# 
  1288  031C                     	;# 
  1289  031C                     	;# 
  1290  031D                     	;# 
  1291  031E                     	;# 
  1292  0394                     	;# 
  1293  0395                     	;# 
  1294  0396                     	;# 
  1295  0415                     	;# 
  1296  0416                     	;# 
  1297  0417                     	;# 
  1298  041C                     	;# 
  1299  041D                     	;# 
  1300  041E                     	;# 
  1301  0791                     	;# 
  1302  0792                     	;# 
  1303  0793                     	;# 
  1304  0794                     	;# 
  1305  0795                     	;# 
  1306  0798                     	;# 
  1307  0799                     	;# 
  1308  079A                     	;# 
  1309  07A0                     	;# 
  1310  07A1                     	;# 
  1311  07A2                     	;# 
  1312  07A3                     	;# 
  1313  07A4                     	;# 
  1314  07A5                     	;# 
  1315  07A6                     	;# 
  1316  07A7                     	;# 
  1317  07A8                     	;# 
  1318  07A9                     	;# 
  1319  07AA                     	;# 
  1320  07AB                     	;# 
  1321  0FE4                     	;# 
  1322  0FE5                     	;# 
  1323  0FE6                     	;# 
  1324  0FE7                     	;# 
  1325  0FE8                     	;# 
  1326  0FE9                     	;# 
  1327  0FEA                     	;# 
  1328  0FEB                     	;# 
  1329  0FED                     	;# 
  1330  0FEE                     	;# 
  1331  0FEF                     	;# 
  1332                           
  1333 ;; Function _I2C_SlaveDefWrColInterruptHandler is unused but had its address taken
  1334  0000                     
  1335 ;; Function _I2C_SlaveDefBusColInterruptHandler is unused but had its address taken
  1336  0000                     
  1337                           	psect	nvBANK0
  1338  004C                     __pnvBANK0:
  1339  004C                     _EUSART_OverrunErrorHandler:
  1340  004C                     	ds	2
  1341  004E                     _EUSART_FramingErrorHandler:
  1342  004E                     	ds	2
  1343  0050                     _EUSART_RxDefaultInterruptHandler:
  1344  0050                     	ds	2
  1345  0052                     _EUSART_TxDefaultInterruptHandler:
  1346  0052                     	ds	2
  1347  0054                     _eusartTxBufferRemaining:
  1348  0054                     	ds	1
  1349                           
  1350                           	psect	nvBANK1
  1351  00CB                     __pnvBANK1:
  1352  00CB                     _EUSART_ErrorHandler:
  1353  00CB                     	ds	2
  1354  0012                     _PIR2bits	set	18
  1355  0011                     _PIR1bits	set	17
  1356  000B                     _INTCONbits	set	11
  1357  006D                     _RB5	set	109
  1358  006C                     _RB4	set	108
  1359  006B                     _RB3	set	107
  1360  006A                     _RB2	set	106
  1361  0069                     _RB1	set	105
  1362  0068                     _RB0	set	104
  1363  007F                     _RD7	set	127
  1364  007E                     _RD6	set	126
  1365  007D                     _RD5	set	125
  1366  007C                     _RD4	set	124
  1367  0063                     _RA3	set	99
  1368  0062                     _RA2	set	98
  1369  0061                     _RA1	set	97
  1370  0060                     _RA0	set	96
  1371  0082                     _RE2	set	130
  1372  0081                     _RE1	set	129
  1373  0080                     _RE0	set	128
  1374  0065                     _RA5	set	101
  1375  0072                     _RC2	set	114
  1376  0071                     _RC1	set	113
  1377  0070                     _RC0	set	112
  1378  0066                     _RA6	set	102
  1379  0064                     _RA4	set	100
  1380  0067                     _RA7	set	103
  1381  0078                     _RD0	set	120
  1382  0092                     _PIE2bits	set	146
  1383  0091                     _PIE1bits	set	145
  1384  0097                     _WDTCON	set	151
  1385  0098                     _OSCTUNE	set	152
  1386  0099                     _OSCCON	set	153
  1387  0095                     _OPTION_REGbits	set	149
  1388  008F                     _TRISD	set	143
  1389  008E                     _TRISC	set	142
  1390  008D                     _TRISB	set	141
  1391  008C                     _TRISA	set	140
  1392  0090                     _TRISE	set	144
  1393  0116                     _BORCON	set	278
  1394  011D                     _APFCON	set	285
  1395  010E                     _LATC	set	270
  1396  010D                     _LATB	set	269
  1397  010C                     _LATA	set	268
  1398  010F                     _LATD	set	271
  1399  0110                     _LATE	set	272
  1400  0199                     _RCREG	set	409
  1401  019D                     _RCSTAbits	set	413
  1402  019A                     _TXREG	set	410
  1403  019E                     _TXSTAbits	set	414
  1404  019C                     _SPBRGH	set	412
  1405  019B                     _SPBRGL	set	411
  1406  019E                     _TXSTA	set	414
  1407  019D                     _RCSTA	set	413
  1408  019F                     _BAUDCON	set	415
  1409  018C                     _ANSELA	set	396
  1410  0190                     _ANSELE	set	400
  1411  018D                     _ANSELB	set	397
  1412  018F                     _ANSELD	set	399
  1413  0211                     _SSPBUF	set	529
  1414  0216                     _SSPCON2bits	set	534
  1415  0214                     _SSPSTATbits	set	532
  1416  0213                     _SSPMSK	set	531
  1417  0212                     _SSPADD	set	530
  1418  0215                     _SSPCON1bits	set	533
  1419  0216                     _SSPCON2	set	534
  1420  0215                     _SSPCON1	set	533
  1421  0214                     _SSPSTAT	set	532
  1422  020D                     _WPUB	set	525
  1423  0210                     _WPUE	set	528
  1424                           
  1425                           	psect	cinit
  1426  004C                     start_initialization:	
  1427                           ; #config settings
  1428                           
  1429  004C                     __initialization:
  1430                           
  1431                           ; Clear objects allocated to COMMON
  1432  004C  01F6               	clrf	__pbssCOMMON& (0+127)
  1433  004D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1434  004E  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1435  004F  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1436                           
  1437                           ; Clear objects allocated to BANK0
  1438  0050  3020               	movlw	low __pbssBANK0
  1439  0051  0084               	movwf	4
  1440  0052  3000               	movlw	high __pbssBANK0
  1441  0053  0085               	movwf	5
  1442  0054  302C               	movlw	44
  1443  0055  3187  270E  3180   	fcall	clear_ram0
  1444                           
  1445                           ; Clear objects allocated to BANK1
  1446  0058  30B6               	movlw	low __pbssBANK1
  1447  0059  0084               	movwf	4
  1448  005A  3000               	movlw	high __pbssBANK1
  1449  005B  0085               	movwf	5
  1450  005C  3015               	movlw	21
  1451  005D  3187  270E  3180   	fcall	clear_ram0
  1452  0060                     end_of_initialization:	
  1453                           ;End of C runtime variable initialization code
  1454                           
  1455  0060                     __end_of__initialization:
  1456  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1457  0061  0020               	movlb	0
  1458  0062  3186  2E0B         	ljmp	_main	;jump to C main() function
  1459                           
  1460                           	psect	bssCOMMON
  1461  0076                     __pbssCOMMON:
  1462  0076                     _eusartRxTail:
  1463  0076                     	ds	1
  1464  0077                     _eusartRxHead:
  1465  0077                     	ds	1
  1466  0078                     _eusartTxTail:
  1467  0078                     	ds	1
  1468  0079                     _eusartTxHead:
  1469  0079                     	ds	1
  1470                           
  1471                           	psect	bssBANK0
  1472  0020                     __pbssBANK0:
  1473  0020                     _eusartRxStatusBuffer:
  1474  0020                     	ds	8
  1475  0028                     _eusartRxBuffer:
  1476  0028                     	ds	8
  1477  0030                     _eusartTxBuffer:
  1478  0030                     	ds	8
  1479  0038                     _I2C_SlaveWrColInterruptHandler:
  1480  0038                     	ds	2
  1481  003A                     _I2C_SlaveBusColInterruptHandler:
  1482  003A                     	ds	2
  1483  003C                     _I2C_SlaveAddrInterruptHandler:
  1484  003C                     	ds	2
  1485  003E                     _I2C_SlaveWrInterruptHandler:
  1486  003E                     	ds	2
  1487  0040                     _I2C_SlaveRdInterruptHandler:
  1488  0040                     	ds	2
  1489  0042                     _MSSP_InterruptHandler:
  1490  0042                     	ds	2
  1491  0044                     _i2cSlaveState:
  1492  0044                     	ds	1
  1493  0045                     _i2cSlaveAddr:
  1494  0045                     	ds	1
  1495  0046                     _i2cRdData:
  1496  0046                     	ds	1
  1497  0047                     _i2cWrData:
  1498  0047                     	ds	1
  1499  0048                     _eusartRxLastError:
  1500  0048                     	ds	1
  1501  0049                     _eusartRxCount:
  1502  0049                     	ds	1
  1503  004A                     _is_I2C_interrupt:
  1504  004A                     	ds	1
  1505  004B                     _receive_index:
  1506  004B                     	ds	1
  1507                           
  1508                           	psect	bssBANK1
  1509  00B6                     __pbssBANK1:
  1510  00B6                     _value:
  1511  00B6                     	ds	21
  1512                           
  1513                           	psect	clrtext
  1514  070E                     clear_ram0:	
  1515                           ;	Called with FSR0 containing the base address, and
  1516                           ;	WREG with the size to clear
  1517                           
  1518  070E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1519  070F                     clrloop0:
  1520  070F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1521  0710  3101               	addfsr 0,1
  1522  0711  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1523  0712  2F0F               	goto	clrloop0	;have we reached the end yet?
  1524  0713  3400               	retlw	0	;all done for this memory range, return
  1525                           
  1526                           	psect	cstackBANK1
  1527  00A0                     __pcstackBANK1:
  1528  00A0                     show@chars:
  1529                           
  1530                           ; 20 bytes @ 0x0
  1531  00A0                     	ds	20
  1532  00B4                     show@value_index:
  1533                           
  1534                           ; 1 bytes @ 0x14
  1535  00B4                     	ds	1
  1536  00B5                     show@chars_index:
  1537                           
  1538                           ; 1 bytes @ 0x15
  1539  00B5                     	ds	1
  1540                           
  1541                           	psect	cstackCOMMON
  1542  0070                     __pcstackCOMMON:
  1543  0070                     ?_I2C_Initialize:
  1544  0070                     ?_OSCILLATOR_Initialize:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_WDT_Initialize:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_EUSART_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_I2C_Open:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_EUSART_is_rx_ready:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_receive_char_from_EUSART:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_receive_char_from_I2C:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ?_show:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_off_digit:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_on_digit:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_decode_received_char:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_EUSART_Read:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_I2C_Read:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_EUSART_Receive_ISR:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_EUSART_Transmit_ISR:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ??_EUSART_Transmit_ISR:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_EUSART_DefaultErrorHandler:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_EUSART_RxDataHandler:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ??_EUSART_RxDataHandler:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_I2C_SlaveOpen:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_I2C_SlaveSetSlaveAddr:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_I2C_SlaveSetSlaveMask:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_I2C_Isr:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_I2C_SlaveDefWrInterruptHandler:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_I2C_SlaveDefRdInterruptHandler:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ??_I2C_SlaveDefRdInterruptHandler:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?_I2C_SlaveDefAddrInterruptHandler:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ??_I2C_SlaveDefAddrInterruptHandler:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?_I2C_SlaveEnableIrq:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ?_I2C_SlaveGetRxData:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ?_I2C_SlaveSendTxData:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ??_I2C_SlaveSendTxData:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?_I2C_SlaveIsRead:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  0070                     ??_I2C_SlaveIsRead:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  0070                     ?_I2C_SlaveClearIrq:	
  1659                           ; 1 bytes @ 0x0
  1660                           
  1661  0070                     ??_I2C_SlaveClearIrq:	
  1662                           ; 1 bytes @ 0x0
  1663                           
  1664  0070                     ?_I2C_SlaveIsAddr:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0070                     ??_I2C_SlaveIsAddr:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0070                     ?_I2C_SlaveAddrCallBack:	
  1671                           ; 1 bytes @ 0x0
  1672                           
  1673  0070                     ?_I2C_SlaveIsTxBufEmpty:	
  1674                           ; 1 bytes @ 0x0
  1675                           
  1676  0070                     ??_I2C_SlaveIsTxBufEmpty:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679  0070                     ?_I2C_SlaveWrCallBack:	
  1680                           ; 1 bytes @ 0x0
  1681                           
  1682  0070                     ?_I2C_SlaveIsRxBufFull:	
  1683                           ; 1 bytes @ 0x0
  1684                           
  1685  0070                     ??_I2C_SlaveIsRxBufFull:	
  1686                           ; 1 bytes @ 0x0
  1687                           
  1688  0070                     ?_I2C_SlaveRdCallBack:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0070                     ?_I2C_SlaveReleaseClock:	
  1692                           ; 1 bytes @ 0x0
  1693                           
  1694  0070                     ??_I2C_SlaveReleaseClock:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0070                     ?_PIN_MANAGER_Initialize:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0070                     ?_SYSTEM_Initialize:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0070                     ?_main:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0070                     ?_INTERRUPT_InterruptManager:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0070                     ?i1_I2C_SlaveGetRxData:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0070                     ??i1_I2C_SlaveGetRxData:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0070                     I2C_SlaveSendTxData@data:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718                           
  1719                           ; 1 bytes @ 0x0
  1720  0070                     	ds	1
  1721  0071                     ??_EUSART_Receive_ISR:
  1722  0071                     ??_EUSART_DefaultErrorHandler:	
  1723                           ; 1 bytes @ 0x1
  1724                           
  1725  0071                     ??_I2C_Isr:	
  1726                           ; 1 bytes @ 0x1
  1727                           
  1728  0071                     ??_I2C_SlaveDefWrInterruptHandler:	
  1729                           ; 1 bytes @ 0x1
  1730                           
  1731  0071                     ??_I2C_SlaveAddrCallBack:	
  1732                           ; 1 bytes @ 0x1
  1733                           
  1734  0071                     ??_I2C_SlaveWrCallBack:	
  1735                           ; 1 bytes @ 0x1
  1736                           
  1737  0071                     ??_I2C_SlaveRdCallBack:	
  1738                           ; 1 bytes @ 0x1
  1739                           
  1740                           
  1741                           ; 1 bytes @ 0x1
  1742  0071                     	ds	2
  1743  0073                     ??_I2C_Initialize:
  1744  0073                     ??_OSCILLATOR_Initialize:	
  1745                           ; 1 bytes @ 0x3
  1746                           
  1747  0073                     ??_WDT_Initialize:	
  1748                           ; 1 bytes @ 0x3
  1749                           
  1750  0073                     ??_EUSART_is_rx_ready:	
  1751                           ; 1 bytes @ 0x3
  1752                           
  1753  0073                     ??_off_digit:	
  1754                           ; 1 bytes @ 0x3
  1755                           
  1756  0073                     ??_on_digit:	
  1757                           ; 1 bytes @ 0x3
  1758                           
  1759  0073                     ??_decode_received_char:	
  1760                           ; 1 bytes @ 0x3
  1761                           
  1762  0073                     ??_EUSART_Read:	
  1763                           ; 1 bytes @ 0x3
  1764                           
  1765  0073                     ??_I2C_Read:	
  1766                           ; 1 bytes @ 0x3
  1767                           
  1768  0073                     ?_EUSART_SetRxInterruptHandler:	
  1769                           ; 1 bytes @ 0x3
  1770                           
  1771  0073                     ?_EUSART_SetTxInterruptHandler:	
  1772                           ; 1 bytes @ 0x3
  1773                           
  1774  0073                     ?_EUSART_SetFramingErrorHandler:	
  1775                           ; 1 bytes @ 0x3
  1776                           
  1777  0073                     ?_EUSART_SetOverrunErrorHandler:	
  1778                           ; 1 bytes @ 0x3
  1779                           
  1780  0073                     ?_EUSART_SetErrorHandler:	
  1781                           ; 1 bytes @ 0x3
  1782                           
  1783  0073                     ??_I2C_SlaveOpen:	
  1784                           ; 1 bytes @ 0x3
  1785                           
  1786  0073                     ??_I2C_SlaveSetSlaveAddr:	
  1787                           ; 1 bytes @ 0x3
  1788                           
  1789  0073                     ??_I2C_SlaveSetSlaveMask:	
  1790                           ; 1 bytes @ 0x3
  1791                           
  1792  0073                     ?_I2C_SlaveSetIsrHandler:	
  1793                           ; 1 bytes @ 0x3
  1794                           
  1795  0073                     ?_I2C_SlaveSetBusColIntHandler:	
  1796                           ; 1 bytes @ 0x3
  1797                           
  1798  0073                     ?_I2C_SlaveSetWriteIntHandler:	
  1799                           ; 1 bytes @ 0x3
  1800                           
  1801  0073                     ?_I2C_SlaveSetReadIntHandler:	
  1802                           ; 1 bytes @ 0x3
  1803                           
  1804  0073                     ?_I2C_SlaveSetAddrIntHandler:	
  1805                           ; 1 bytes @ 0x3
  1806                           
  1807  0073                     ?_I2C_SlaveSetWrColIntHandler:	
  1808                           ; 1 bytes @ 0x3
  1809                           
  1810  0073                     ??_I2C_SlaveEnableIrq:	
  1811                           ; 1 bytes @ 0x3
  1812                           
  1813  0073                     ??_I2C_SlaveGetRxData:	
  1814                           ; 1 bytes @ 0x3
  1815                           
  1816  0073                     ??_PIN_MANAGER_Initialize:	
  1817                           ; 1 bytes @ 0x3
  1818                           
  1819  0073                     ??_INTERRUPT_InterruptManager:	
  1820                           ; 1 bytes @ 0x3
  1821                           
  1822  0073                     I2C_SlaveSetSlaveAddr@slaveAddr:	
  1823                           ; 1 bytes @ 0x3
  1824                           
  1825  0073                     I2C_SlaveSetSlaveMask@maskAddr:	
  1826                           ; 1 bytes @ 0x3
  1827                           
  1828  0073                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1829                           ; 1 bytes @ 0x3
  1830                           
  1831  0073                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1832                           ; 2 bytes @ 0x3
  1833                           
  1834  0073                     EUSART_SetErrorHandler@interruptHandler:	
  1835                           ; 2 bytes @ 0x3
  1836                           
  1837  0073                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1838                           ; 2 bytes @ 0x3
  1839                           
  1840  0073                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1841                           ; 2 bytes @ 0x3
  1842                           
  1843  0073                     I2C_SlaveSetIsrHandler@handler:	
  1844                           ; 2 bytes @ 0x3
  1845                           
  1846  0073                     I2C_SlaveSetReadIntHandler@handler:	
  1847                           ; 2 bytes @ 0x3
  1848                           
  1849  0073                     I2C_SlaveSetWriteIntHandler@handler:	
  1850                           ; 2 bytes @ 0x3
  1851                           
  1852  0073                     I2C_SlaveSetAddrIntHandler@handler:	
  1853                           ; 2 bytes @ 0x3
  1854                           
  1855  0073                     I2C_SlaveSetWrColIntHandler@handler:	
  1856                           ; 2 bytes @ 0x3
  1857                           
  1858  0073                     I2C_SlaveSetBusColIntHandler@handler:	
  1859                           ; 2 bytes @ 0x3
  1860                           
  1861                           
  1862                           ; 2 bytes @ 0x3
  1863  0073                     	ds	1
  1864  0074                     decode_received_char@received_char:
  1865  0074                     EUSART_Read@readValue:	
  1866                           ; 1 bytes @ 0x4
  1867                           
  1868                           
  1869                           ; 1 bytes @ 0x4
  1870  0074                     	ds	1
  1871  0075                     ??_EUSART_Initialize:
  1872  0075                     ??_I2C_Open:	
  1873                           ; 1 bytes @ 0x5
  1874                           
  1875  0075                     ??_EUSART_SetRxInterruptHandler:	
  1876                           ; 1 bytes @ 0x5
  1877                           
  1878  0075                     ??_EUSART_SetTxInterruptHandler:	
  1879                           ; 1 bytes @ 0x5
  1880                           
  1881  0075                     ??_EUSART_SetFramingErrorHandler:	
  1882                           ; 1 bytes @ 0x5
  1883                           
  1884  0075                     ??_EUSART_SetOverrunErrorHandler:	
  1885                           ; 1 bytes @ 0x5
  1886                           
  1887  0075                     ??_EUSART_SetErrorHandler:	
  1888                           ; 1 bytes @ 0x5
  1889                           
  1890  0075                     ??_I2C_SlaveSetIsrHandler:	
  1891                           ; 1 bytes @ 0x5
  1892                           
  1893  0075                     ??_I2C_SlaveSetBusColIntHandler:	
  1894                           ; 1 bytes @ 0x5
  1895                           
  1896  0075                     ??_I2C_SlaveSetWriteIntHandler:	
  1897                           ; 1 bytes @ 0x5
  1898                           
  1899  0075                     ??_I2C_SlaveSetReadIntHandler:	
  1900                           ; 1 bytes @ 0x5
  1901                           
  1902  0075                     ??_I2C_SlaveSetAddrIntHandler:	
  1903                           ; 1 bytes @ 0x5
  1904                           
  1905  0075                     ??_I2C_SlaveSetWrColIntHandler:	
  1906                           ; 1 bytes @ 0x5
  1907                           
  1908  0075                     on_digit@digit:	
  1909                           ; 1 bytes @ 0x5
  1910                           
  1911  0075                     off_digit@digit:	
  1912                           ; 1 bytes @ 0x5
  1913                           
  1914  0075                     decode_received_char@i:	
  1915                           ; 1 bytes @ 0x5
  1916                           
  1917                           
  1918                           ; 1 bytes @ 0x5
  1919  0075                     	ds	1
  1920  0076                     ??_receive_char_from_EUSART:
  1921  0076                     ??_receive_char_from_I2C:	
  1922                           ; 1 bytes @ 0x6
  1923                           
  1924  0076                     ??_SYSTEM_Initialize:	
  1925                           ; 1 bytes @ 0x6
  1926                           
  1927  0076                     ??_main:	
  1928                           ; 1 bytes @ 0x6
  1929                           
  1930                           
  1931                           	psect	cstackBANK0
  1932  0055                     __pcstackBANK0:	
  1933                           ; 1 bytes @ 0x6
  1934                           
  1935  0055                     ?_show_character:
  1936  0055                     show_character@character:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939                           
  1940                           ; 1 bytes @ 0x0
  1941  0055                     	ds	1
  1942  0056                     show_character@digit:
  1943                           
  1944                           ; 1 bytes @ 0x1
  1945  0056                     	ds	1
  1946  0057                     ??_show_character:
  1947                           
  1948                           ; 1 bytes @ 0x2
  1949  0057                     	ds	2
  1950  0059                     show_character@dot:
  1951                           
  1952                           ; 1 bytes @ 0x4
  1953  0059                     	ds	1
  1954  005A                     show_character@group:
  1955                           
  1956                           ; 1 bytes @ 0x5
  1957  005A                     	ds	1
  1958  005B                     ??_show:
  1959                           
  1960                           ; 1 bytes @ 0x6
  1961  005B                     	ds	2
  1962                           
  1963                           	psect	maintext
  1964  060B                     __pmaintext:	
  1965 ;;
  1966 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1967 ;;
  1968 ;; *************** function _main *****************
  1969 ;; Defined at:
  1970 ;;		line 108 in file "main.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : B1F/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels required when called:    8
  1990 ;; This function calls:
  1991 ;;		_EUSART_is_rx_ready
  1992 ;;		_I2C_Open
  1993 ;;		_SYSTEM_Initialize
  1994 ;;		_receive_char_from_EUSART
  1995 ;;		_receive_char_from_I2C
  1996 ;;		_show
  1997 ;; This function is called by:
  1998 ;;		Startup code after reset
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _main
  2004  060B                     _main:
  2005  060B                     l3668:	
  2006                           ;incstack = 0
  2007                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2008                           
  2009                           
  2010                           ;main.c: 111:   SYSTEM_Initialize();
  2011  060B  3186  2685  3186   	fcall	_SYSTEM_Initialize
  2012  060E                     l3670:
  2013                           
  2014                           ;main.c: 117:   (INTCONbits.GIE = 1);
  2015  060E  178B               	bsf	11,7	;volatile
  2016  060F                     l3672:
  2017                           
  2018                           ;main.c: 120:   (INTCONbits.PEIE = 1);
  2019  060F  170B               	bsf	11,6	;volatile
  2020                           
  2021                           ;main.c: 128:   I2C_Open();
  2022  0610  3185  253D  3186   	fcall	_I2C_Open
  2023  0613                     l182:	
  2024                           ;main.c: 130:   while (1)
  2025                           
  2026                           
  2027                           ;main.c: 131:   {;main.c: 132:     if (EUSART_is_rx_ready())
  2028  0613  3186  26D2  3186   	fcall	_EUSART_is_rx_ready
  2029  0616  3A00               	xorlw	0
  2030  0617  1903               	skipnz
  2031  0618  2E1A               	goto	u941
  2032  0619  2E1B               	goto	u940
  2033  061A                     u941:
  2034  061A  2E1E               	goto	l3676
  2035  061B                     u940:
  2036  061B                     l3674:
  2037                           
  2038                           ;main.c: 133:     {;main.c: 134:       receive_char_from_EUSART();
  2039  061B  3186  26F2  3186   	fcall	_receive_char_from_EUSART
  2040  061E                     l3676:
  2041                           
  2042                           ;main.c: 137:     if (is_I2C_interrupt)
  2043  061E  0020               	movlb	0	; select bank0
  2044  061F  084A               	movf	_is_I2C_interrupt,w
  2045  0620  1903               	btfsc	3,2
  2046  0621  2E23               	goto	u951
  2047  0622  2E24               	goto	u950
  2048  0623                     u951:
  2049  0623  2E28               	goto	l3682
  2050  0624                     u950:
  2051  0624                     l3678:
  2052                           
  2053                           ;main.c: 138:     {;main.c: 139:       is_I2C_interrupt = 0;
  2054  0624  01CA               	clrf	_is_I2C_interrupt
  2055  0625                     l3680:
  2056                           
  2057                           ;main.c: 140:       receive_char_from_I2C();
  2058  0625  3186  26EB  3186   	fcall	_receive_char_from_I2C
  2059  0628                     l3682:
  2060                           
  2061                           ;main.c: 143:     show();
  2062  0628  3182  229B  3186   	fcall	_show
  2063  062B  2E13               	goto	l182
  2064  062C  3180  284A         	ljmp	start
  2065  062E                     __end_of_main:
  2066                           
  2067                           	psect	text1
  2068  029B                     __ptext1:	
  2069 ;; *************** function _show *****************
  2070 ;; Defined at:
  2071 ;;		line 148 in file "main.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  chars          20    0[BANK1 ] unsigned char [20]
  2076 ;;  chars_index     1   21[BANK1 ] unsigned char 
  2077 ;;  value_index     1   20[BANK1 ] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2088 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2090 ;;      Totals:         0       2      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2091 ;;Total ram usage:       24 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    7
  2094 ;; This function calls:
  2095 ;;		_off_digit
  2096 ;;		_show_character
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function _show
  2104  029B                     _show:
  2105  029B                     l3610:	
  2106                           ;incstack = 0
  2107                           ; Regs used in _show: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2108                           
  2109                           
  2110                           ;main.c: 150:   char chars[10 * 2];;main.c: 153:   unsigned char value_index = 0;
  2111  029B  0021               	movlb	1	; select bank1
  2112  029C  01B4               	clrf	show@value_index^(0+128)
  2113                           
  2114                           ;main.c: 154:   unsigned char chars_index = 0;
  2115  029D  01B5               	clrf	show@chars_index^(0+128)
  2116                           
  2117                           ;main.c: 155:   while (chars_index < 10 * 2)
  2118  029E  2B08               	goto	l3630
  2119  029F                     l3612:
  2120                           
  2121                           ;main.c: 156:   {;main.c: 157:     if (value[value_index] == '.')
  2122  029F  0834               	movf	show@value_index^(0+128),w
  2123  02A0  3EB6               	addlw	(low (_value| 0))& (0+255)
  2124  02A1  0086               	movwf	6
  2125  02A2  0187               	clrf	7
  2126  02A3  302E               	movlw	46
  2127  02A4  0601               	xorwf	1,w
  2128  02A5  1D03               	btfss	3,2
  2129  02A6  2AA8               	goto	u921
  2130  02A7  2AA9               	goto	u920
  2131  02A8                     u921:
  2132  02A8  2ADE               	goto	l3624
  2133  02A9                     u920:
  2134  02A9                     l3614:
  2135                           
  2136                           ;main.c: 158:     {;main.c: 159:       chars[chars_index++] = value[value_index++];
  2137  02A9  0834               	movf	show@value_index^(0+128),w
  2138  02AA  3EB6               	addlw	(low (_value| 0))& (0+255)
  2139  02AB  0086               	movwf	6
  2140  02AC  0187               	clrf	7
  2141  02AD  0801               	movf	1,w
  2142  02AE  0020               	movlb	0	; select bank0
  2143  02AF  00DB               	movwf	??_show
  2144  02B0  0021               	movlb	1	; select bank1
  2145  02B1  0835               	movf	show@chars_index^(0+128),w
  2146  02B2  3EA0               	addlw	(low (show@chars| 0))& (0+255)
  2147  02B3  0086               	movwf	6
  2148  02B4  0187               	clrf	7
  2149  02B5  0020               	movlb	0	; select bank0
  2150  02B6  085B               	movf	??_show,w
  2151  02B7  0081               	movwf	1
  2152  02B8                     l3616:
  2153  02B8  3001               	movlw	1
  2154  02B9  00DB               	movwf	??_show
  2155  02BA  085B               	movf	??_show,w
  2156  02BB  0021               	movlb	1	; select bank1
  2157  02BC  07B4               	addwf	show@value_index^(0+128),f
  2158  02BD                     l3618:
  2159  02BD  3001               	movlw	1
  2160  02BE  0020               	movlb	0	; select bank0
  2161  02BF  00DB               	movwf	??_show
  2162  02C0  085B               	movf	??_show,w
  2163  02C1  0021               	movlb	1	; select bank1
  2164  02C2  07B5               	addwf	show@chars_index^(0+128),f
  2165                           
  2166                           ;main.c: 160:       chars[chars_index++] = value[value_index++];
  2167  02C3  0834               	movf	show@value_index^(0+128),w
  2168  02C4  3EB6               	addlw	(low (_value| 0))& (0+255)
  2169  02C5  0086               	movwf	6
  2170  02C6  0187               	clrf	7
  2171  02C7  0801               	movf	1,w
  2172  02C8  0020               	movlb	0	; select bank0
  2173  02C9  00DB               	movwf	??_show
  2174  02CA  0021               	movlb	1	; select bank1
  2175  02CB  0835               	movf	show@chars_index^(0+128),w
  2176  02CC  3EA0               	addlw	(low (show@chars| 0))& (0+255)
  2177  02CD  0086               	movwf	6
  2178  02CE  0187               	clrf	7
  2179  02CF  0020               	movlb	0	; select bank0
  2180  02D0  085B               	movf	??_show,w
  2181  02D1  0081               	movwf	1
  2182  02D2                     l3620:
  2183  02D2  3001               	movlw	1
  2184  02D3  00DB               	movwf	??_show
  2185  02D4  085B               	movf	??_show,w
  2186  02D5  0021               	movlb	1	; select bank1
  2187  02D6  07B4               	addwf	show@value_index^(0+128),f
  2188  02D7                     l3622:
  2189  02D7  3001               	movlw	1
  2190  02D8  0020               	movlb	0	; select bank0
  2191  02D9  00DB               	movwf	??_show
  2192  02DA  085B               	movf	??_show,w
  2193  02DB  0021               	movlb	1	; select bank1
  2194  02DC  07B5               	addwf	show@chars_index^(0+128),f
  2195                           
  2196                           ;main.c: 161:     }
  2197  02DD  2B08               	goto	l3630
  2198  02DE                     l3624:
  2199                           
  2200                           ;main.c: 163:     {;main.c: 164:       chars[chars_index++] = ' ';
  2201  02DE  3020               	movlw	32
  2202  02DF  0020               	movlb	0	; select bank0
  2203  02E0  00DB               	movwf	??_show
  2204  02E1  0021               	movlb	1	; select bank1
  2205  02E2  0835               	movf	show@chars_index^(0+128),w
  2206  02E3  3EA0               	addlw	(low (show@chars| 0))& (0+255)
  2207  02E4  0086               	movwf	6
  2208  02E5  0187               	clrf	7
  2209  02E6  0020               	movlb	0	; select bank0
  2210  02E7  085B               	movf	??_show,w
  2211  02E8  0081               	movwf	1
  2212  02E9                     l3626:
  2213  02E9  3001               	movlw	1
  2214  02EA  00DB               	movwf	??_show
  2215  02EB  085B               	movf	??_show,w
  2216  02EC  0021               	movlb	1	; select bank1
  2217  02ED  07B5               	addwf	show@chars_index^(0+128),f
  2218  02EE                     l3628:
  2219                           
  2220                           ;main.c: 165:       chars[chars_index++] = value[value_index++];
  2221  02EE  0834               	movf	show@value_index^(0+128),w
  2222  02EF  3EB6               	addlw	(low (_value| 0))& (0+255)
  2223  02F0  0086               	movwf	6
  2224  02F1  0187               	clrf	7
  2225  02F2  0801               	movf	1,w
  2226  02F3  0020               	movlb	0	; select bank0
  2227  02F4  00DB               	movwf	??_show
  2228  02F5  0021               	movlb	1	; select bank1
  2229  02F6  0835               	movf	show@chars_index^(0+128),w
  2230  02F7  3EA0               	addlw	(low (show@chars| 0))& (0+255)
  2231  02F8  0086               	movwf	6
  2232  02F9  0187               	clrf	7
  2233  02FA  0020               	movlb	0	; select bank0
  2234  02FB  085B               	movf	??_show,w
  2235  02FC  0081               	movwf	1
  2236  02FD  3001               	movlw	1
  2237  02FE  00DB               	movwf	??_show
  2238  02FF  085B               	movf	??_show,w
  2239  0300  0021               	movlb	1	; select bank1
  2240  0301  07B4               	addwf	show@value_index^(0+128),f
  2241  0302  3001               	movlw	1
  2242  0303  0020               	movlb	0	; select bank0
  2243  0304  00DB               	movwf	??_show
  2244  0305  085B               	movf	??_show,w
  2245  0306  0021               	movlb	1	; select bank1
  2246  0307  07B5               	addwf	show@chars_index^(0+128),f
  2247  0308                     l3630:
  2248                           
  2249                           ;main.c: 155:   while (chars_index < 10 * 2)
  2250  0308  3014               	movlw	20
  2251  0309  0235               	subwf	show@chars_index^(0+128),w
  2252  030A  1C03               	skipc
  2253  030B  2B0D               	goto	u931
  2254  030C  2B0E               	goto	u930
  2255  030D                     u931:
  2256  030D  2A9F               	goto	l3612
  2257  030E                     u930:
  2258  030E                     l3632:
  2259                           
  2260                           ;main.c: 170:   show_character(chars[0], chars[1], 0);
  2261  030E  0821               	movf	(show@chars^(0+128)+1),w
  2262  030F  0020               	movlb	0	; select bank0
  2263  0310  00DB               	movwf	??_show
  2264  0311  085B               	movf	??_show,w
  2265  0312  00D5               	movwf	show_character@character
  2266  0313  01D6               	clrf	show_character@digit
  2267  0314  0021               	movlb	1	; select bank1
  2268  0315  0820               	movf	show@chars^(0+128),w
  2269  0316  3180  2064  3182   	fcall	_show_character
  2270                           
  2271                           ;main.c: 171:   show_character(chars[8], chars[9], 4);
  2272  0319  0021               	movlb	1	; select bank1
  2273  031A  0829               	movf	(show@chars^(0+128)+9),w
  2274  031B  0020               	movlb	0	; select bank0
  2275  031C  00DB               	movwf	??_show
  2276  031D  085B               	movf	??_show,w
  2277  031E  00D5               	movwf	show_character@character
  2278  031F  3004               	movlw	4
  2279  0320  00DC               	movwf	??_show+1
  2280  0321  085C               	movf	??_show+1,w
  2281  0322  00D6               	movwf	show_character@digit
  2282  0323  0021               	movlb	1	; select bank1
  2283  0324  0828               	movf	(show@chars^(0+128)+8),w
  2284  0325  3180  2064  3182   	fcall	_show_character
  2285                           
  2286                           ;main.c: 172:   show_character(chars[16], chars[17], 8);
  2287  0328  0021               	movlb	1	; select bank1
  2288  0329  0831               	movf	(show@chars^(0+128)+17),w
  2289  032A  0020               	movlb	0	; select bank0
  2290  032B  00DB               	movwf	??_show
  2291  032C  085B               	movf	??_show,w
  2292  032D  00D5               	movwf	show_character@character
  2293  032E  3008               	movlw	8
  2294  032F  00DC               	movwf	??_show+1
  2295  0330  085C               	movf	??_show+1,w
  2296  0331  00D6               	movwf	show_character@digit
  2297  0332  0021               	movlb	1	; select bank1
  2298  0333  0830               	movf	(show@chars^(0+128)+16),w
  2299  0334  3180  2064  3182   	fcall	_show_character
  2300  0337                     l3634:
  2301                           
  2302                           ;main.c: 173:   _delay((unsigned long)((800)*(8000000/4000000.0)));
  2303  0337  30E4               	movlw	228
  2304  0338                     u967:
  2305  0338  3200               	nop2
  2306  0339  3200               	nop2
  2307  033A  0B89               	decfsz	9,f
  2308  033B  2B38               	goto	u967
  2309  033C  3200               	nop2
  2310  033D  3200               	nop2
  2311  033E                     l3636:
  2312                           
  2313                           ;main.c: 174:   off_digit(0);
  2314  033E  3000               	movlw	0
  2315  033F  3184  24B3  3182   	fcall	_off_digit
  2316  0342                     l3638:
  2317                           
  2318                           ;main.c: 175:   off_digit(4);
  2319  0342  3004               	movlw	4
  2320  0343  3184  24B3  3182   	fcall	_off_digit
  2321  0346                     l3640:
  2322                           
  2323                           ;main.c: 176:   off_digit(8);
  2324  0346  3008               	movlw	8
  2325  0347  3184  24B3  3182   	fcall	_off_digit
  2326                           
  2327                           ;main.c: 177:   _delay((unsigned long)((200)*(8000000/4000000.0)));
  2328  034A  3085               	movlw	133
  2329  034B                     u977:
  2330  034B  0B89               	decfsz	9,f
  2331  034C  2B4B               	goto	u977
  2332  034D  0000               	nop
  2333  034E                     l3642:
  2334                           
  2335                           ;main.c: 179:   show_character(chars[2], chars[3], 1);
  2336  034E  0021               	movlb	1	; select bank1
  2337  034F  0823               	movf	(show@chars^(0+128)+3),w
  2338  0350  0020               	movlb	0	; select bank0
  2339  0351  00DB               	movwf	??_show
  2340  0352  085B               	movf	??_show,w
  2341  0353  00D5               	movwf	show_character@character
  2342  0354  01D6               	clrf	show_character@digit
  2343  0355  0AD6               	incf	show_character@digit,f
  2344  0356  0021               	movlb	1	; select bank1
  2345  0357  0822               	movf	(show@chars^(0+128)+2),w
  2346  0358  3180  2064  3182   	fcall	_show_character
  2347  035B                     l3644:
  2348                           
  2349                           ;main.c: 180:   show_character(chars[10], chars[11], 5);
  2350  035B  0021               	movlb	1	; select bank1
  2351  035C  082B               	movf	(show@chars^(0+128)+11),w
  2352  035D  0020               	movlb	0	; select bank0
  2353  035E  00DB               	movwf	??_show
  2354  035F  085B               	movf	??_show,w
  2355  0360  00D5               	movwf	show_character@character
  2356  0361  3005               	movlw	5
  2357  0362  00DC               	movwf	??_show+1
  2358  0363  085C               	movf	??_show+1,w
  2359  0364  00D6               	movwf	show_character@digit
  2360  0365  0021               	movlb	1	; select bank1
  2361  0366  082A               	movf	(show@chars^(0+128)+10),w
  2362  0367  3180  2064  3182   	fcall	_show_character
  2363  036A                     l3646:
  2364                           
  2365                           ;main.c: 181:   show_character(chars[18], chars[19], 9);
  2366  036A  0021               	movlb	1	; select bank1
  2367  036B  0833               	movf	(show@chars^(0+128)+19),w
  2368  036C  0020               	movlb	0	; select bank0
  2369  036D  00DB               	movwf	??_show
  2370  036E  085B               	movf	??_show,w
  2371  036F  00D5               	movwf	show_character@character
  2372  0370  3009               	movlw	9
  2373  0371  00DC               	movwf	??_show+1
  2374  0372  085C               	movf	??_show+1,w
  2375  0373  00D6               	movwf	show_character@digit
  2376  0374  0021               	movlb	1	; select bank1
  2377  0375  0832               	movf	(show@chars^(0+128)+18),w
  2378  0376  3180  2064  3182   	fcall	_show_character
  2379  0379                     l3648:
  2380                           
  2381                           ;main.c: 182:   _delay((unsigned long)((800)*(8000000/4000000.0)));
  2382  0379  30E4               	movlw	228
  2383  037A                     u987:
  2384  037A  3200               	nop2
  2385  037B  3200               	nop2
  2386  037C  0B89               	decfsz	9,f
  2387  037D  2B7A               	goto	u987
  2388  037E  3200               	nop2
  2389  037F  3200               	nop2
  2390                           
  2391                           ;main.c: 183:   off_digit(1);
  2392  0380  3001               	movlw	1
  2393  0381  3184  24B3  3182   	fcall	_off_digit
  2394                           
  2395                           ;main.c: 184:   off_digit(5);
  2396  0384  3005               	movlw	5
  2397  0385  3184  24B3  3182   	fcall	_off_digit
  2398                           
  2399                           ;main.c: 185:   off_digit(9);
  2400  0388  3009               	movlw	9
  2401  0389  3184  24B3  3182   	fcall	_off_digit
  2402  038C                     l3650:
  2403                           
  2404                           ;main.c: 186:   _delay((unsigned long)((200)*(8000000/4000000.0)));
  2405  038C  3085               	movlw	133
  2406  038D                     u997:
  2407  038D  0B89               	decfsz	9,f
  2408  038E  2B8D               	goto	u997
  2409  038F  0000               	nop
  2410  0390                     l3652:
  2411                           
  2412                           ;main.c: 188:   show_character(chars[4], chars[5], 2);
  2413  0390  0021               	movlb	1	; select bank1
  2414  0391  0825               	movf	(show@chars^(0+128)+5),w
  2415  0392  0020               	movlb	0	; select bank0
  2416  0393  00DB               	movwf	??_show
  2417  0394  085B               	movf	??_show,w
  2418  0395  00D5               	movwf	show_character@character
  2419  0396  3002               	movlw	2
  2420  0397  00DC               	movwf	??_show+1
  2421  0398  085C               	movf	??_show+1,w
  2422  0399  00D6               	movwf	show_character@digit
  2423  039A  0021               	movlb	1	; select bank1
  2424  039B  0824               	movf	(show@chars^(0+128)+4),w
  2425  039C  3180  2064  3182   	fcall	_show_character
  2426  039F                     l3654:
  2427                           
  2428                           ;main.c: 189:   show_character(chars[12], chars[13], 6);
  2429  039F  0021               	movlb	1	; select bank1
  2430  03A0  082D               	movf	(show@chars^(0+128)+13),w
  2431  03A1  0020               	movlb	0	; select bank0
  2432  03A2  00DB               	movwf	??_show
  2433  03A3  085B               	movf	??_show,w
  2434  03A4  00D5               	movwf	show_character@character
  2435  03A5  3006               	movlw	6
  2436  03A6  00DC               	movwf	??_show+1
  2437  03A7  085C               	movf	??_show+1,w
  2438  03A8  00D6               	movwf	show_character@digit
  2439  03A9  0021               	movlb	1	; select bank1
  2440  03AA  082C               	movf	(show@chars^(0+128)+12),w
  2441  03AB  3180  2064  3182   	fcall	_show_character
  2442  03AE                     l3656:
  2443                           
  2444                           ;main.c: 190:   _delay((unsigned long)((800)*(8000000/4000000.0)));
  2445  03AE  30E4               	movlw	228
  2446  03AF                     u1007:
  2447  03AF  3200               	nop2
  2448  03B0  3200               	nop2
  2449  03B1  0B89               	decfsz	9,f
  2450  03B2  2BAF               	goto	u1007
  2451  03B3  3200               	nop2
  2452  03B4  3200               	nop2
  2453                           
  2454                           ;main.c: 191:   off_digit(2);
  2455  03B5  3002               	movlw	2
  2456  03B6  3184  24B3  3182   	fcall	_off_digit
  2457                           
  2458                           ;main.c: 192:   off_digit(6);
  2459  03B9  3006               	movlw	6
  2460  03BA  3184  24B3  3182   	fcall	_off_digit
  2461  03BD                     l3658:
  2462                           
  2463                           ;main.c: 193:   _delay((unsigned long)((200)*(8000000/4000000.0)));
  2464  03BD  3085               	movlw	133
  2465  03BE                     u1017:
  2466  03BE  0B89               	decfsz	9,f
  2467  03BF  2BBE               	goto	u1017
  2468  03C0  0000               	nop
  2469  03C1                     l3660:
  2470                           
  2471                           ;main.c: 195:   show_character(chars[6], chars[7], 3);
  2472  03C1  0021               	movlb	1	; select bank1
  2473  03C2  0827               	movf	(show@chars^(0+128)+7),w
  2474  03C3  0020               	movlb	0	; select bank0
  2475  03C4  00DB               	movwf	??_show
  2476  03C5  085B               	movf	??_show,w
  2477  03C6  00D5               	movwf	show_character@character
  2478  03C7  3003               	movlw	3
  2479  03C8  00DC               	movwf	??_show+1
  2480  03C9  085C               	movf	??_show+1,w
  2481  03CA  00D6               	movwf	show_character@digit
  2482  03CB  0021               	movlb	1	; select bank1
  2483  03CC  0826               	movf	(show@chars^(0+128)+6),w
  2484  03CD  3180  2064  3182   	fcall	_show_character
  2485  03D0                     l3662:
  2486                           
  2487                           ;main.c: 196:   show_character(chars[14], chars[15], 7);
  2488  03D0  0021               	movlb	1	; select bank1
  2489  03D1  082F               	movf	(show@chars^(0+128)+15),w
  2490  03D2  0020               	movlb	0	; select bank0
  2491  03D3  00DB               	movwf	??_show
  2492  03D4  085B               	movf	??_show,w
  2493  03D5  00D5               	movwf	show_character@character
  2494  03D6  3007               	movlw	7
  2495  03D7  00DC               	movwf	??_show+1
  2496  03D8  085C               	movf	??_show+1,w
  2497  03D9  00D6               	movwf	show_character@digit
  2498  03DA  0021               	movlb	1	; select bank1
  2499  03DB  082E               	movf	(show@chars^(0+128)+14),w
  2500  03DC  3180  2064  3182   	fcall	_show_character
  2501  03DF                     l3664:
  2502                           
  2503                           ;main.c: 197:   _delay((unsigned long)((800)*(8000000/4000000.0)));
  2504  03DF  30E4               	movlw	228
  2505  03E0                     u1027:
  2506  03E0  3200               	nop2
  2507  03E1  3200               	nop2
  2508  03E2  0B89               	decfsz	9,f
  2509  03E3  2BE0               	goto	u1027
  2510  03E4  3200               	nop2
  2511  03E5  3200               	nop2
  2512                           
  2513                           ;main.c: 198:   off_digit(3);
  2514  03E6  3003               	movlw	3
  2515  03E7  3184  24B3  3182   	fcall	_off_digit
  2516                           
  2517                           ;main.c: 199:   off_digit(7);
  2518  03EA  3007               	movlw	7
  2519  03EB  3184  24B3  3182   	fcall	_off_digit
  2520  03EE                     l3666:
  2521                           
  2522                           ;main.c: 200:   _delay((unsigned long)((200)*(8000000/4000000.0)));
  2523  03EE  3085               	movlw	133
  2524  03EF                     u1037:
  2525  03EF  0B89               	decfsz	9,f
  2526  03F0  2BEF               	goto	u1037
  2527  03F1  0000               	nop
  2528  03F2                     l195:
  2529  03F2  0008               	return
  2530  03F3                     __end_of_show:
  2531                           
  2532                           	psect	text2
  2533  0064                     __ptext2:	
  2534 ;; *************** function _show_character *****************
  2535 ;; Defined at:
  2536 ;;		line 209 in file "main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  dot             1    wreg     unsigned char 
  2539 ;;  character       1    0[BANK0 ] unsigned char 
  2540 ;;  digit           1    1[BANK0 ] char 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;  dot             1    4[BANK0 ] unsigned char 
  2543 ;;  group           1    5[BANK0 ] enum E3048
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2556 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2557 ;;Total ram usage:        6 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    6
  2560 ;; This function calls:
  2561 ;;		_on_digit
  2562 ;; This function is called by:
  2563 ;;		_show
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _show_character
  2569  0064                     _show_character:
  2570                           
  2571                           ;incstack = 0
  2572                           ; Regs used in _show_character: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2573                           ;show_character@dot stored from wreg
  2574  0064  0020               	movlb	0	; select bank0
  2575  0065  00D9               	movwf	show_character@dot
  2576  0066                     l3472:
  2577                           
  2578                           ;main.c: 209: void show_character(char dot, char character, signed char digit);main.c: 2
      +                          10: {;main.c: 212:   NIXIE_GLOUP group;;main.c: 213:   if (digit < 4)
  2579  0066  0856               	movf	show_character@digit,w
  2580  0067  3A80               	xorlw	128
  2581  0068  3E7C               	addlw	-132
  2582  0069  1803               	skipnc
  2583  006A  286C               	goto	u891
  2584  006B  286D               	goto	u890
  2585  006C                     u891:
  2586  006C  286F               	goto	l3476
  2587  006D                     u890:
  2588  006D                     l3474:
  2589                           
  2590                           ;main.c: 214:   {;main.c: 215:     group = UPPER;
  2591  006D  01DA               	clrf	show_character@group
  2592                           
  2593                           ;main.c: 216:   }
  2594  006E  287D               	goto	l3482
  2595  006F                     l3476:
  2596  006F  0856               	movf	show_character@digit,w
  2597  0070  3A80               	xorlw	128
  2598  0071  3E78               	addlw	-136
  2599  0072  1803               	skipnc
  2600  0073  2875               	goto	u901
  2601  0074  2876               	goto	u900
  2602  0075                     u901:
  2603  0075  2879               	goto	l3480
  2604  0076                     u900:
  2605  0076                     l3478:
  2606                           
  2607                           ;main.c: 218:   {;main.c: 219:     group = MIDDLE;
  2608  0076  01DA               	clrf	show_character@group
  2609  0077  0ADA               	incf	show_character@group,f
  2610                           
  2611                           ;main.c: 220:   }
  2612  0078  287D               	goto	l3482
  2613  0079                     l3480:
  2614                           
  2615                           ;main.c: 222:   {;main.c: 223:     group = LOWER;
  2616  0079  3002               	movlw	2
  2617  007A  00D7               	movwf	??_show_character
  2618  007B  0857               	movf	??_show_character,w
  2619  007C  00DA               	movwf	show_character@group
  2620  007D                     l3482:
  2621                           
  2622                           ;main.c: 227:   if (dot == '.')
  2623  007D  302E               	movlw	46
  2624  007E  0659               	xorwf	show_character@dot,w
  2625  007F  1D03               	btfss	3,2
  2626  0080  2882               	goto	u911
  2627  0081  2883               	goto	u910
  2628  0082                     u911:
  2629  0082  28A3               	goto	l3492
  2630  0083                     u910:
  2631  0083  288A               	goto	l3488
  2632  0084                     l204:	
  2633                           ;main.c: 230:     {;main.c: 231:     case UPPER:
  2634                           
  2635                           
  2636                           ;main.c: 232:       RD0 = 1;
  2637  0084  140F               	bsf	15,0	;volatile
  2638                           
  2639                           ;main.c: 233:       break;
  2640  0085  2A35               	goto	l3540
  2641  0086                     l206:	
  2642                           ;main.c: 234:     case MIDDLE:
  2643                           
  2644                           
  2645                           ;main.c: 235:       RA7 = 1;
  2646  0086  178C               	bsf	12,7	;volatile
  2647                           
  2648                           ;main.c: 236:       break;
  2649  0087  2A35               	goto	l3540
  2650  0088                     l207:	
  2651                           ;main.c: 237:     case LOWER:
  2652                           
  2653                           
  2654                           ;main.c: 238:       RA4 = 1;
  2655  0088  160C               	bsf	12,4	;volatile
  2656  0089  2A35               	goto	l3540
  2657  008A                     l3488:
  2658  008A  085A               	movf	show_character@group,w
  2659  008B  00D7               	movwf	??_show_character
  2660  008C  01D8               	clrf	??_show_character+1
  2661                           
  2662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2663                           ; Switch size 1, requested type "simple"
  2664                           ; Number of cases is 1, Range of values is 0 to 0
  2665                           ; switch strategies available:
  2666                           ; Name         Instructions Cycles
  2667                           ; simple_byte            4     3 (average)
  2668                           ; direct_byte            8     6 (fixed)
  2669                           ; jumptable            260     6 (fixed)
  2670                           ;	Chosen strategy is simple_byte
  2671  008D  0858               	movf	??_show_character+1,w
  2672  008E  3A00               	xorlw	0	; case 0
  2673  008F  1903               	skipnz
  2674  0090  2892               	goto	l4024
  2675  0091  28B6               	goto	l209
  2676  0092                     l4024:
  2677                           
  2678                           ; Switch size 1, requested type "simple"
  2679                           ; Number of cases is 3, Range of values is 0 to 2
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           10     6 (average)
  2683                           ; direct_byte           12     6 (fixed)
  2684                           ; jumptable            260     6 (fixed)
  2685                           ;	Chosen strategy is simple_byte
  2686  0092  0857               	movf	??_show_character,w
  2687  0093  3A00               	xorlw	0	; case 0
  2688  0094  1903               	skipnz
  2689  0095  2884               	goto	l204
  2690  0096  3A01               	xorlw	1	; case 1
  2691  0097  1903               	skipnz
  2692  0098  2886               	goto	l206
  2693  0099  3A03               	xorlw	3	; case 2
  2694  009A  1903               	skipnz
  2695  009B  2888               	goto	l207
  2696  009C  28B6               	goto	l209
  2697  009D                     l211:	
  2698                           ;main.c: 246:     {;main.c: 247:     case UPPER:
  2699                           
  2700                           
  2701                           ;main.c: 248:       RD0 = 0;
  2702  009D  100F               	bcf	15,0	;volatile
  2703                           
  2704                           ;main.c: 249:       break;
  2705  009E  2A35               	goto	l3540
  2706  009F                     l213:	
  2707                           ;main.c: 250:     case MIDDLE:
  2708                           
  2709                           
  2710                           ;main.c: 251:       RA7 = 0;
  2711  009F  138C               	bcf	12,7	;volatile
  2712                           
  2713                           ;main.c: 252:       break;
  2714  00A0  2A35               	goto	l3540
  2715  00A1                     l214:	
  2716                           ;main.c: 253:     case LOWER:
  2717                           
  2718                           
  2719                           ;main.c: 254:       RA4 = 0;
  2720  00A1  120C               	bcf	12,4	;volatile
  2721  00A2  2A35               	goto	l3540
  2722  00A3                     l3492:
  2723  00A3  085A               	movf	show_character@group,w
  2724  00A4  00D7               	movwf	??_show_character
  2725  00A5  01D8               	clrf	??_show_character+1
  2726                           
  2727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2728                           ; Switch size 1, requested type "simple"
  2729                           ; Number of cases is 1, Range of values is 0 to 0
  2730                           ; switch strategies available:
  2731                           ; Name         Instructions Cycles
  2732                           ; simple_byte            4     3 (average)
  2733                           ; direct_byte            8     6 (fixed)
  2734                           ; jumptable            260     6 (fixed)
  2735                           ;	Chosen strategy is simple_byte
  2736  00A6  0858               	movf	??_show_character+1,w
  2737  00A7  3A00               	xorlw	0	; case 0
  2738  00A8  1903               	skipnz
  2739  00A9  28AB               	goto	l4026
  2740  00AA  28B6               	goto	l209
  2741  00AB                     l4026:
  2742                           
  2743                           ; Switch size 1, requested type "simple"
  2744                           ; Number of cases is 3, Range of values is 0 to 2
  2745                           ; switch strategies available:
  2746                           ; Name         Instructions Cycles
  2747                           ; simple_byte           10     6 (average)
  2748                           ; direct_byte           12     6 (fixed)
  2749                           ; jumptable            260     6 (fixed)
  2750                           ;	Chosen strategy is simple_byte
  2751  00AB  0857               	movf	??_show_character,w
  2752  00AC  3A00               	xorlw	0	; case 0
  2753  00AD  1903               	skipnz
  2754  00AE  289D               	goto	l211
  2755  00AF  3A01               	xorlw	1	; case 1
  2756  00B0  1903               	skipnz
  2757  00B1  289F               	goto	l213
  2758  00B2  3A03               	xorlw	3	; case 2
  2759  00B3  1903               	skipnz
  2760  00B4  28A1               	goto	l214
  2761  00B5  28B6               	goto	l209
  2762  00B6                     l209:	
  2763                           ;main.c: 258:   }
  2764                           
  2765                           
  2766                           ;main.c: 261:   switch (character)
  2767  00B6  2A35               	goto	l3540
  2768  00B7                     l219:	
  2769                           ;main.c: 265:   case 'W':
  2770                           
  2771                           
  2772                           ;main.c: 267:     switch (group)
  2773  00B7  28C7               	goto	l3496
  2774  00B8                     l221:	
  2775                           ;main.c: 268:     {;main.c: 269:     case UPPER:
  2776                           
  2777                           
  2778                           ;main.c: 270:       RA6 = 0;
  2779  00B8  130C               	bcf	12,6	;volatile
  2780                           
  2781                           ;main.c: 271:       RC0 = 0;
  2782  00B9  100E               	bcf	14,0	;volatile
  2783                           
  2784                           ;main.c: 272:       RC1 = 0;
  2785  00BA  108E               	bcf	14,1	;volatile
  2786                           
  2787                           ;main.c: 273:       RC2 = 0;
  2788  00BB  110E               	bcf	14,2	;volatile
  2789                           
  2790                           ;main.c: 274:       break;
  2791  00BC  2A96               	goto	l3542
  2792  00BD                     l223:	
  2793                           ;main.c: 276:     case MIDDLE:
  2794                           
  2795                           
  2796                           ;main.c: 277:       RA5 = 0;
  2797  00BD  128C               	bcf	12,5	;volatile
  2798                           
  2799                           ;main.c: 278:       RE0 = 0;
  2800  00BE  1010               	bcf	16,0	;volatile
  2801                           
  2802                           ;main.c: 279:       RE1 = 0;
  2803  00BF  1090               	bcf	16,1	;volatile
  2804                           
  2805                           ;main.c: 280:       RE2 = 0;
  2806  00C0  1110               	bcf	16,2	;volatile
  2807                           
  2808                           ;main.c: 281:       break;
  2809  00C1  2A96               	goto	l3542
  2810  00C2                     l224:	
  2811                           ;main.c: 283:     case LOWER:
  2812                           
  2813                           
  2814                           ;main.c: 284:       RA0 = 0;
  2815  00C2  100C               	bcf	12,0	;volatile
  2816                           
  2817                           ;main.c: 285:       RA1 = 0;
  2818  00C3  108C               	bcf	12,1	;volatile
  2819                           
  2820                           ;main.c: 286:       RA2 = 0;
  2821  00C4  110C               	bcf	12,2	;volatile
  2822                           
  2823                           ;main.c: 287:       RA3 = 0;
  2824  00C5  118C               	bcf	12,3	;volatile
  2825                           
  2826                           ;main.c: 288:       break;
  2827  00C6  2A96               	goto	l3542
  2828  00C7                     l3496:
  2829  00C7  085A               	movf	show_character@group,w
  2830  00C8  00D7               	movwf	??_show_character
  2831  00C9  01D8               	clrf	??_show_character+1
  2832                           
  2833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2834                           ; Switch size 1, requested type "simple"
  2835                           ; Number of cases is 1, Range of values is 0 to 0
  2836                           ; switch strategies available:
  2837                           ; Name         Instructions Cycles
  2838                           ; simple_byte            4     3 (average)
  2839                           ; direct_byte            8     6 (fixed)
  2840                           ; jumptable            260     6 (fixed)
  2841                           ;	Chosen strategy is simple_byte
  2842  00CA  0858               	movf	??_show_character+1,w
  2843  00CB  3A00               	xorlw	0	; case 0
  2844  00CC  1903               	skipnz
  2845  00CD  28CF               	goto	l4028
  2846  00CE  2A96               	goto	l3542
  2847  00CF                     l4028:
  2848                           
  2849                           ; Switch size 1, requested type "simple"
  2850                           ; Number of cases is 3, Range of values is 0 to 2
  2851                           ; switch strategies available:
  2852                           ; Name         Instructions Cycles
  2853                           ; simple_byte           10     6 (average)
  2854                           ; direct_byte           12     6 (fixed)
  2855                           ; jumptable            260     6 (fixed)
  2856                           ;	Chosen strategy is simple_byte
  2857  00CF  0857               	movf	??_show_character,w
  2858  00D0  3A00               	xorlw	0	; case 0
  2859  00D1  1903               	skipnz
  2860  00D2  28B8               	goto	l221
  2861  00D3  3A01               	xorlw	1	; case 1
  2862  00D4  1903               	skipnz
  2863  00D5  28BD               	goto	l223
  2864  00D6  3A03               	xorlw	3	; case 2
  2865  00D7  1903               	skipnz
  2866  00D8  28C2               	goto	l224
  2867  00D9  2A96               	goto	l3542
  2868  00DA                     l229:	
  2869                           ;main.c: 297:   case 'A':
  2870                           
  2871                           
  2872                           ;main.c: 298:     switch (group)
  2873  00DA  28EA               	goto	l3500
  2874  00DB                     l231:	
  2875                           ;main.c: 299:     {;main.c: 300:     case UPPER:
  2876                           
  2877                           
  2878                           ;main.c: 301:       RA6 = 0;
  2879  00DB  130C               	bcf	12,6	;volatile
  2880                           
  2881                           ;main.c: 302:       RC0 = 0;
  2882  00DC  100E               	bcf	14,0	;volatile
  2883                           
  2884                           ;main.c: 303:       RC1 = 0;
  2885  00DD  108E               	bcf	14,1	;volatile
  2886                           
  2887                           ;main.c: 304:       RC2 = 1;
  2888  00DE  150E               	bsf	14,2	;volatile
  2889                           
  2890                           ;main.c: 305:       break;
  2891  00DF  2A96               	goto	l3542
  2892  00E0                     l233:	
  2893                           ;main.c: 307:     case MIDDLE:
  2894                           
  2895                           
  2896                           ;main.c: 308:       RA5 = 0;
  2897  00E0  128C               	bcf	12,5	;volatile
  2898                           
  2899                           ;main.c: 309:       RE0 = 0;
  2900  00E1  1010               	bcf	16,0	;volatile
  2901                           
  2902                           ;main.c: 310:       RE1 = 0;
  2903  00E2  1090               	bcf	16,1	;volatile
  2904                           
  2905                           ;main.c: 311:       RE2 = 1;
  2906  00E3  1510               	bsf	16,2	;volatile
  2907                           
  2908                           ;main.c: 312:       break;
  2909  00E4  2A96               	goto	l3542
  2910  00E5                     l234:	
  2911                           ;main.c: 314:     case LOWER:
  2912                           
  2913                           
  2914                           ;main.c: 315:       RA0 = 0;
  2915  00E5  100C               	bcf	12,0	;volatile
  2916                           
  2917                           ;main.c: 316:       RA1 = 0;
  2918  00E6  108C               	bcf	12,1	;volatile
  2919                           
  2920                           ;main.c: 317:       RA2 = 0;
  2921  00E7  110C               	bcf	12,2	;volatile
  2922                           
  2923                           ;main.c: 318:       RA3 = 1;
  2924  00E8  158C               	bsf	12,3	;volatile
  2925                           
  2926                           ;main.c: 319:       break;
  2927  00E9  2A96               	goto	l3542
  2928  00EA                     l3500:
  2929  00EA  085A               	movf	show_character@group,w
  2930  00EB  00D7               	movwf	??_show_character
  2931  00EC  01D8               	clrf	??_show_character+1
  2932                           
  2933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2934                           ; Switch size 1, requested type "simple"
  2935                           ; Number of cases is 1, Range of values is 0 to 0
  2936                           ; switch strategies available:
  2937                           ; Name         Instructions Cycles
  2938                           ; simple_byte            4     3 (average)
  2939                           ; direct_byte            8     6 (fixed)
  2940                           ; jumptable            260     6 (fixed)
  2941                           ;	Chosen strategy is simple_byte
  2942  00ED  0858               	movf	??_show_character+1,w
  2943  00EE  3A00               	xorlw	0	; case 0
  2944  00EF  1903               	skipnz
  2945  00F0  28F2               	goto	l4030
  2946  00F1  2A96               	goto	l3542
  2947  00F2                     l4030:
  2948                           
  2949                           ; Switch size 1, requested type "simple"
  2950                           ; Number of cases is 3, Range of values is 0 to 2
  2951                           ; switch strategies available:
  2952                           ; Name         Instructions Cycles
  2953                           ; simple_byte           10     6 (average)
  2954                           ; direct_byte           12     6 (fixed)
  2955                           ; jumptable            260     6 (fixed)
  2956                           ;	Chosen strategy is simple_byte
  2957  00F2  0857               	movf	??_show_character,w
  2958  00F3  3A00               	xorlw	0	; case 0
  2959  00F4  1903               	skipnz
  2960  00F5  28DB               	goto	l231
  2961  00F6  3A01               	xorlw	1	; case 1
  2962  00F7  1903               	skipnz
  2963  00F8  28E0               	goto	l233
  2964  00F9  3A03               	xorlw	3	; case 2
  2965  00FA  1903               	skipnz
  2966  00FB  28E5               	goto	l234
  2967  00FC  2A96               	goto	l3542
  2968  00FD                     l238:	
  2969                           ;main.c: 328:   case 'O':
  2970                           
  2971                           
  2972                           ;main.c: 329:     switch (group)
  2973  00FD  290D               	goto	l3504
  2974  00FE                     l240:	
  2975                           ;main.c: 330:     {;main.c: 331:     case UPPER:
  2976                           
  2977                           
  2978                           ;main.c: 332:       RA6 = 0;
  2979  00FE  130C               	bcf	12,6	;volatile
  2980                           
  2981                           ;main.c: 333:       RC0 = 0;
  2982  00FF  100E               	bcf	14,0	;volatile
  2983                           
  2984                           ;main.c: 334:       RC1 = 1;
  2985  0100  148E               	bsf	14,1	;volatile
  2986                           
  2987                           ;main.c: 335:       RC2 = 0;
  2988  0101  110E               	bcf	14,2	;volatile
  2989                           
  2990                           ;main.c: 336:       break;
  2991  0102  2A96               	goto	l3542
  2992  0103                     l242:	
  2993                           ;main.c: 338:     case MIDDLE:
  2994                           
  2995                           
  2996                           ;main.c: 339:       RA5 = 0;
  2997  0103  128C               	bcf	12,5	;volatile
  2998                           
  2999                           ;main.c: 340:       RE0 = 0;
  3000  0104  1010               	bcf	16,0	;volatile
  3001                           
  3002                           ;main.c: 341:       RE1 = 1;
  3003  0105  1490               	bsf	16,1	;volatile
  3004                           
  3005                           ;main.c: 342:       RE2 = 0;
  3006  0106  1110               	bcf	16,2	;volatile
  3007                           
  3008                           ;main.c: 343:       break;
  3009  0107  2A96               	goto	l3542
  3010  0108                     l243:	
  3011                           ;main.c: 345:     case LOWER:
  3012                           
  3013                           
  3014                           ;main.c: 346:       RA0 = 0;
  3015  0108  100C               	bcf	12,0	;volatile
  3016                           
  3017                           ;main.c: 347:       RA1 = 0;
  3018  0109  108C               	bcf	12,1	;volatile
  3019                           
  3020                           ;main.c: 348:       RA2 = 1;
  3021  010A  150C               	bsf	12,2	;volatile
  3022                           
  3023                           ;main.c: 349:       RA3 = 0;
  3024  010B  118C               	bcf	12,3	;volatile
  3025                           
  3026                           ;main.c: 350:       break;
  3027  010C  2A96               	goto	l3542
  3028  010D                     l3504:
  3029  010D  085A               	movf	show_character@group,w
  3030  010E  00D7               	movwf	??_show_character
  3031  010F  01D8               	clrf	??_show_character+1
  3032                           
  3033                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3034                           ; Switch size 1, requested type "simple"
  3035                           ; Number of cases is 1, Range of values is 0 to 0
  3036                           ; switch strategies available:
  3037                           ; Name         Instructions Cycles
  3038                           ; simple_byte            4     3 (average)
  3039                           ; direct_byte            8     6 (fixed)
  3040                           ; jumptable            260     6 (fixed)
  3041                           ;	Chosen strategy is simple_byte
  3042  0110  0858               	movf	??_show_character+1,w
  3043  0111  3A00               	xorlw	0	; case 0
  3044  0112  1903               	skipnz
  3045  0113  2915               	goto	l4032
  3046  0114  2A96               	goto	l3542
  3047  0115                     l4032:
  3048                           
  3049                           ; Switch size 1, requested type "simple"
  3050                           ; Number of cases is 3, Range of values is 0 to 2
  3051                           ; switch strategies available:
  3052                           ; Name         Instructions Cycles
  3053                           ; simple_byte           10     6 (average)
  3054                           ; direct_byte           12     6 (fixed)
  3055                           ; jumptable            260     6 (fixed)
  3056                           ;	Chosen strategy is simple_byte
  3057  0115  0857               	movf	??_show_character,w
  3058  0116  3A00               	xorlw	0	; case 0
  3059  0117  1903               	skipnz
  3060  0118  28FE               	goto	l240
  3061  0119  3A01               	xorlw	1	; case 1
  3062  011A  1903               	skipnz
  3063  011B  2903               	goto	l242
  3064  011C  3A03               	xorlw	3	; case 2
  3065  011D  1903               	skipnz
  3066  011E  2908               	goto	l243
  3067  011F  2A96               	goto	l3542
  3068  0120                     l248:	
  3069                           ;main.c: 360:     {;main.c: 361:     case UPPER:
  3070                           
  3071                           
  3072                           ;main.c: 362:       RA6 = 0;
  3073  0120  130C               	bcf	12,6	;volatile
  3074                           
  3075                           ;main.c: 363:       RC0 = 0;
  3076  0121  100E               	bcf	14,0	;volatile
  3077                           
  3078                           ;main.c: 364:       RC1 = 1;
  3079  0122  148E               	bsf	14,1	;volatile
  3080                           
  3081                           ;main.c: 365:       RC2 = 1;
  3082  0123  150E               	bsf	14,2	;volatile
  3083                           
  3084                           ;main.c: 366:       break;
  3085  0124  2A96               	goto	l3542
  3086  0125                     l250:	
  3087                           ;main.c: 368:     case MIDDLE:
  3088                           
  3089                           
  3090                           ;main.c: 369:       RA5 = 0;
  3091  0125  128C               	bcf	12,5	;volatile
  3092                           
  3093                           ;main.c: 370:       RE0 = 0;
  3094  0126  1010               	bcf	16,0	;volatile
  3095                           
  3096                           ;main.c: 371:       RE1 = 1;
  3097  0127  1490               	bsf	16,1	;volatile
  3098                           
  3099                           ;main.c: 372:       RE2 = 1;
  3100  0128  1510               	bsf	16,2	;volatile
  3101                           
  3102                           ;main.c: 373:       break;
  3103  0129  2A96               	goto	l3542
  3104  012A                     l251:	
  3105                           ;main.c: 375:     case LOWER:
  3106                           
  3107                           
  3108                           ;main.c: 376:       RA0 = 0;
  3109  012A  100C               	bcf	12,0	;volatile
  3110                           
  3111                           ;main.c: 377:       RA1 = 0;
  3112  012B  108C               	bcf	12,1	;volatile
  3113                           
  3114                           ;main.c: 378:       RA2 = 1;
  3115  012C  150C               	bsf	12,2	;volatile
  3116                           
  3117                           ;main.c: 379:       RA3 = 1;
  3118  012D  158C               	bsf	12,3	;volatile
  3119                           
  3120                           ;main.c: 380:       break;
  3121  012E  2A96               	goto	l3542
  3122  012F                     l3508:
  3123  012F  085A               	movf	show_character@group,w
  3124  0130  00D7               	movwf	??_show_character
  3125  0131  01D8               	clrf	??_show_character+1
  3126                           
  3127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3128                           ; Switch size 1, requested type "simple"
  3129                           ; Number of cases is 1, Range of values is 0 to 0
  3130                           ; switch strategies available:
  3131                           ; Name         Instructions Cycles
  3132                           ; simple_byte            4     3 (average)
  3133                           ; direct_byte            8     6 (fixed)
  3134                           ; jumptable            260     6 (fixed)
  3135                           ;	Chosen strategy is simple_byte
  3136  0132  0858               	movf	??_show_character+1,w
  3137  0133  3A00               	xorlw	0	; case 0
  3138  0134  1903               	skipnz
  3139  0135  2937               	goto	l4034
  3140  0136  2A96               	goto	l3542
  3141  0137                     l4034:
  3142                           
  3143                           ; Switch size 1, requested type "simple"
  3144                           ; Number of cases is 3, Range of values is 0 to 2
  3145                           ; switch strategies available:
  3146                           ; Name         Instructions Cycles
  3147                           ; simple_byte           10     6 (average)
  3148                           ; direct_byte           12     6 (fixed)
  3149                           ; jumptable            260     6 (fixed)
  3150                           ;	Chosen strategy is simple_byte
  3151  0137  0857               	movf	??_show_character,w
  3152  0138  3A00               	xorlw	0	; case 0
  3153  0139  1903               	skipnz
  3154  013A  2920               	goto	l248
  3155  013B  3A01               	xorlw	1	; case 1
  3156  013C  1903               	skipnz
  3157  013D  2925               	goto	l250
  3158  013E  3A03               	xorlw	3	; case 2
  3159  013F  1903               	skipnz
  3160  0140  292A               	goto	l251
  3161  0141  2A96               	goto	l3542
  3162  0142                     l255:	
  3163                           ;main.c: 389:   case 'S':
  3164                           
  3165                           
  3166                           ;main.c: 390:     switch (group)
  3167  0142  2952               	goto	l3512
  3168  0143                     l257:	
  3169                           ;main.c: 391:     {;main.c: 392:     case UPPER:
  3170                           
  3171                           
  3172                           ;main.c: 393:       RA6 = 0;
  3173  0143  130C               	bcf	12,6	;volatile
  3174                           
  3175                           ;main.c: 394:       RC0 = 1;
  3176  0144  140E               	bsf	14,0	;volatile
  3177                           
  3178                           ;main.c: 395:       RC1 = 0;
  3179  0145  108E               	bcf	14,1	;volatile
  3180                           
  3181                           ;main.c: 396:       RC2 = 0;
  3182  0146  110E               	bcf	14,2	;volatile
  3183                           
  3184                           ;main.c: 397:       break;
  3185  0147  2A96               	goto	l3542
  3186  0148                     l259:	
  3187                           ;main.c: 399:     case MIDDLE:
  3188                           
  3189                           
  3190                           ;main.c: 400:       RA5 = 0;
  3191  0148  128C               	bcf	12,5	;volatile
  3192                           
  3193                           ;main.c: 401:       RE0 = 1;
  3194  0149  1410               	bsf	16,0	;volatile
  3195                           
  3196                           ;main.c: 402:       RE1 = 0;
  3197  014A  1090               	bcf	16,1	;volatile
  3198                           
  3199                           ;main.c: 403:       RE2 = 0;
  3200  014B  1110               	bcf	16,2	;volatile
  3201                           
  3202                           ;main.c: 404:       break;
  3203  014C  2A96               	goto	l3542
  3204  014D                     l260:	
  3205                           ;main.c: 406:     case LOWER:
  3206                           
  3207                           
  3208                           ;main.c: 407:       RA0 = 0;
  3209  014D  100C               	bcf	12,0	;volatile
  3210                           
  3211                           ;main.c: 408:       RA1 = 1;
  3212  014E  148C               	bsf	12,1	;volatile
  3213                           
  3214                           ;main.c: 409:       RA2 = 0;
  3215  014F  110C               	bcf	12,2	;volatile
  3216                           
  3217                           ;main.c: 410:       RA3 = 0;
  3218  0150  118C               	bcf	12,3	;volatile
  3219                           
  3220                           ;main.c: 411:       break;
  3221  0151  2A96               	goto	l3542
  3222  0152                     l3512:
  3223  0152  085A               	movf	show_character@group,w
  3224  0153  00D7               	movwf	??_show_character
  3225  0154  01D8               	clrf	??_show_character+1
  3226                           
  3227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3228                           ; Switch size 1, requested type "simple"
  3229                           ; Number of cases is 1, Range of values is 0 to 0
  3230                           ; switch strategies available:
  3231                           ; Name         Instructions Cycles
  3232                           ; simple_byte            4     3 (average)
  3233                           ; direct_byte            8     6 (fixed)
  3234                           ; jumptable            260     6 (fixed)
  3235                           ;	Chosen strategy is simple_byte
  3236  0155  0858               	movf	??_show_character+1,w
  3237  0156  3A00               	xorlw	0	; case 0
  3238  0157  1903               	skipnz
  3239  0158  295A               	goto	l4036
  3240  0159  2A96               	goto	l3542
  3241  015A                     l4036:
  3242                           
  3243                           ; Switch size 1, requested type "simple"
  3244                           ; Number of cases is 3, Range of values is 0 to 2
  3245                           ; switch strategies available:
  3246                           ; Name         Instructions Cycles
  3247                           ; simple_byte           10     6 (average)
  3248                           ; direct_byte           12     6 (fixed)
  3249                           ; jumptable            260     6 (fixed)
  3250                           ;	Chosen strategy is simple_byte
  3251  015A  0857               	movf	??_show_character,w
  3252  015B  3A00               	xorlw	0	; case 0
  3253  015C  1903               	skipnz
  3254  015D  2943               	goto	l257
  3255  015E  3A01               	xorlw	1	; case 1
  3256  015F  1903               	skipnz
  3257  0160  2948               	goto	l259
  3258  0161  3A03               	xorlw	3	; case 2
  3259  0162  1903               	skipnz
  3260  0163  294D               	goto	l260
  3261  0164  2A96               	goto	l3542
  3262  0165                     l264:	
  3263                           ;main.c: 420:   case 'V':
  3264                           
  3265                           
  3266                           ;main.c: 421:     switch (group)
  3267  0165  2975               	goto	l3516
  3268  0166                     l266:	
  3269                           ;main.c: 422:     {;main.c: 423:     case UPPER:
  3270                           
  3271                           
  3272                           ;main.c: 424:       RA6 = 0;
  3273  0166  130C               	bcf	12,6	;volatile
  3274                           
  3275                           ;main.c: 425:       RC0 = 1;
  3276  0167  140E               	bsf	14,0	;volatile
  3277                           
  3278                           ;main.c: 426:       RC1 = 0;
  3279  0168  108E               	bcf	14,1	;volatile
  3280                           
  3281                           ;main.c: 427:       RC2 = 1;
  3282  0169  150E               	bsf	14,2	;volatile
  3283                           
  3284                           ;main.c: 428:       break;
  3285  016A  2A96               	goto	l3542
  3286  016B                     l268:	
  3287                           ;main.c: 430:     case MIDDLE:
  3288                           
  3289                           
  3290                           ;main.c: 431:       RA5 = 0;
  3291  016B  128C               	bcf	12,5	;volatile
  3292                           
  3293                           ;main.c: 432:       RE0 = 1;
  3294  016C  1410               	bsf	16,0	;volatile
  3295                           
  3296                           ;main.c: 433:       RE1 = 0;
  3297  016D  1090               	bcf	16,1	;volatile
  3298                           
  3299                           ;main.c: 434:       RE2 = 1;
  3300  016E  1510               	bsf	16,2	;volatile
  3301                           
  3302                           ;main.c: 435:       break;
  3303  016F  2A96               	goto	l3542
  3304  0170                     l269:	
  3305                           ;main.c: 437:     case LOWER:
  3306                           
  3307                           
  3308                           ;main.c: 438:       RA0 = 0;
  3309  0170  100C               	bcf	12,0	;volatile
  3310                           
  3311                           ;main.c: 439:       RA1 = 1;
  3312  0171  148C               	bsf	12,1	;volatile
  3313                           
  3314                           ;main.c: 440:       RA2 = 0;
  3315  0172  110C               	bcf	12,2	;volatile
  3316                           
  3317                           ;main.c: 441:       RA3 = 1;
  3318  0173  158C               	bsf	12,3	;volatile
  3319                           
  3320                           ;main.c: 442:       break;
  3321  0174  2A96               	goto	l3542
  3322  0175                     l3516:
  3323  0175  085A               	movf	show_character@group,w
  3324  0176  00D7               	movwf	??_show_character
  3325  0177  01D8               	clrf	??_show_character+1
  3326                           
  3327                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3328                           ; Switch size 1, requested type "simple"
  3329                           ; Number of cases is 1, Range of values is 0 to 0
  3330                           ; switch strategies available:
  3331                           ; Name         Instructions Cycles
  3332                           ; simple_byte            4     3 (average)
  3333                           ; direct_byte            8     6 (fixed)
  3334                           ; jumptable            260     6 (fixed)
  3335                           ;	Chosen strategy is simple_byte
  3336  0178  0858               	movf	??_show_character+1,w
  3337  0179  3A00               	xorlw	0	; case 0
  3338  017A  1903               	skipnz
  3339  017B  297D               	goto	l4038
  3340  017C  2A96               	goto	l3542
  3341  017D                     l4038:
  3342                           
  3343                           ; Switch size 1, requested type "simple"
  3344                           ; Number of cases is 3, Range of values is 0 to 2
  3345                           ; switch strategies available:
  3346                           ; Name         Instructions Cycles
  3347                           ; simple_byte           10     6 (average)
  3348                           ; direct_byte           12     6 (fixed)
  3349                           ; jumptable            260     6 (fixed)
  3350                           ;	Chosen strategy is simple_byte
  3351  017D  0857               	movf	??_show_character,w
  3352  017E  3A00               	xorlw	0	; case 0
  3353  017F  1903               	skipnz
  3354  0180  2966               	goto	l266
  3355  0181  3A01               	xorlw	1	; case 1
  3356  0182  1903               	skipnz
  3357  0183  296B               	goto	l268
  3358  0184  3A03               	xorlw	3	; case 2
  3359  0185  1903               	skipnz
  3360  0186  2970               	goto	l269
  3361  0187  2A96               	goto	l3542
  3362  0188                     l273:	
  3363                           ;main.c: 451:   case 'H':
  3364                           
  3365                           
  3366                           ;main.c: 452:     switch (group)
  3367  0188  2998               	goto	l3520
  3368  0189                     l275:	
  3369                           ;main.c: 453:     {;main.c: 454:     case UPPER:
  3370                           
  3371                           
  3372                           ;main.c: 455:       RA6 = 0;
  3373  0189  130C               	bcf	12,6	;volatile
  3374                           
  3375                           ;main.c: 456:       RC0 = 1;
  3376  018A  140E               	bsf	14,0	;volatile
  3377                           
  3378                           ;main.c: 457:       RC1 = 1;
  3379  018B  148E               	bsf	14,1	;volatile
  3380                           
  3381                           ;main.c: 458:       RC2 = 0;
  3382  018C  110E               	bcf	14,2	;volatile
  3383                           
  3384                           ;main.c: 459:       break;
  3385  018D  2A96               	goto	l3542
  3386  018E                     l277:	
  3387                           ;main.c: 461:     case MIDDLE:
  3388                           
  3389                           
  3390                           ;main.c: 462:       RA5 = 0;
  3391  018E  128C               	bcf	12,5	;volatile
  3392                           
  3393                           ;main.c: 463:       RE0 = 1;
  3394  018F  1410               	bsf	16,0	;volatile
  3395                           
  3396                           ;main.c: 464:       RE1 = 1;
  3397  0190  1490               	bsf	16,1	;volatile
  3398                           
  3399                           ;main.c: 465:       RE2 = 0;
  3400  0191  1110               	bcf	16,2	;volatile
  3401                           
  3402                           ;main.c: 466:       break;
  3403  0192  2A96               	goto	l3542
  3404  0193                     l278:	
  3405                           ;main.c: 468:     case LOWER:
  3406                           
  3407                           
  3408                           ;main.c: 469:       RA0 = 0;
  3409  0193  100C               	bcf	12,0	;volatile
  3410                           
  3411                           ;main.c: 470:       RA1 = 1;
  3412  0194  148C               	bsf	12,1	;volatile
  3413                           
  3414                           ;main.c: 471:       RA2 = 1;
  3415  0195  150C               	bsf	12,2	;volatile
  3416                           
  3417                           ;main.c: 472:       RA3 = 0;
  3418  0196  118C               	bcf	12,3	;volatile
  3419                           
  3420                           ;main.c: 473:       break;
  3421  0197  2A96               	goto	l3542
  3422  0198                     l3520:
  3423  0198  085A               	movf	show_character@group,w
  3424  0199  00D7               	movwf	??_show_character
  3425  019A  01D8               	clrf	??_show_character+1
  3426                           
  3427                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3428                           ; Switch size 1, requested type "simple"
  3429                           ; Number of cases is 1, Range of values is 0 to 0
  3430                           ; switch strategies available:
  3431                           ; Name         Instructions Cycles
  3432                           ; simple_byte            4     3 (average)
  3433                           ; direct_byte            8     6 (fixed)
  3434                           ; jumptable            260     6 (fixed)
  3435                           ;	Chosen strategy is simple_byte
  3436  019B  0858               	movf	??_show_character+1,w
  3437  019C  3A00               	xorlw	0	; case 0
  3438  019D  1903               	skipnz
  3439  019E  29A0               	goto	l4040
  3440  019F  2A96               	goto	l3542
  3441  01A0                     l4040:
  3442                           
  3443                           ; Switch size 1, requested type "simple"
  3444                           ; Number of cases is 3, Range of values is 0 to 2
  3445                           ; switch strategies available:
  3446                           ; Name         Instructions Cycles
  3447                           ; simple_byte           10     6 (average)
  3448                           ; direct_byte           12     6 (fixed)
  3449                           ; jumptable            260     6 (fixed)
  3450                           ;	Chosen strategy is simple_byte
  3451  01A0  0857               	movf	??_show_character,w
  3452  01A1  3A00               	xorlw	0	; case 0
  3453  01A2  1903               	skipnz
  3454  01A3  2989               	goto	l275
  3455  01A4  3A01               	xorlw	1	; case 1
  3456  01A5  1903               	skipnz
  3457  01A6  298E               	goto	l277
  3458  01A7  3A03               	xorlw	3	; case 2
  3459  01A8  1903               	skipnz
  3460  01A9  2993               	goto	l278
  3461  01AA  2A96               	goto	l3542
  3462  01AB                     l282:	
  3463                           ;main.c: 482:   case 'h':
  3464                           
  3465                           
  3466                           ;main.c: 483:     switch (group)
  3467  01AB  29BB               	goto	l3524
  3468  01AC                     l284:	
  3469                           ;main.c: 484:     {;main.c: 485:     case UPPER:
  3470                           
  3471                           
  3472                           ;main.c: 486:       RA6 = 0;
  3473  01AC  130C               	bcf	12,6	;volatile
  3474                           
  3475                           ;main.c: 487:       RC0 = 1;
  3476  01AD  140E               	bsf	14,0	;volatile
  3477                           
  3478                           ;main.c: 488:       RC1 = 1;
  3479  01AE  148E               	bsf	14,1	;volatile
  3480                           
  3481                           ;main.c: 489:       RC2 = 1;
  3482  01AF  150E               	bsf	14,2	;volatile
  3483                           
  3484                           ;main.c: 490:       break;
  3485  01B0  2A96               	goto	l3542
  3486  01B1                     l286:	
  3487                           ;main.c: 492:     case MIDDLE:
  3488                           
  3489                           
  3490                           ;main.c: 493:       RA5 = 0;
  3491  01B1  128C               	bcf	12,5	;volatile
  3492                           
  3493                           ;main.c: 494:       RE0 = 1;
  3494  01B2  1410               	bsf	16,0	;volatile
  3495                           
  3496                           ;main.c: 495:       RE1 = 1;
  3497  01B3  1490               	bsf	16,1	;volatile
  3498                           
  3499                           ;main.c: 496:       RE2 = 1;
  3500  01B4  1510               	bsf	16,2	;volatile
  3501                           
  3502                           ;main.c: 497:       break;
  3503  01B5  2A96               	goto	l3542
  3504  01B6                     l287:	
  3505                           ;main.c: 499:     case LOWER:
  3506                           
  3507                           
  3508                           ;main.c: 500:       RA0 = 0;
  3509  01B6  100C               	bcf	12,0	;volatile
  3510                           
  3511                           ;main.c: 501:       RA1 = 1;
  3512  01B7  148C               	bsf	12,1	;volatile
  3513                           
  3514                           ;main.c: 502:       RA2 = 1;
  3515  01B8  150C               	bsf	12,2	;volatile
  3516                           
  3517                           ;main.c: 503:       RA3 = 1;
  3518  01B9  158C               	bsf	12,3	;volatile
  3519                           
  3520                           ;main.c: 504:       break;
  3521  01BA  2A96               	goto	l3542
  3522  01BB                     l3524:
  3523  01BB  085A               	movf	show_character@group,w
  3524  01BC  00D7               	movwf	??_show_character
  3525  01BD  01D8               	clrf	??_show_character+1
  3526                           
  3527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3528                           ; Switch size 1, requested type "simple"
  3529                           ; Number of cases is 1, Range of values is 0 to 0
  3530                           ; switch strategies available:
  3531                           ; Name         Instructions Cycles
  3532                           ; simple_byte            4     3 (average)
  3533                           ; direct_byte            8     6 (fixed)
  3534                           ; jumptable            260     6 (fixed)
  3535                           ;	Chosen strategy is simple_byte
  3536  01BE  0858               	movf	??_show_character+1,w
  3537  01BF  3A00               	xorlw	0	; case 0
  3538  01C0  1903               	skipnz
  3539  01C1  29C3               	goto	l4042
  3540  01C2  2A96               	goto	l3542
  3541  01C3                     l4042:
  3542                           
  3543                           ; Switch size 1, requested type "simple"
  3544                           ; Number of cases is 3, Range of values is 0 to 2
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte           10     6 (average)
  3548                           ; direct_byte           12     6 (fixed)
  3549                           ; jumptable            260     6 (fixed)
  3550                           ;	Chosen strategy is simple_byte
  3551  01C3  0857               	movf	??_show_character,w
  3552  01C4  3A00               	xorlw	0	; case 0
  3553  01C5  1903               	skipnz
  3554  01C6  29AC               	goto	l284
  3555  01C7  3A01               	xorlw	1	; case 1
  3556  01C8  1903               	skipnz
  3557  01C9  29B1               	goto	l286
  3558  01CA  3A03               	xorlw	3	; case 2
  3559  01CB  1903               	skipnz
  3560  01CC  29B6               	goto	l287
  3561  01CD  2A96               	goto	l3542
  3562  01CE                     l292:	
  3563                           ;main.c: 514:     {;main.c: 515:     case UPPER:
  3564                           
  3565                           
  3566                           ;main.c: 516:       RA6 = 1;
  3567  01CE  170C               	bsf	12,6	;volatile
  3568                           
  3569                           ;main.c: 517:       RC0 = 0;
  3570  01CF  100E               	bcf	14,0	;volatile
  3571                           
  3572                           ;main.c: 518:       RC1 = 0;
  3573  01D0  108E               	bcf	14,1	;volatile
  3574                           
  3575                           ;main.c: 519:       RC2 = 0;
  3576  01D1  110E               	bcf	14,2	;volatile
  3577                           
  3578                           ;main.c: 520:       break;
  3579  01D2  2A96               	goto	l3542
  3580  01D3                     l294:	
  3581                           ;main.c: 522:     case MIDDLE:
  3582                           
  3583                           
  3584                           ;main.c: 523:       RA5 = 1;
  3585  01D3  168C               	bsf	12,5	;volatile
  3586                           
  3587                           ;main.c: 524:       RE0 = 0;
  3588  01D4  1010               	bcf	16,0	;volatile
  3589                           
  3590                           ;main.c: 525:       RE1 = 0;
  3591  01D5  1090               	bcf	16,1	;volatile
  3592                           
  3593                           ;main.c: 526:       RE2 = 0;
  3594  01D6  1110               	bcf	16,2	;volatile
  3595                           
  3596                           ;main.c: 527:       break;
  3597  01D7  2A96               	goto	l3542
  3598  01D8                     l295:	
  3599                           ;main.c: 529:     case LOWER:
  3600                           
  3601                           
  3602                           ;main.c: 530:       RA0 = 1;
  3603  01D8  140C               	bsf	12,0	;volatile
  3604                           
  3605                           ;main.c: 531:       RA1 = 0;
  3606  01D9  108C               	bcf	12,1	;volatile
  3607                           
  3608                           ;main.c: 532:       RA2 = 0;
  3609  01DA  110C               	bcf	12,2	;volatile
  3610                           
  3611                           ;main.c: 533:       RA3 = 0;
  3612  01DB  118C               	bcf	12,3	;volatile
  3613                           
  3614                           ;main.c: 534:       break;
  3615  01DC  2A96               	goto	l3542
  3616  01DD                     l3528:
  3617  01DD  085A               	movf	show_character@group,w
  3618  01DE  00D7               	movwf	??_show_character
  3619  01DF  01D8               	clrf	??_show_character+1
  3620                           
  3621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3622                           ; Switch size 1, requested type "simple"
  3623                           ; Number of cases is 1, Range of values is 0 to 0
  3624                           ; switch strategies available:
  3625                           ; Name         Instructions Cycles
  3626                           ; simple_byte            4     3 (average)
  3627                           ; direct_byte            8     6 (fixed)
  3628                           ; jumptable            260     6 (fixed)
  3629                           ;	Chosen strategy is simple_byte
  3630  01E0  0858               	movf	??_show_character+1,w
  3631  01E1  3A00               	xorlw	0	; case 0
  3632  01E2  1903               	skipnz
  3633  01E3  29E5               	goto	l4044
  3634  01E4  2A96               	goto	l3542
  3635  01E5                     l4044:
  3636                           
  3637                           ; Switch size 1, requested type "simple"
  3638                           ; Number of cases is 3, Range of values is 0 to 2
  3639                           ; switch strategies available:
  3640                           ; Name         Instructions Cycles
  3641                           ; simple_byte           10     6 (average)
  3642                           ; direct_byte           12     6 (fixed)
  3643                           ; jumptable            260     6 (fixed)
  3644                           ;	Chosen strategy is simple_byte
  3645  01E5  0857               	movf	??_show_character,w
  3646  01E6  3A00               	xorlw	0	; case 0
  3647  01E7  1903               	skipnz
  3648  01E8  29CE               	goto	l292
  3649  01E9  3A01               	xorlw	1	; case 1
  3650  01EA  1903               	skipnz
  3651  01EB  29D3               	goto	l294
  3652  01EC  3A03               	xorlw	3	; case 2
  3653  01ED  1903               	skipnz
  3654  01EE  29D8               	goto	l295
  3655  01EF  2A96               	goto	l3542
  3656  01F0                     l299:	
  3657                           ;main.c: 543:   case 'F':
  3658                           
  3659                           
  3660                           ;main.c: 544:     switch (group)
  3661  01F0  2A00               	goto	l3532
  3662  01F1                     l301:	
  3663                           ;main.c: 545:     {;main.c: 546:     case UPPER:
  3664                           
  3665                           
  3666                           ;main.c: 547:       RA6 = 1;
  3667  01F1  170C               	bsf	12,6	;volatile
  3668                           
  3669                           ;main.c: 548:       RC0 = 0;
  3670  01F2  100E               	bcf	14,0	;volatile
  3671                           
  3672                           ;main.c: 549:       RC1 = 0;
  3673  01F3  108E               	bcf	14,1	;volatile
  3674                           
  3675                           ;main.c: 550:       RC2 = 1;
  3676  01F4  150E               	bsf	14,2	;volatile
  3677                           
  3678                           ;main.c: 551:       break;
  3679  01F5  2A96               	goto	l3542
  3680  01F6                     l303:	
  3681                           ;main.c: 553:     case MIDDLE:
  3682                           
  3683                           
  3684                           ;main.c: 554:       RA5 = 1;
  3685  01F6  168C               	bsf	12,5	;volatile
  3686                           
  3687                           ;main.c: 555:       RE0 = 0;
  3688  01F7  1010               	bcf	16,0	;volatile
  3689                           
  3690                           ;main.c: 556:       RE1 = 0;
  3691  01F8  1090               	bcf	16,1	;volatile
  3692                           
  3693                           ;main.c: 557:       RE2 = 1;
  3694  01F9  1510               	bsf	16,2	;volatile
  3695                           
  3696                           ;main.c: 558:       break;
  3697  01FA  2A96               	goto	l3542
  3698  01FB                     l304:	
  3699                           ;main.c: 560:     case LOWER:
  3700                           
  3701                           
  3702                           ;main.c: 561:       RA0 = 1;
  3703  01FB  140C               	bsf	12,0	;volatile
  3704                           
  3705                           ;main.c: 562:       RA1 = 0;
  3706  01FC  108C               	bcf	12,1	;volatile
  3707                           
  3708                           ;main.c: 563:       RA2 = 0;
  3709  01FD  110C               	bcf	12,2	;volatile
  3710                           
  3711                           ;main.c: 564:       RA3 = 1;
  3712  01FE  158C               	bsf	12,3	;volatile
  3713                           
  3714                           ;main.c: 565:       break;
  3715  01FF  2A96               	goto	l3542
  3716  0200                     l3532:
  3717  0200  085A               	movf	show_character@group,w
  3718  0201  00D7               	movwf	??_show_character
  3719  0202  01D8               	clrf	??_show_character+1
  3720                           
  3721                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3722                           ; Switch size 1, requested type "simple"
  3723                           ; Number of cases is 1, Range of values is 0 to 0
  3724                           ; switch strategies available:
  3725                           ; Name         Instructions Cycles
  3726                           ; simple_byte            4     3 (average)
  3727                           ; direct_byte            8     6 (fixed)
  3728                           ; jumptable            260     6 (fixed)
  3729                           ;	Chosen strategy is simple_byte
  3730  0203  0858               	movf	??_show_character+1,w
  3731  0204  3A00               	xorlw	0	; case 0
  3732  0205  1903               	skipnz
  3733  0206  2A08               	goto	l4046
  3734  0207  2A96               	goto	l3542
  3735  0208                     l4046:
  3736                           
  3737                           ; Switch size 1, requested type "simple"
  3738                           ; Number of cases is 3, Range of values is 0 to 2
  3739                           ; switch strategies available:
  3740                           ; Name         Instructions Cycles
  3741                           ; simple_byte           10     6 (average)
  3742                           ; direct_byte           12     6 (fixed)
  3743                           ; jumptable            260     6 (fixed)
  3744                           ;	Chosen strategy is simple_byte
  3745  0208  0857               	movf	??_show_character,w
  3746  0209  3A00               	xorlw	0	; case 0
  3747  020A  1903               	skipnz
  3748  020B  29F1               	goto	l301
  3749  020C  3A01               	xorlw	1	; case 1
  3750  020D  1903               	skipnz
  3751  020E  29F6               	goto	l303
  3752  020F  3A03               	xorlw	3	; case 2
  3753  0210  1903               	skipnz
  3754  0211  29FB               	goto	l304
  3755  0212  2A96               	goto	l3542
  3756  0213                     l309:	
  3757                           ;main.c: 575:     {;main.c: 576:     case UPPER:
  3758                           
  3759                           
  3760                           ;main.c: 577:       RA6 = 1;
  3761  0213  170C               	bsf	12,6	;volatile
  3762                           
  3763                           ;main.c: 578:       RC0 = 1;
  3764  0214  140E               	bsf	14,0	;volatile
  3765                           
  3766                           ;main.c: 579:       RC1 = 1;
  3767  0215  148E               	bsf	14,1	;volatile
  3768                           
  3769                           ;main.c: 580:       RC2 = 1;
  3770  0216  150E               	bsf	14,2	;volatile
  3771                           
  3772                           ;main.c: 581:       break;
  3773  0217  2A96               	goto	l3542
  3774  0218                     l311:	
  3775                           ;main.c: 583:     case MIDDLE:
  3776                           
  3777                           
  3778                           ;main.c: 584:       RA5 = 1;
  3779  0218  168C               	bsf	12,5	;volatile
  3780                           
  3781                           ;main.c: 585:       RE0 = 1;
  3782  0219  1410               	bsf	16,0	;volatile
  3783                           
  3784                           ;main.c: 586:       RE1 = 1;
  3785  021A  1490               	bsf	16,1	;volatile
  3786                           
  3787                           ;main.c: 587:       RE2 = 1;
  3788  021B  1510               	bsf	16,2	;volatile
  3789                           
  3790                           ;main.c: 588:       break;
  3791  021C  2A96               	goto	l3542
  3792  021D                     l312:	
  3793                           ;main.c: 590:     case LOWER:
  3794                           
  3795                           
  3796                           ;main.c: 591:       RA0 = 1;
  3797  021D  140C               	bsf	12,0	;volatile
  3798                           
  3799                           ;main.c: 592:       RA1 = 1;
  3800  021E  148C               	bsf	12,1	;volatile
  3801                           
  3802                           ;main.c: 593:       RA2 = 1;
  3803  021F  150C               	bsf	12,2	;volatile
  3804                           
  3805                           ;main.c: 594:       RA3 = 1;
  3806  0220  158C               	bsf	12,3	;volatile
  3807                           
  3808                           ;main.c: 595:       break;
  3809  0221  2A96               	goto	l3542
  3810  0222                     l3536:
  3811  0222  085A               	movf	show_character@group,w
  3812  0223  00D7               	movwf	??_show_character
  3813  0224  01D8               	clrf	??_show_character+1
  3814                           
  3815                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3816                           ; Switch size 1, requested type "simple"
  3817                           ; Number of cases is 1, Range of values is 0 to 0
  3818                           ; switch strategies available:
  3819                           ; Name         Instructions Cycles
  3820                           ; simple_byte            4     3 (average)
  3821                           ; direct_byte            8     6 (fixed)
  3822                           ; jumptable            260     6 (fixed)
  3823                           ;	Chosen strategy is simple_byte
  3824  0225  0858               	movf	??_show_character+1,w
  3825  0226  3A00               	xorlw	0	; case 0
  3826  0227  1903               	skipnz
  3827  0228  2A2A               	goto	l4048
  3828  0229  2A96               	goto	l3542
  3829  022A                     l4048:
  3830                           
  3831                           ; Switch size 1, requested type "simple"
  3832                           ; Number of cases is 3, Range of values is 0 to 2
  3833                           ; switch strategies available:
  3834                           ; Name         Instructions Cycles
  3835                           ; simple_byte           10     6 (average)
  3836                           ; direct_byte           12     6 (fixed)
  3837                           ; jumptable            260     6 (fixed)
  3838                           ;	Chosen strategy is simple_byte
  3839  022A  0857               	movf	??_show_character,w
  3840  022B  3A00               	xorlw	0	; case 0
  3841  022C  1903               	skipnz
  3842  022D  2A13               	goto	l309
  3843  022E  3A01               	xorlw	1	; case 1
  3844  022F  1903               	skipnz
  3845  0230  2A18               	goto	l311
  3846  0231  3A03               	xorlw	3	; case 2
  3847  0232  1903               	skipnz
  3848  0233  2A1D               	goto	l312
  3849  0234  2A96               	goto	l3542
  3850  0235                     l3540:
  3851  0235  0855               	movf	show_character@character,w
  3852  0236  00D7               	movwf	??_show_character
  3853  0237  01D8               	clrf	??_show_character+1
  3854                           
  3855                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3856                           ; Switch size 1, requested type "simple"
  3857                           ; Number of cases is 1, Range of values is 0 to 0
  3858                           ; switch strategies available:
  3859                           ; Name         Instructions Cycles
  3860                           ; simple_byte            4     3 (average)
  3861                           ; direct_byte            8     6 (fixed)
  3862                           ; jumptable            260     6 (fixed)
  3863                           ;	Chosen strategy is simple_byte
  3864  0238  0858               	movf	??_show_character+1,w
  3865  0239  3A00               	xorlw	0	; case 0
  3866  023A  1903               	skipnz
  3867  023B  2A3D               	goto	l4050
  3868  023C  2A22               	goto	l3536
  3869  023D                     l4050:
  3870                           
  3871                           ; Switch size 1, requested type "simple"
  3872                           ; Number of cases is 29, Range of values is 32 to 117
  3873                           ; switch strategies available:
  3874                           ; Name         Instructions Cycles
  3875                           ; simple_byte           88    45 (average)
  3876                           ; direct_byte          181     9 (fixed)
  3877                           ; jumptable            263     9 (fixed)
  3878                           ;	Chosen strategy is simple_byte
  3879  023D  0857               	movf	??_show_character,w
  3880  023E  3A20               	xorlw	32	; case 32
  3881  023F  1903               	skipnz
  3882  0240  2A22               	goto	l3536
  3883  0241  3A05               	xorlw	5	; case 37
  3884  0242  1903               	skipnz
  3885  0243  290D               	goto	l3504
  3886  0244  3A0E               	xorlw	14	; case 43
  3887  0245  1903               	skipnz
  3888  0246  29BB               	goto	l3524
  3889  0247  3A06               	xorlw	6	; case 45
  3890  0248  1903               	skipnz
  3891  0249  29DD               	goto	l3528
  3892  024A  3A1D               	xorlw	29	; case 48
  3893  024B  1903               	skipnz
  3894  024C  28B7               	goto	l219
  3895  024D  3A01               	xorlw	1	; case 49
  3896  024E  1903               	skipnz
  3897  024F  28DA               	goto	l229
  3898  0250  3A03               	xorlw	3	; case 50
  3899  0251  1903               	skipnz
  3900  0252  28FD               	goto	l238
  3901  0253  3A01               	xorlw	1	; case 51
  3902  0254  1903               	skipnz
  3903  0255  292F               	goto	l3508
  3904  0256  3A07               	xorlw	7	; case 52
  3905  0257  1903               	skipnz
  3906  0258  2942               	goto	l255
  3907  0259  3A01               	xorlw	1	; case 53
  3908  025A  1903               	skipnz
  3909  025B  2965               	goto	l264
  3910  025C  3A03               	xorlw	3	; case 54
  3911  025D  1903               	skipnz
  3912  025E  2988               	goto	l273
  3913  025F  3A01               	xorlw	1	; case 55
  3914  0260  1903               	skipnz
  3915  0261  29AB               	goto	l282
  3916  0262  3A0F               	xorlw	15	; case 56
  3917  0263  1903               	skipnz
  3918  0264  29DD               	goto	l3528
  3919  0265  3A01               	xorlw	1	; case 57
  3920  0266  1903               	skipnz
  3921  0267  29F0               	goto	l299
  3922  0268  3A78               	xorlw	120	; case 65
  3923  0269  1903               	skipnz
  3924  026A  28EA               	goto	l3500
  3925  026B  3A07               	xorlw	7	; case 70
  3926  026C  1903               	skipnz
  3927  026D  2A00               	goto	l3532
  3928  026E  3A0E               	xorlw	14	; case 72
  3929  026F  1903               	skipnz
  3930  0270  2998               	goto	l3520
  3931  0271  3A05               	xorlw	5	; case 77
  3932  0272  1903               	skipnz
  3933  0273  2975               	goto	l3516
  3934  0274  3A02               	xorlw	2	; case 79
  3935  0275  1903               	skipnz
  3936  0276  290D               	goto	l3504
  3937  0277  3A1F               	xorlw	31	; case 80
  3938  0278  1903               	skipnz
  3939  0279  2A00               	goto	l3532
  3940  027A  3A03               	xorlw	3	; case 83
  3941  027B  1903               	skipnz
  3942  027C  2952               	goto	l3512
  3943  027D  3A05               	xorlw	5	; case 86
  3944  027E  1903               	skipnz
  3945  027F  2975               	goto	l3516
  3946  0280  3A01               	xorlw	1	; case 87
  3947  0281  1903               	skipnz
  3948  0282  28C7               	goto	l3496
  3949  0283  3A3F               	xorlw	63	; case 104
  3950  0284  1903               	skipnz
  3951  0285  29BB               	goto	l3524
  3952  0286  3A03               	xorlw	3	; case 107
  3953  0287  1903               	skipnz
  3954  0288  2952               	goto	l3512
  3955  0289  3A06               	xorlw	6	; case 109
  3956  028A  1903               	skipnz
  3957  028B  2998               	goto	l3520
  3958  028C  3A03               	xorlw	3	; case 110
  3959  028D  1903               	skipnz
  3960  028E  28EA               	goto	l3500
  3961  028F  3A1E               	xorlw	30	; case 112
  3962  0290  1903               	skipnz
  3963  0291  292F               	goto	l3508
  3964  0292  3A05               	xorlw	5	; case 117
  3965  0293  1903               	skipnz
  3966  0294  28C7               	goto	l3496
  3967  0295  2A22               	goto	l3536
  3968  0296                     l3542:
  3969                           
  3970                           ;main.c: 604:   on_digit(digit);
  3971  0296  0856               	movf	show_character@digit,w
  3972  0297  3184  2468  3180   	fcall	_on_digit
  3973  029A                     l314:
  3974  029A  0008               	return
  3975  029B                     __end_of_show_character:
  3976                           
  3977                           	psect	text3
  3978  0468                     __ptext3:	
  3979 ;; *************** function _on_digit *****************
  3980 ;; Defined at:
  3981 ;;		line 611 in file "main.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  digit           1    wreg     char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  digit           1    5[COMMON] char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;Total ram usage:        3 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    5
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_show_character
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _on_digit
  4011  0468                     _on_digit:
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _on_digit: [wreg-fsr0h+status,2+status,0]
  4015                           ;on_digit@digit stored from wreg
  4016  0468  00F5               	movwf	on_digit@digit
  4017  0469                     l3462:
  4018                           
  4019                           ;main.c: 611: void on_digit(signed char digit);main.c: 612: {;main.c: 613:   switch (dig
      +                          it)
  4020  0469  2C88               	goto	l3466
  4021  046A                     l318:	
  4022                           ;main.c: 614:   {;main.c: 615:   case 0:
  4023                           
  4024                           
  4025                           ;main.c: 616:     RD4 = 1;
  4026  046A  0020               	movlb	0	; select bank0
  4027  046B  160F               	bsf	15,4	;volatile
  4028                           
  4029                           ;main.c: 617:     break;
  4030  046C  2CB2               	goto	l330
  4031  046D                     l320:	
  4032                           ;main.c: 618:   case 1:
  4033                           
  4034                           
  4035                           ;main.c: 619:     RD5 = 1;
  4036  046D  0020               	movlb	0	; select bank0
  4037  046E  168F               	bsf	15,5	;volatile
  4038                           
  4039                           ;main.c: 620:     break;
  4040  046F  2CB2               	goto	l330
  4041  0470                     l321:	
  4042                           ;main.c: 621:   case 2:
  4043                           
  4044                           
  4045                           ;main.c: 622:     RD6 = 1;
  4046  0470  0020               	movlb	0	; select bank0
  4047  0471  170F               	bsf	15,6	;volatile
  4048                           
  4049                           ;main.c: 623:     break;
  4050  0472  2CB2               	goto	l330
  4051  0473                     l322:	
  4052                           ;main.c: 624:   case 3:
  4053                           
  4054                           
  4055                           ;main.c: 625:     RD7 = 1;
  4056  0473  0020               	movlb	0	; select bank0
  4057  0474  178F               	bsf	15,7	;volatile
  4058                           
  4059                           ;main.c: 626:     break;
  4060  0475  2CB2               	goto	l330
  4061  0476                     l323:	
  4062                           ;main.c: 627:   case 4:
  4063                           
  4064                           
  4065                           ;main.c: 628:     RB0 = 1;
  4066  0476  0020               	movlb	0	; select bank0
  4067  0477  140D               	bsf	13,0	;volatile
  4068                           
  4069                           ;main.c: 629:     break;
  4070  0478  2CB2               	goto	l330
  4071  0479                     l324:	
  4072                           ;main.c: 630:   case 5:
  4073                           
  4074                           
  4075                           ;main.c: 631:     RB1 = 1;
  4076  0479  0020               	movlb	0	; select bank0
  4077  047A  148D               	bsf	13,1	;volatile
  4078                           
  4079                           ;main.c: 632:     break;
  4080  047B  2CB2               	goto	l330
  4081  047C                     l325:	
  4082                           ;main.c: 633:   case 6:
  4083                           
  4084                           
  4085                           ;main.c: 634:     RB2 = 1;
  4086  047C  0020               	movlb	0	; select bank0
  4087  047D  150D               	bsf	13,2	;volatile
  4088                           
  4089                           ;main.c: 635:     break;
  4090  047E  2CB2               	goto	l330
  4091  047F                     l326:	
  4092                           ;main.c: 636:   case 7:
  4093                           
  4094                           
  4095                           ;main.c: 637:     RB3 = 1;
  4096  047F  0020               	movlb	0	; select bank0
  4097  0480  158D               	bsf	13,3	;volatile
  4098                           
  4099                           ;main.c: 638:     break;
  4100  0481  2CB2               	goto	l330
  4101  0482                     l327:	
  4102                           ;main.c: 639:   case 8:
  4103                           
  4104                           
  4105                           ;main.c: 640:     RB4 = 1;
  4106  0482  0020               	movlb	0	; select bank0
  4107  0483  160D               	bsf	13,4	;volatile
  4108                           
  4109                           ;main.c: 641:     break;
  4110  0484  2CB2               	goto	l330
  4111  0485                     l328:	
  4112                           ;main.c: 642:   case 9:
  4113                           
  4114                           
  4115                           ;main.c: 643:     RB5 = 1;
  4116  0485  0020               	movlb	0	; select bank0
  4117  0486  168D               	bsf	13,5	;volatile
  4118                           
  4119                           ;main.c: 644:     break;
  4120  0487  2CB2               	goto	l330
  4121  0488                     l3466:
  4122  0488  0875               	movf	on_digit@digit,w
  4123  0489  00F3               	movwf	??_on_digit
  4124  048A  01F4               	clrf	??_on_digit+1
  4125  048B  1BF3               	btfsc	??_on_digit,7
  4126  048C  03F4               	decf	??_on_digit+1,f
  4127                           
  4128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4129                           ; Switch size 1, requested type "simple"
  4130                           ; Number of cases is 1, Range of values is 0 to 0
  4131                           ; switch strategies available:
  4132                           ; Name         Instructions Cycles
  4133                           ; simple_byte            4     3 (average)
  4134                           ; direct_byte            8     6 (fixed)
  4135                           ; jumptable            260     6 (fixed)
  4136                           ;	Chosen strategy is simple_byte
  4137  048D  0874               	movf	??_on_digit+1,w
  4138  048E  3A00               	xorlw	0	; case 0
  4139  048F  1903               	skipnz
  4140  0490  2C92               	goto	l4052
  4141  0491  2CB2               	goto	l330
  4142  0492                     l4052:
  4143                           
  4144                           ; Switch size 1, requested type "simple"
  4145                           ; Number of cases is 10, Range of values is 0 to 9
  4146                           ; switch strategies available:
  4147                           ; Name         Instructions Cycles
  4148                           ; direct_byte           26     6 (fixed)
  4149                           ; simple_byte           31    16 (average)
  4150                           ; jumptable            260     6 (fixed)
  4151                           ;	Chosen strategy is simple_byte
  4152  0492  0873               	movf	??_on_digit,w
  4153  0493  3A00               	xorlw	0	; case 0
  4154  0494  1903               	skipnz
  4155  0495  2C6A               	goto	l318
  4156  0496  3A01               	xorlw	1	; case 1
  4157  0497  1903               	skipnz
  4158  0498  2C6D               	goto	l320
  4159  0499  3A03               	xorlw	3	; case 2
  4160  049A  1903               	skipnz
  4161  049B  2C70               	goto	l321
  4162  049C  3A01               	xorlw	1	; case 3
  4163  049D  1903               	skipnz
  4164  049E  2C73               	goto	l322
  4165  049F  3A07               	xorlw	7	; case 4
  4166  04A0  1903               	skipnz
  4167  04A1  2C76               	goto	l323
  4168  04A2  3A01               	xorlw	1	; case 5
  4169  04A3  1903               	skipnz
  4170  04A4  2C79               	goto	l324
  4171  04A5  3A03               	xorlw	3	; case 6
  4172  04A6  1903               	skipnz
  4173  04A7  2C7C               	goto	l325
  4174  04A8  3A01               	xorlw	1	; case 7
  4175  04A9  1903               	skipnz
  4176  04AA  2C7F               	goto	l326
  4177  04AB  3A0F               	xorlw	15	; case 8
  4178  04AC  1903               	skipnz
  4179  04AD  2C82               	goto	l327
  4180  04AE  3A01               	xorlw	1	; case 9
  4181  04AF  1903               	skipnz
  4182  04B0  2C85               	goto	l328
  4183  04B1  2CB2               	goto	l330
  4184  04B2                     l330:
  4185  04B2  0008               	return
  4186  04B3                     __end_of_on_digit:
  4187                           
  4188                           	psect	text4
  4189  04B3                     __ptext4:	
  4190 ;; *************** function _off_digit *****************
  4191 ;; Defined at:
  4192 ;;		line 654 in file "main.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  digit           1    wreg     char 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  digit           1    5[COMMON] char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  1    wreg      void 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;Total ram usage:        3 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    5
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_show
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           
  4221                           ;psect for function _off_digit
  4222  04B3                     _off_digit:
  4223                           
  4224                           ;incstack = 0
  4225                           ; Regs used in _off_digit: [wreg-fsr0h+status,2+status,0]
  4226                           ;off_digit@digit stored from wreg
  4227  04B3  00F5               	movwf	off_digit@digit
  4228  04B4                     l3600:
  4229                           
  4230                           ;main.c: 654: void off_digit(signed char digit);main.c: 655: {;main.c: 656:   switch (di
      +                          git)
  4231  04B4  2CD3               	goto	l3604
  4232  04B5                     l334:	
  4233                           ;main.c: 657:   {;main.c: 658:   case 0:
  4234                           
  4235                           
  4236                           ;main.c: 659:     RD4 = 0;
  4237  04B5  0020               	movlb	0	; select bank0
  4238  04B6  120F               	bcf	15,4	;volatile
  4239                           
  4240                           ;main.c: 660:     break;
  4241  04B7  2CFD               	goto	l346
  4242  04B8                     l336:	
  4243                           ;main.c: 661:   case 1:
  4244                           
  4245                           
  4246                           ;main.c: 662:     RD5 = 0;
  4247  04B8  0020               	movlb	0	; select bank0
  4248  04B9  128F               	bcf	15,5	;volatile
  4249                           
  4250                           ;main.c: 663:     break;
  4251  04BA  2CFD               	goto	l346
  4252  04BB                     l337:	
  4253                           ;main.c: 664:   case 2:
  4254                           
  4255                           
  4256                           ;main.c: 665:     RD6 = 0;
  4257  04BB  0020               	movlb	0	; select bank0
  4258  04BC  130F               	bcf	15,6	;volatile
  4259                           
  4260                           ;main.c: 666:     break;
  4261  04BD  2CFD               	goto	l346
  4262  04BE                     l338:	
  4263                           ;main.c: 667:   case 3:
  4264                           
  4265                           
  4266                           ;main.c: 668:     RD7 = 0;
  4267  04BE  0020               	movlb	0	; select bank0
  4268  04BF  138F               	bcf	15,7	;volatile
  4269                           
  4270                           ;main.c: 669:     break;
  4271  04C0  2CFD               	goto	l346
  4272  04C1                     l339:	
  4273                           ;main.c: 670:   case 4:
  4274                           
  4275                           
  4276                           ;main.c: 671:     RB0 = 0;
  4277  04C1  0020               	movlb	0	; select bank0
  4278  04C2  100D               	bcf	13,0	;volatile
  4279                           
  4280                           ;main.c: 672:     break;
  4281  04C3  2CFD               	goto	l346
  4282  04C4                     l340:	
  4283                           ;main.c: 673:   case 5:
  4284                           
  4285                           
  4286                           ;main.c: 674:     RB1 = 0;
  4287  04C4  0020               	movlb	0	; select bank0
  4288  04C5  108D               	bcf	13,1	;volatile
  4289                           
  4290                           ;main.c: 675:     break;
  4291  04C6  2CFD               	goto	l346
  4292  04C7                     l341:	
  4293                           ;main.c: 676:   case 6:
  4294                           
  4295                           
  4296                           ;main.c: 677:     RB2 = 0;
  4297  04C7  0020               	movlb	0	; select bank0
  4298  04C8  110D               	bcf	13,2	;volatile
  4299                           
  4300                           ;main.c: 678:     break;
  4301  04C9  2CFD               	goto	l346
  4302  04CA                     l342:	
  4303                           ;main.c: 679:   case 7:
  4304                           
  4305                           
  4306                           ;main.c: 680:     RB3 = 0;
  4307  04CA  0020               	movlb	0	; select bank0
  4308  04CB  118D               	bcf	13,3	;volatile
  4309                           
  4310                           ;main.c: 681:     break;
  4311  04CC  2CFD               	goto	l346
  4312  04CD                     l343:	
  4313                           ;main.c: 682:   case 8:
  4314                           
  4315                           
  4316                           ;main.c: 683:     RB4 = 0;
  4317  04CD  0020               	movlb	0	; select bank0
  4318  04CE  120D               	bcf	13,4	;volatile
  4319                           
  4320                           ;main.c: 684:     break;
  4321  04CF  2CFD               	goto	l346
  4322  04D0                     l344:	
  4323                           ;main.c: 685:   case 9:
  4324                           
  4325                           
  4326                           ;main.c: 686:     RB5 = 0;
  4327  04D0  0020               	movlb	0	; select bank0
  4328  04D1  128D               	bcf	13,5	;volatile
  4329                           
  4330                           ;main.c: 687:     break;
  4331  04D2  2CFD               	goto	l346
  4332  04D3                     l3604:
  4333  04D3  0875               	movf	off_digit@digit,w
  4334  04D4  00F3               	movwf	??_off_digit
  4335  04D5  01F4               	clrf	??_off_digit+1
  4336  04D6  1BF3               	btfsc	??_off_digit,7
  4337  04D7  03F4               	decf	??_off_digit+1,f
  4338                           
  4339                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4340                           ; Switch size 1, requested type "simple"
  4341                           ; Number of cases is 1, Range of values is 0 to 0
  4342                           ; switch strategies available:
  4343                           ; Name         Instructions Cycles
  4344                           ; simple_byte            4     3 (average)
  4345                           ; direct_byte            8     6 (fixed)
  4346                           ; jumptable            260     6 (fixed)
  4347                           ;	Chosen strategy is simple_byte
  4348  04D8  0874               	movf	??_off_digit+1,w
  4349  04D9  3A00               	xorlw	0	; case 0
  4350  04DA  1903               	skipnz
  4351  04DB  2CDD               	goto	l4054
  4352  04DC  2CFD               	goto	l346
  4353  04DD                     l4054:
  4354                           
  4355                           ; Switch size 1, requested type "simple"
  4356                           ; Number of cases is 10, Range of values is 0 to 9
  4357                           ; switch strategies available:
  4358                           ; Name         Instructions Cycles
  4359                           ; direct_byte           26     6 (fixed)
  4360                           ; simple_byte           31    16 (average)
  4361                           ; jumptable            260     6 (fixed)
  4362                           ;	Chosen strategy is simple_byte
  4363  04DD  0873               	movf	??_off_digit,w
  4364  04DE  3A00               	xorlw	0	; case 0
  4365  04DF  1903               	skipnz
  4366  04E0  2CB5               	goto	l334
  4367  04E1  3A01               	xorlw	1	; case 1
  4368  04E2  1903               	skipnz
  4369  04E3  2CB8               	goto	l336
  4370  04E4  3A03               	xorlw	3	; case 2
  4371  04E5  1903               	skipnz
  4372  04E6  2CBB               	goto	l337
  4373  04E7  3A01               	xorlw	1	; case 3
  4374  04E8  1903               	skipnz
  4375  04E9  2CBE               	goto	l338
  4376  04EA  3A07               	xorlw	7	; case 4
  4377  04EB  1903               	skipnz
  4378  04EC  2CC1               	goto	l339
  4379  04ED  3A01               	xorlw	1	; case 5
  4380  04EE  1903               	skipnz
  4381  04EF  2CC4               	goto	l340
  4382  04F0  3A03               	xorlw	3	; case 6
  4383  04F1  1903               	skipnz
  4384  04F2  2CC7               	goto	l341
  4385  04F3  3A01               	xorlw	1	; case 7
  4386  04F4  1903               	skipnz
  4387  04F5  2CCA               	goto	l342
  4388  04F6  3A0F               	xorlw	15	; case 8
  4389  04F7  1903               	skipnz
  4390  04F8  2CCD               	goto	l343
  4391  04F9  3A01               	xorlw	1	; case 9
  4392  04FA  1903               	skipnz
  4393  04FB  2CD0               	goto	l344
  4394  04FC  2CFD               	goto	l346
  4395  04FD                     l346:
  4396  04FD  0008               	return
  4397  04FE                     __end_of_off_digit:
  4398                           
  4399                           	psect	text5
  4400  06EB                     __ptext5:	
  4401 ;; *************** function _receive_char_from_I2C *****************
  4402 ;; Defined at:
  4403 ;;		line 700 in file "main.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;		None
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  1    wreg      void 
  4410 ;; Registers used:
  4411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;Total ram usage:        0 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    7
  4424 ;; This function calls:
  4425 ;;		_I2C_Read
  4426 ;;		_decode_received_char
  4427 ;; This function is called by:
  4428 ;;		_main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _receive_char_from_I2C
  4434  06EB                     _receive_char_from_I2C:
  4435  06EB                     l2774:	
  4436                           ;incstack = 0
  4437                           ; Regs used in _receive_char_from_I2C: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4438                           
  4439                           
  4440                           ;main.c: 702:   decode_received_char(I2C_Read());
  4441  06EB  3187  2770  3186   	fcall	_I2C_Read
  4442  06EE  3185  25AF  3186   	fcall	_decode_received_char
  4443  06F1                     l352:
  4444  06F1  0008               	return
  4445  06F2                     __end_of_receive_char_from_I2C:
  4446                           
  4447                           	psect	text6
  4448  0770                     __ptext6:	
  4449 ;; *************** function _I2C_Read *****************
  4450 ;; Defined at:
  4451 ;;		line 135 in file "mcc_generated_files/i2c_slave.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      unsigned char 
  4458 ;; Registers used:
  4459 ;;		wreg, pclath, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;Total ram usage:        0 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    6
  4472 ;; This function calls:
  4473 ;;		_I2C_SlaveGetRxData
  4474 ;; This function is called by:
  4475 ;;		_receive_char_from_I2C
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _I2C_Read
  4481  0770                     _I2C_Read:
  4482  0770                     l2692:	
  4483                           ;incstack = 0
  4484                           ; Regs used in _I2C_Read: [wreg+pclath+cstack]
  4485                           
  4486                           
  4487                           ;mcc_generated_files/i2c_slave.c: 137:     return I2C_SlaveGetRxData();
  4488  0770  3187  2784  3187   	fcall	_I2C_SlaveGetRxData
  4489  0773                     l662:
  4490  0773  0008               	return
  4491  0774                     __end_of_I2C_Read:
  4492                           
  4493                           	psect	text7
  4494  0784                     __ptext7:	
  4495 ;; *************** function _I2C_SlaveGetRxData *****************
  4496 ;; Defined at:
  4497 ;;		line 412 in file "mcc_generated_files/i2c_slave.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      unsigned char 
  4504 ;; Registers used:
  4505 ;;		wreg
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    5
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_I2C_Read
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           
  4526                           ;psect for function _I2C_SlaveGetRxData
  4527  0784                     _I2C_SlaveGetRxData:
  4528  0784                     l2414:	
  4529                           ;incstack = 0
  4530                           ; Regs used in _I2C_SlaveGetRxData: [wreg]
  4531                           
  4532                           
  4533                           ;mcc_generated_files/i2c_slave.c: 414:     return SSPBUF;
  4534  0784  0024               	movlb	4	; select bank4
  4535  0785  0811               	movf	17,w	;volatile
  4536  0786                     l798:
  4537  0786  0008               	return
  4538  0787                     __end_of_I2C_SlaveGetRxData:
  4539                           
  4540                           	psect	text8
  4541  06F2                     __ptext8:	
  4542 ;; *************** function _receive_char_from_EUSART *****************
  4543 ;; Defined at:
  4544 ;;		line 694 in file "main.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    6
  4565 ;; This function calls:
  4566 ;;		_EUSART_Read
  4567 ;;		_decode_received_char
  4568 ;; This function is called by:
  4569 ;;		_main
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           
  4574                           ;psect for function _receive_char_from_EUSART
  4575  06F2                     _receive_char_from_EUSART:
  4576  06F2                     l2772:	
  4577                           ;incstack = 0
  4578                           ; Regs used in _receive_char_from_EUSART: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4579                           
  4580                           
  4581                           ;main.c: 696:   decode_received_char(EUSART_Read());
  4582  06F2  3185  25E1  3186   	fcall	_EUSART_Read
  4583  06F5  3185  25AF  3186   	fcall	_decode_received_char
  4584  06F8                     l349:
  4585  06F8  0008               	return
  4586  06F9                     __end_of_receive_char_from_EUSART:
  4587                           
  4588                           	psect	text9
  4589  05AF                     __ptext9:	
  4590 ;; *************** function _decode_received_char *****************
  4591 ;; Defined at:
  4592 ;;		line 706 in file "main.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  received_cha    1    wreg     unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  received_cha    1    4[COMMON] unsigned char 
  4597 ;;  i               1    5[COMMON] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;Total ram usage:        3 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    5
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_receive_char_from_EUSART
  4618 ;;		_receive_char_from_I2C
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _decode_received_char
  4624  05AF                     _decode_received_char:
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _decode_received_char: [wreg+fsr1l+fsr1h+status,2+status,0]
  4628                           ;decode_received_char@received_char stored from wreg
  4629  05AF  00F4               	movwf	decode_received_char@received_char
  4630  05B0                     l2672:
  4631                           
  4632                           ;main.c: 706: void decode_received_char(char received_char);main.c: 707: {;main.c: 708: 
      +                            if ((received_char == '$') || (receive_index > 10 * 2))
  4633  05B0  3024               	movlw	36
  4634  05B1  0674               	xorwf	decode_received_char@received_char,w
  4635  05B2  1903               	btfsc	3,2
  4636  05B3  2DB5               	goto	u511
  4637  05B4  2DB6               	goto	u510
  4638  05B5                     u511:
  4639  05B5  2DBE               	goto	l2676
  4640  05B6                     u510:
  4641  05B6                     l2674:
  4642  05B6  0020               	movlb	0	; select bank0
  4643  05B7  084B               	movf	_receive_index,w
  4644  05B8  3A80               	xorlw	128
  4645  05B9  3E6B               	addlw	-149
  4646  05BA  1C03               	skipc
  4647  05BB  2DBD               	goto	u521
  4648  05BC  2DBE               	goto	u520
  4649  05BD                     u521:
  4650  05BD  2DD4               	goto	l2688
  4651  05BE                     u520:
  4652  05BE                     l2676:
  4653                           
  4654                           ;main.c: 709:   {;main.c: 711:     receive_index = 0;
  4655  05BE  0020               	movlb	0	; select bank0
  4656  05BF  01CB               	clrf	_receive_index
  4657                           
  4658                           ;main.c: 712:     for (unsigned char i = 0; i < 10 * 2; i++)
  4659  05C0  01F5               	clrf	decode_received_char@i
  4660  05C1                     l2682:
  4661                           
  4662                           ;main.c: 713:     {;main.c: 714:       value[i] = ' ';
  4663  05C1  3020               	movlw	32
  4664  05C2  00F3               	movwf	??_decode_received_char
  4665  05C3  0875               	movf	decode_received_char@i,w
  4666  05C4  3EB6               	addlw	(low (_value| 0))& (0+255)
  4667  05C5  0086               	movwf	6
  4668  05C6  0187               	clrf	7
  4669  05C7  0873               	movf	??_decode_received_char,w
  4670  05C8  0081               	movwf	1
  4671  05C9                     l2684:
  4672                           
  4673                           ;main.c: 715:     }
  4674  05C9  3001               	movlw	1
  4675  05CA  00F3               	movwf	??_decode_received_char
  4676  05CB  0873               	movf	??_decode_received_char,w
  4677  05CC  07F5               	addwf	decode_received_char@i,f
  4678  05CD                     l2686:
  4679  05CD  3014               	movlw	20
  4680  05CE  0275               	subwf	decode_received_char@i,w
  4681  05CF  1C03               	skipc
  4682  05D0  2DD2               	goto	u531
  4683  05D1  2DD3               	goto	u530
  4684  05D2                     u531:
  4685  05D2  2DC1               	goto	l2682
  4686  05D3                     u530:
  4687  05D3  2DE0               	goto	l361
  4688  05D4                     l2688:
  4689                           
  4690                           ;main.c: 718:   {;main.c: 719:     value[receive_index] = received_char;
  4691  05D4  0874               	movf	decode_received_char@received_char,w
  4692  05D5  00F3               	movwf	??_decode_received_char
  4693  05D6  084B               	movf	_receive_index,w
  4694  05D7  3EB6               	addlw	(low (_value| 0))& (0+255)
  4695  05D8  0086               	movwf	6
  4696  05D9  0187               	clrf	7
  4697  05DA  0873               	movf	??_decode_received_char,w
  4698  05DB  0081               	movwf	1
  4699  05DC                     l2690:
  4700                           
  4701                           ;main.c: 720:     receive_index++;
  4702  05DC  3001               	movlw	1
  4703  05DD  00F3               	movwf	??_decode_received_char
  4704  05DE  0873               	movf	??_decode_received_char,w
  4705  05DF  07CB               	addwf	_receive_index,f
  4706  05E0                     l361:
  4707  05E0  0008               	return
  4708  05E1                     __end_of_decode_received_char:
  4709                           
  4710                           	psect	text10
  4711  05E1                     __ptext10:	
  4712 ;; *************** function _EUSART_Read *****************
  4713 ;; Defined at:
  4714 ;;		line 151 in file "mcc_generated_files/eusart.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  readValue       1    4[COMMON] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      unsigned char 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;Total ram usage:        2 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    5
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_receive_char_from_EUSART
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _EUSART_Read
  4744  05E1                     _EUSART_Read:
  4745  05E1                     l2650:	
  4746                           ;incstack = 0
  4747                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4748                           
  4749  05E1                     l2652:	
  4750                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount);mcc_generated_files/eu
      +                          sart.c: 155:     while(0 == eusartRxCount)
  4751                           
  4752                           
  4753                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount);mcc_generated_files/eu
      +                          sart.c: 155:     while(0 == eusartRxCount)
  4754  05E1  0020               	movlb	0	; select bank0
  4755  05E2  0849               	movf	_eusartRxCount,w	;volatile
  4756  05E3  1903               	btfsc	3,2
  4757  05E4  2DE6               	goto	u491
  4758  05E5  2DE7               	goto	u490
  4759  05E6                     u491:
  4760  05E6  2DE1               	goto	l2652
  4761  05E7                     u490:
  4762  05E7                     l2654:
  4763                           
  4764                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[
      +                          eusartRxTail];
  4765  05E7  0876               	movf	_eusartRxTail,w	;volatile
  4766  05E8  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4767  05E9  0086               	movwf	6
  4768  05EA  0187               	clrf	7
  4769  05EB  0801               	movf	1,w
  4770  05EC  00F3               	movwf	??_EUSART_Read
  4771  05ED  0873               	movf	??_EUSART_Read,w
  4772  05EE  00C8               	movwf	_eusartRxLastError	;volatile
  4773                           
  4774                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];;mcc_
      +                          generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  4775  05EF  0876               	movf	_eusartRxTail,w
  4776  05F0  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4777  05F1  0086               	movwf	6
  4778  05F2  0187               	clrf	7
  4779  05F3  0801               	movf	1,w
  4780  05F4  00F3               	movwf	??_EUSART_Read
  4781  05F5  0873               	movf	??_EUSART_Read,w
  4782  05F6  00F4               	movwf	EUSART_Read@readValue
  4783  05F7                     l2656:
  4784  05F7  3001               	movlw	1
  4785  05F8  00F3               	movwf	??_EUSART_Read
  4786  05F9  0873               	movf	??_EUSART_Read,w
  4787  05FA  07F6               	addwf	_eusartRxTail,f	;volatile
  4788  05FB                     l2658:
  4789                           
  4790                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail);mcc_g
      +                          enerated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4791  05FB  3008               	movlw	8
  4792  05FC  0276               	subwf	_eusartRxTail,w	;volatile
  4793  05FD  1C03               	skipc
  4794  05FE  2E00               	goto	u501
  4795  05FF  2E01               	goto	u500
  4796  0600                     u501:
  4797  0600  2E02               	goto	l2662
  4798  0601                     u500:
  4799  0601                     l2660:
  4800                           
  4801                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 163:     {;mcc_g
      +                          enerated_files/eusart.c: 164:         eusartRxTail = 0;;mcc_generated_files/eusart.c: 16
      +                          4:         eusartRxTail = 0;
  4802  0601  01F6               	clrf	_eusartRxTail	;volatile
  4803  0602                     l2662:
  4804                           
  4805                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;;mcc_generated_files/eusart.c:
      +                           166:     PIE1bits.RCIE = 0;
  4806  0602  0021               	movlb	1	; select bank1
  4807  0603  1291               	bcf	17,5	;volatile
  4808  0604                     l2664:
  4809                           
  4810                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;;mcc_generated_files/eusart.c: 1
      +                          67:     eusartRxCount--;
  4811  0604  3001               	movlw	1
  4812  0605  0020               	movlb	0	; select bank0
  4813  0606  02C9               	subwf	_eusartRxCount,f	;volatile
  4814  0607                     l2666:
  4815                           
  4816                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;;mcc_generated_files/eusart.c:
      +                           168:     PIE1bits.RCIE = 1;
  4817  0607  0021               	movlb	1	; select bank1
  4818  0608  1691               	bsf	17,5	;volatile
  4819  0609                     l2668:
  4820                           
  4821                           ;mcc_generated_files/eusart.c: 170:     return readValue;;mcc_generated_files/eusart.c: 
      +                          170:     return readValue;
  4822  0609  0874               	movf	EUSART_Read@readValue,w
  4823  060A                     l455:
  4824  060A  0008               	return
  4825  060B                     __end_of_EUSART_Read:
  4826                           
  4827                           	psect	text11
  4828  0685                     __ptext11:	
  4829 ;; *************** function _SYSTEM_Initialize *****************
  4830 ;; Defined at:
  4831 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0, pclath, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    7
  4852 ;; This function calls:
  4853 ;;		_EUSART_Initialize
  4854 ;;		_I2C_Initialize
  4855 ;;		_OSCILLATOR_Initialize
  4856 ;;		_PIN_MANAGER_Initialize
  4857 ;;		_WDT_Initialize
  4858 ;; This function is called by:
  4859 ;;		_main
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           
  4864                           ;psect for function _SYSTEM_Initialize
  4865  0685                     _SYSTEM_Initialize:
  4866  0685                     l2762:	
  4867                           ;incstack = 0
  4868                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4869                           
  4870                           
  4871                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();;mcc_generated_files/mcc.c: 53:    
      +                           I2C_Initialize();
  4872  0685  3186  26C9  3186   	fcall	_I2C_Initialize
  4873                           
  4874                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();;mcc_generated_files/mcc.c:
      +                           54:     PIN_MANAGER_Initialize();
  4875  0688  3186  2650  3186   	fcall	_PIN_MANAGER_Initialize
  4876                           
  4877                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();;mcc_generated_files/mcc.c: 
      +                          55:     OSCILLATOR_Initialize();
  4878  068B  3186  26F9  3186   	fcall	_OSCILLATOR_Initialize
  4879                           
  4880                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();;mcc_generated_files/mcc.c: 56:    
      +                           WDT_Initialize();
  4881  068E  3187  2774  3186   	fcall	_WDT_Initialize
  4882                           
  4883                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();;mcc_generated_files/mcc.c: 57: 
      +                              EUSART_Initialize();
  4884  0691  3184  24FE  3186   	fcall	_EUSART_Initialize
  4885  0694                     l75:
  4886  0694  0008               	return
  4887  0695                     __end_of_SYSTEM_Initialize:
  4888                           
  4889                           	psect	text12
  4890  0774                     __ptext12:	
  4891 ;; *************** function _WDT_Initialize *****************
  4892 ;; Defined at:
  4893 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    5
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_SYSTEM_Initialize
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _WDT_Initialize
  4923  0774                     _WDT_Initialize:
  4924  0774                     l2450:	
  4925                           ;incstack = 0
  4926                           ; Regs used in _WDT_Initialize: [wreg]
  4927                           
  4928                           
  4929                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;;mcc_generated_files/mcc.c: 73:     WD
      +                          TCON = 0x16;
  4930  0774  3016               	movlw	22
  4931  0775  0021               	movlb	1	; select bank1
  4932  0776  0097               	movwf	23	;volatile
  4933  0777                     l81:
  4934  0777  0008               	return
  4935  0778                     __end_of_WDT_Initialize:
  4936                           
  4937                           	psect	text13
  4938  0650                     __ptext13:	
  4939 ;; *************** function _PIN_MANAGER_Initialize *****************
  4940 ;; Defined at:
  4941 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;Total ram usage:        0 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    5
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_SYSTEM_Initialize
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _PIN_MANAGER_Initialize
  4971  0650                     _PIN_MANAGER_Initialize:
  4972  0650                     l2424:	
  4973                           ;incstack = 0
  4974                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4975                           
  4976                           
  4977                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 60:     LATE = 0x00;
  4978  0650  0022               	movlb	2	; select bank2
  4979  0651  0190               	clrf	16	;volatile
  4980                           
  4981                           ;mcc_generated_files/pin_manager.c: 61:     LATD = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 61:     LATD = 0x00;
  4982  0652  018F               	clrf	15	;volatile
  4983                           
  4984                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 62:     LATA = 0x00;
  4985  0653  018C               	clrf	12	;volatile
  4986                           
  4987                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 63:     LATB = 0x00;
  4988  0654  018D               	clrf	13	;volatile
  4989                           
  4990                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 64:     LATC = 0x00;
  4991  0655  018E               	clrf	14	;volatile
  4992  0656                     l2426:
  4993                           
  4994                           ;mcc_generated_files/pin_manager.c: 69:     TRISE = 0x08;;mcc_generated_files/pin_manage
      +                          r.c: 69:     TRISE = 0x08;
  4995  0656  3008               	movlw	8
  4996  0657  0021               	movlb	1	; select bank1
  4997  0658  0090               	movwf	16	;volatile
  4998  0659                     l2428:
  4999                           
  5000                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x00;;mcc_generated_files/pin_manage
      +                          r.c: 70:     TRISA = 0x00;
  5001  0659  018C               	clrf	12	;volatile
  5002  065A                     l2430:
  5003                           
  5004                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x00;;mcc_generated_files/pin_manage
      +                          r.c: 71:     TRISB = 0x00;
  5005  065A  018D               	clrf	13	;volatile
  5006  065B                     l2432:
  5007                           
  5008                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0x98;;mcc_generated_files/pin_manage
      +                          r.c: 72:     TRISC = 0x98;
  5009  065B  3098               	movlw	152
  5010  065C  008E               	movwf	14	;volatile
  5011                           
  5012                           ;mcc_generated_files/pin_manager.c: 73:     TRISD = 0x00;;mcc_generated_files/pin_manage
      +                          r.c: 73:     TRISD = 0x00;
  5013  065D  018F               	clrf	15	;volatile
  5014                           
  5015                           ;mcc_generated_files/pin_manager.c: 78:     ANSELD = 0x00;;mcc_generated_files/pin_manag
      +                          er.c: 78:     ANSELD = 0x00;
  5016  065E  0023               	movlb	3	; select bank3
  5017  065F  018F               	clrf	15	;volatile
  5018                           
  5019                           ;mcc_generated_files/pin_manager.c: 79:     ANSELB = 0x00;;mcc_generated_files/pin_manag
      +                          er.c: 79:     ANSELB = 0x00;
  5020  0660  018D               	clrf	13	;volatile
  5021                           
  5022                           ;mcc_generated_files/pin_manager.c: 80:     ANSELE = 0x00;;mcc_generated_files/pin_manag
      +                          er.c: 80:     ANSELE = 0x00;
  5023  0661  0190               	clrf	16	;volatile
  5024                           
  5025                           ;mcc_generated_files/pin_manager.c: 81:     ANSELA = 0x00;;mcc_generated_files/pin_manag
      +                          er.c: 81:     ANSELA = 0x00;
  5026  0662  018C               	clrf	12	;volatile
  5027                           
  5028                           ;mcc_generated_files/pin_manager.c: 86:     WPUE = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 86:     WPUE = 0x00;
  5029  0663  0024               	movlb	4	; select bank4
  5030  0664  0190               	clrf	16	;volatile
  5031                           
  5032                           ;mcc_generated_files/pin_manager.c: 87:     WPUB = 0x00;;mcc_generated_files/pin_manager
      +                          .c: 87:     WPUB = 0x00;
  5033  0665  018D               	clrf	13	;volatile
  5034  0666                     l2434:
  5035                           
  5036                           ;mcc_generated_files/pin_manager.c: 88:     OPTION_REGbits.nWPUEN = 1;;mcc_generated_fil
      +                          es/pin_manager.c: 88:     OPTION_REGbits.nWPUEN = 1;
  5037  0666  0021               	movlb	1	; select bank1
  5038  0667  1795               	bsf	21,7	;volatile
  5039                           
  5040                           ;mcc_generated_files/pin_manager.c: 94:     APFCON = 0x00;;mcc_generated_files/pin_manag
      +                          er.c: 94:     APFCON = 0x00;
  5041  0668  0022               	movlb	2	; select bank2
  5042  0669  019D               	clrf	29	;volatile
  5043  066A                     l39:
  5044  066A  0008               	return
  5045  066B                     __end_of_PIN_MANAGER_Initialize:
  5046                           
  5047                           	psect	text14
  5048  06F9                     __ptext14:	
  5049 ;; *************** function _OSCILLATOR_Initialize *****************
  5050 ;; Defined at:
  5051 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    5
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_SYSTEM_Initialize
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _OSCILLATOR_Initialize
  5081  06F9                     _OSCILLATOR_Initialize:
  5082  06F9                     l2444:	
  5083                           ;incstack = 0
  5084                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5085                           
  5086                           
  5087                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x72;;mcc_generated_files/mcc.c: 63:     OS
      +                          CCON = 0x72;
  5088  06F9  3072               	movlw	114
  5089  06FA  0021               	movlb	1	; select bank1
  5090  06FB  0099               	movwf	25	;volatile
  5091  06FC                     l2446:
  5092                           
  5093                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;;mcc_generated_files/mcc.c: 65:     O
      +                          SCTUNE = 0x00;
  5094  06FC  0198               	clrf	24	;volatile
  5095  06FD                     l2448:
  5096                           
  5097                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;;mcc_generated_files/mcc.c: 67:     BO
      +                          RCON = 0x00;
  5098  06FD  0022               	movlb	2	; select bank2
  5099  06FE  0196               	clrf	22	;volatile
  5100  06FF                     l78:
  5101  06FF  0008               	return
  5102  0700                     __end_of_OSCILLATOR_Initialize:
  5103                           
  5104                           	psect	text15
  5105  06C9                     __ptext15:	
  5106 ;; *************** function _I2C_Initialize *****************
  5107 ;; Defined at:
  5108 ;;		line 108 in file "mcc_generated_files/i2c_slave.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;		None
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;		None
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        1 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    5
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_SYSTEM_Initialize
  5133 ;;		_I2C_Enable
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function _I2C_Initialize
  5139  06C9                     _I2C_Initialize:
  5140  06C9                     l2436:	
  5141                           ;incstack = 0
  5142                           ; Regs used in _I2C_Initialize: [wreg+status,2+status,0]
  5143                           
  5144                           
  5145                           ;mcc_generated_files/i2c_slave.c: 110:     SSPSTAT = 0x00;
  5146  06C9  0024               	movlb	4	; select bank4
  5147  06CA  0194               	clrf	20	;volatile
  5148  06CB                     l2438:
  5149                           
  5150                           ;mcc_generated_files/i2c_slave.c: 111:     SSPCON1 |= 0x06;
  5151  06CB  3006               	movlw	6
  5152  06CC  00F3               	movwf	??_I2C_Initialize
  5153  06CD  0873               	movf	??_I2C_Initialize,w
  5154  06CE  0495               	iorwf	21,f	;volatile
  5155  06CF                     l2440:
  5156                           
  5157                           ;mcc_generated_files/i2c_slave.c: 112:     SSPCON2 = 0x00;
  5158  06CF  0196               	clrf	22	;volatile
  5159  06D0                     l2442:
  5160                           
  5161                           ;mcc_generated_files/i2c_slave.c: 113:     SSPCON1bits.SSPEN = 0;
  5162  06D0  1295               	bcf	21,5	;volatile
  5163  06D1                     l653:
  5164  06D1  0008               	return
  5165  06D2                     __end_of_I2C_Initialize:
  5166                           
  5167                           	psect	text16
  5168  04FE                     __ptext16:	
  5169 ;; *************** function _EUSART_Initialize *****************
  5170 ;; Defined at:
  5171 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0, pclath, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;Total ram usage:        1 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    6
  5192 ;; This function calls:
  5193 ;;		_EUSART_SetErrorHandler
  5194 ;;		_EUSART_SetFramingErrorHandler
  5195 ;;		_EUSART_SetOverrunErrorHandler
  5196 ;;		_EUSART_SetRxInterruptHandler
  5197 ;;		_EUSART_SetTxInterruptHandler
  5198 ;; This function is called by:
  5199 ;;		_SYSTEM_Initialize
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _EUSART_Initialize
  5205  04FE                     _EUSART_Initialize:
  5206  04FE                     l2452:	
  5207                           ;incstack = 0
  5208                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5209                           
  5210                           
  5211                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;;mcc_generated_files/eusart.c: 
      +                          91:     PIE1bits.RCIE = 0;
  5212  04FE  0021               	movlb	1	; select bank1
  5213  04FF  1291               	bcf	17,5	;volatile
  5214  0500                     l2454:
  5215                           
  5216                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
      +                          ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5217  0500  3076               	movlw	low _EUSART_Receive_ISR
  5218  0501  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5219  0502  3005               	movlw	high _EUSART_Receive_ISR
  5220  0503  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5221  0504  3187  271A  3184   	fcall	_EUSART_SetRxInterruptHandler
  5222  0507                     l2456:
  5223                           
  5224                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;;mcc_generated_files/eusart.c: 
      +                          93:     PIE1bits.TXIE = 0;
  5225  0507  0021               	movlb	1	; select bank1
  5226  0508  1211               	bcf	17,4	;volatile
  5227                           
  5228                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR
      +                          );
  5229  0509  302E               	movlw	low _EUSART_Transmit_ISR
  5230  050A  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  5231  050B  3006               	movlw	high _EUSART_Transmit_ISR
  5232  050C  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  5233  050D  3187  2714  3184   	fcall	_EUSART_SetTxInterruptHandler
  5234  0510                     l2458:
  5235                           
  5236                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;;mcc_generated_files/eusart.c: 98:
      +                               BAUDCON = 0x08;
  5237  0510  3008               	movlw	8
  5238  0511  0023               	movlb	3	; select bank3
  5239  0512  009F               	movwf	31	;volatile
  5240  0513                     l2460:
  5241                           
  5242                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;;mcc_generated_files/eusart.c: 101:
      +                               RCSTA = 0x90;
  5243  0513  3090               	movlw	144
  5244  0514  009D               	movwf	29	;volatile
  5245  0515                     l2462:
  5246                           
  5247                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;;mcc_generated_files/eusart.c: 104:
      +                               TXSTA = 0x24;
  5248  0515  3024               	movlw	36
  5249  0516  009E               	movwf	30	;volatile
  5250  0517                     l2464:
  5251                           
  5252                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xCF;;mcc_generated_files/eusart.c: 107
      +                          :     SPBRGL = 0xCF;
  5253  0517  30CF               	movlw	207
  5254  0518  009B               	movwf	27	;volatile
  5255  0519                     l2466:
  5256                           
  5257                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;;mcc_generated_files/eusart.c: 110
      +                          :     SPBRGH = 0x00;
  5258  0519  019C               	clrf	28	;volatile
  5259  051A                     l2468:
  5260                           
  5261                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(E
      +                          USART_DefaultFramingErrorHandler);
  5262  051A  3093               	movlw	low _EUSART_DefaultFramingErrorHandler
  5263  051B  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5264  051C  3007               	movlw	high _EUSART_DefaultFramingErrorHandler
  5265  051D  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5266  051E  3187  2726  3184   	fcall	_EUSART_SetFramingErrorHandler
  5267  0521                     l2470:
  5268                           
  5269                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(E
      +                          USART_DefaultOverrunErrorHandler);
  5270  0521  307C               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5271  0522  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5272  0523  3007               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5273  0524  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5274  0525  3187  2720  3184   	fcall	_EUSART_SetOverrunErrorHandler
  5275  0528                     l2472:
  5276                           
  5277                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHan
      +                          dler);
  5278  0528  3080               	movlw	low _EUSART_DefaultErrorHandler
  5279  0529  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler
  5280  052A  3007               	movlw	high _EUSART_DefaultErrorHandler
  5281  052B  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5282  052C  3187  272C  3184   	fcall	_EUSART_SetErrorHandler
  5283                           
  5284                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;;mcc_generated_file
      +                          s/eusart.c: 117:     eusartRxLastError.status = 0;
  5285  052F  0020               	movlb	0	; select bank0
  5286  0530  01C8               	clrf	_eusartRxLastError	;volatile
  5287                           
  5288                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;;mcc_generated_files/eusart.c: 
      +                          120:     eusartTxHead = 0;
  5289  0531  01F9               	clrf	_eusartTxHead	;volatile
  5290                           
  5291                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;;mcc_generated_files/eusart.c: 
      +                          121:     eusartTxTail = 0;
  5292  0532  01F8               	clrf	_eusartTxTail	;volatile
  5293  0533                     l2474:
  5294                           
  5295                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer
      +                          );
  5296  0533  3008               	movlw	8
  5297  0534  00F5               	movwf	??_EUSART_Initialize
  5298  0535  0875               	movf	??_EUSART_Initialize,w
  5299  0536  00D4               	movwf	_eusartTxBufferRemaining	;volatile
  5300  0537                     l2476:
  5301                           
  5302                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;;mcc_generated_files/eusart.c: 
      +                          124:     eusartRxHead = 0;
  5303  0537  01F7               	clrf	_eusartRxHead	;volatile
  5304  0538                     l2478:
  5305                           
  5306                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;;mcc_generated_files/eusart.c: 
      +                          125:     eusartRxTail = 0;
  5307  0538  01F6               	clrf	_eusartRxTail	;volatile
  5308  0539                     l2480:
  5309                           
  5310                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;;mcc_generated_files/eusart.c:
      +                           126:     eusartRxCount = 0;
  5311  0539  01C9               	clrf	_eusartRxCount	;volatile
  5312  053A                     l2482:
  5313                           
  5314                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;;mcc_generated_files/eusart.c:
      +                           129:     PIE1bits.RCIE = 1;
  5315  053A  0021               	movlb	1	; select bank1
  5316  053B  1691               	bsf	17,5	;volatile
  5317  053C                     l436:
  5318  053C  0008               	return
  5319  053D                     __end_of_EUSART_Initialize:
  5320                           
  5321                           	psect	text17
  5322  0714                     __ptext17:	
  5323 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5324 ;; Defined at:
  5325 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  5328 ;;		 -> EUSART_Transmit_ISR(1), 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;Total ram usage:        2 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    5
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_EUSART_Initialize
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _EUSART_SetTxInterruptHandler
  5356  0714                     _EUSART_SetTxInterruptHandler:
  5357  0714                     l2396:	
  5358                           ;incstack = 0
  5359                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5360                           
  5361                           
  5362                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interrupt
      +                          Handler;
  5363  0714  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  5364  0715  0020               	movlb	0	; select bank0
  5365  0716  00D3               	movwf	_EUSART_TxDefaultInterruptHandler+1
  5366  0717  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  5367  0718  00D2               	movwf	_EUSART_TxDefaultInterruptHandler
  5368  0719                     l502:
  5369  0719  0008               	return
  5370  071A                     __end_of_EUSART_SetTxInterruptHandler:
  5371                           
  5372                           	psect	text18
  5373  071A                     __ptext18:	
  5374 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5375 ;; Defined at:
  5376 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  5379 ;;		 -> EUSART_Receive_ISR(1), 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;Total ram usage:        2 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    5
  5398 ;; This function calls:
  5399 ;;		Nothing
  5400 ;; This function is called by:
  5401 ;;		_EUSART_Initialize
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _EUSART_SetRxInterruptHandler
  5407  071A                     _EUSART_SetRxInterruptHandler:
  5408  071A                     l2394:	
  5409                           ;incstack = 0
  5410                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5411                           
  5412                           
  5413                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interrupt
      +                          Handler;
  5414  071A  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5415  071B  0020               	movlb	0	; select bank0
  5416  071C  00D1               	movwf	_EUSART_RxDefaultInterruptHandler+1
  5417  071D  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5418  071E  00D0               	movwf	_EUSART_RxDefaultInterruptHandler
  5419  071F                     l505:
  5420  071F  0008               	return
  5421  0720                     __end_of_EUSART_SetRxInterruptHandler:
  5422                           
  5423                           	psect	text19
  5424  0720                     __ptext19:	
  5425 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5426 ;; Defined at:
  5427 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  5430 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;Total ram usage:        2 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    5
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_EUSART_Initialize
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           
  5457                           ;psect for function _EUSART_SetOverrunErrorHandler
  5458  0720                     _EUSART_SetOverrunErrorHandler:
  5459  0720                     l2400:	
  5460                           ;incstack = 0
  5461                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5462                           
  5463                           
  5464                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;;m
      +                          cc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5465  0720  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5466  0721  0020               	movlb	0	; select bank0
  5467  0722  00CD               	movwf	_EUSART_OverrunErrorHandler+1
  5468  0723  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5469  0724  00CC               	movwf	_EUSART_OverrunErrorHandler
  5470  0725                     l496:
  5471  0725  0008               	return
  5472  0726                     __end_of_EUSART_SetOverrunErrorHandler:
  5473                           
  5474                           	psect	text20
  5475  0726                     __ptext20:	
  5476 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5477 ;; Defined at:
  5478 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  5481 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    5
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_EUSART_Initialize
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _EUSART_SetFramingErrorHandler
  5509  0726                     _EUSART_SetFramingErrorHandler:
  5510  0726                     l2398:	
  5511                           ;incstack = 0
  5512                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5513                           
  5514                           
  5515                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;;m
      +                          cc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5516  0726  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5517  0727  0020               	movlb	0	; select bank0
  5518  0728  00CF               	movwf	_EUSART_FramingErrorHandler+1
  5519  0729  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5520  072A  00CE               	movwf	_EUSART_FramingErrorHandler
  5521  072B                     l493:
  5522  072B  0008               	return
  5523  072C                     __end_of_EUSART_SetFramingErrorHandler:
  5524                           
  5525                           	psect	text21
  5526  072C                     __ptext21:	
  5527 ;; *************** function _EUSART_SetErrorHandler *****************
  5528 ;; Defined at:
  5529 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  interruptHan    2    3[COMMON] PTR FTN()void 
  5532 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5544 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;Total ram usage:        2 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    5
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_EUSART_Initialize
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           
  5559                           ;psect for function _EUSART_SetErrorHandler
  5560  072C                     _EUSART_SetErrorHandler:
  5561  072C                     l2402:	
  5562                           ;incstack = 0
  5563                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5564                           
  5565                           
  5566                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;;mcc_gene
      +                          rated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5567  072C  0874               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5568  072D  0021               	movlb	1	; select bank1
  5569  072E  00CC               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5570  072F  0873               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5571  0730  00CB               	movwf	_EUSART_ErrorHandler^(0+128)
  5572  0731                     l499:
  5573  0731  0008               	return
  5574  0732                     __end_of_EUSART_SetErrorHandler:
  5575                           
  5576                           	psect	text22
  5577  053D                     __ptext22:	
  5578 ;; *************** function _I2C_Open *****************
  5579 ;; Defined at:
  5580 ;;		line 116 in file "mcc_generated_files/i2c_slave.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;		None
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        0 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    6
  5601 ;; This function calls:
  5602 ;;		_I2C_SlaveEnableIrq
  5603 ;;		_I2C_SlaveOpen
  5604 ;;		_I2C_SlaveSetAddrIntHandler
  5605 ;;		_I2C_SlaveSetBusColIntHandler
  5606 ;;		_I2C_SlaveSetIsrHandler
  5607 ;;		_I2C_SlaveSetReadIntHandler
  5608 ;;		_I2C_SlaveSetSlaveAddr
  5609 ;;		_I2C_SlaveSetSlaveMask
  5610 ;;		_I2C_SlaveSetWrColIntHandler
  5611 ;;		_I2C_SlaveSetWriteIntHandler
  5612 ;; This function is called by:
  5613 ;;		_main
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _I2C_Open
  5619  053D                     _I2C_Open:
  5620  053D                     l2764:	
  5621                           ;incstack = 0
  5622                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
  5623                           
  5624                           
  5625                           ;mcc_generated_files/i2c_slave.c: 118:     I2C_SlaveOpen();
  5626  053D  3186  2695  3185   	fcall	_I2C_SlaveOpen
  5627                           
  5628                           ;mcc_generated_files/i2c_slave.c: 119:     I2C_SlaveSetSlaveAddr(24);
  5629  0540  3018               	movlw	24
  5630  0541  3187  2761  3185   	fcall	_I2C_SlaveSetSlaveAddr
  5631                           
  5632                           ;mcc_generated_files/i2c_slave.c: 120:     I2C_SlaveSetSlaveMask(127);
  5633  0544  307F               	movlw	127
  5634  0545  3187  275C  3185   	fcall	_I2C_SlaveSetSlaveMask
  5635                           
  5636                           ;mcc_generated_files/i2c_slave.c: 121:     I2C_SlaveSetIsrHandler(I2C_Isr);
  5637  0548  30F3               	movlw	low _I2C_Isr
  5638  0549  00F3               	movwf	I2C_SlaveSetIsrHandler@handler
  5639  054A  3003               	movlw	high _I2C_Isr
  5640  054B  00F4               	movwf	I2C_SlaveSetIsrHandler@handler+1
  5641  054C  3187  2744  3185   	fcall	_I2C_SlaveSetIsrHandler
  5642                           
  5643                           ;mcc_generated_files/i2c_slave.c: 122:     I2C_SlaveSetBusColIntHandler(I2C_SlaveDefBusC
      +                          olInterruptHandler);
  5644  054F  3000               	movlw	0
  5645  0550  00F3               	movwf	I2C_SlaveSetBusColIntHandler@handler
  5646  0551  3000               	movlw	0
  5647  0552  00F4               	movwf	I2C_SlaveSetBusColIntHandler@handler+1
  5648  0553  3187  274A  3185   	fcall	_I2C_SlaveSetBusColIntHandler
  5649                           
  5650                           ;mcc_generated_files/i2c_slave.c: 123:     I2C_SlaveSetWriteIntHandler(I2C_SlaveDefWrInt
      +                          erruptHandler);
  5651  0556  3056               	movlw	low _I2C_SlaveDefWrInterruptHandler
  5652  0557  00F3               	movwf	I2C_SlaveSetWriteIntHandler@handler
  5653  0558  3007               	movlw	high _I2C_SlaveDefWrInterruptHandler
  5654  0559  00F4               	movwf	I2C_SlaveSetWriteIntHandler@handler+1
  5655  055A  3187  2732  3185   	fcall	_I2C_SlaveSetWriteIntHandler
  5656                           
  5657                           ;mcc_generated_files/i2c_slave.c: 124:     I2C_SlaveSetReadIntHandler(I2C_SlaveDefRdInte
      +                          rruptHandler);
  5658  055D  30DB               	movlw	low _I2C_SlaveDefRdInterruptHandler
  5659  055E  00F3               	movwf	I2C_SlaveSetReadIntHandler@handler
  5660  055F  3006               	movlw	high _I2C_SlaveDefRdInterruptHandler
  5661  0560  00F4               	movwf	I2C_SlaveSetReadIntHandler@handler+1
  5662  0561  3187  273E  3185   	fcall	_I2C_SlaveSetReadIntHandler
  5663                           
  5664                           ;mcc_generated_files/i2c_slave.c: 125:     I2C_SlaveSetAddrIntHandler(I2C_SlaveDefAddrIn
      +                          terruptHandler);
  5665  0564  30E3               	movlw	low _I2C_SlaveDefAddrInterruptHandler
  5666  0565  00F3               	movwf	I2C_SlaveSetAddrIntHandler@handler
  5667  0566  3006               	movlw	high _I2C_SlaveDefAddrInterruptHandler
  5668  0567  00F4               	movwf	I2C_SlaveSetAddrIntHandler@handler+1
  5669  0568  3187  2750  3185   	fcall	_I2C_SlaveSetAddrIntHandler
  5670                           
  5671                           ;mcc_generated_files/i2c_slave.c: 126:     I2C_SlaveSetWrColIntHandler(I2C_SlaveDefWrCol
      +                          InterruptHandler);
  5672  056B  3000               	movlw	0
  5673  056C  00F3               	movwf	I2C_SlaveSetWrColIntHandler@handler
  5674  056D  3000               	movlw	0
  5675  056E  00F4               	movwf	I2C_SlaveSetWrColIntHandler@handler+1
  5676  056F  3187  2738  3185   	fcall	_I2C_SlaveSetWrColIntHandler
  5677  0572                     l2766:
  5678                           
  5679                           ;mcc_generated_files/i2c_slave.c: 127:     I2C_SlaveEnableIrq();
  5680  0572  3187  2787  3185   	fcall	_I2C_SlaveEnableIrq
  5681  0575                     l656:
  5682  0575  0008               	return
  5683  0576                     __end_of_I2C_Open:
  5684                           
  5685                           	psect	text23
  5686  0732                     __ptext23:	
  5687 ;; *************** function _I2C_SlaveSetWriteIntHandler *****************
  5688 ;; Defined at:
  5689 ;;		line 249 in file "mcc_generated_files/i2c_slave.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  handler         2    3[COMMON] PTR FTN()void 
  5692 ;;		 -> I2C_SlaveDefWrInterruptHandler(1), 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        2 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    5
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_I2C_Open
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _I2C_SlaveSetWriteIntHandler
  5720  0732                     _I2C_SlaveSetWriteIntHandler:
  5721  0732                     l2720:	
  5722                           ;incstack = 0
  5723                           ; Regs used in _I2C_SlaveSetWriteIntHandler: [wreg]
  5724                           
  5725                           
  5726                           ;mcc_generated_files/i2c_slave.c: 249: void I2C_SlaveSetWriteIntHandler(i2cInterruptHand
      +                          ler handler);mcc_generated_files/i2c_slave.c: 250: {;mcc_generated_files/i2c_slave.c: 25
      +                          1:     I2C_SlaveWrInterruptHandler = handler;
  5727  0732  0874               	movf	I2C_SlaveSetWriteIntHandler@handler+1,w
  5728  0733  0020               	movlb	0	; select bank0
  5729  0734  00BF               	movwf	_I2C_SlaveWrInterruptHandler+1
  5730  0735  0873               	movf	I2C_SlaveSetWriteIntHandler@handler,w
  5731  0736  00BE               	movwf	_I2C_SlaveWrInterruptHandler
  5732  0737                     l712:
  5733  0737  0008               	return
  5734  0738                     __end_of_I2C_SlaveSetWriteIntHandler:
  5735                           
  5736                           	psect	text24
  5737  0738                     __ptext24:	
  5738 ;; *************** function _I2C_SlaveSetWrColIntHandler *****************
  5739 ;; Defined at:
  5740 ;;		line 289 in file "mcc_generated_files/i2c_slave.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  handler         2    3[COMMON] PTR FTN()void 
  5743 ;;		 -> I2C_SlaveDefWrColInterruptHandler(1), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5755 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    5
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_I2C_Open
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _I2C_SlaveSetWrColIntHandler
  5771  0738                     _I2C_SlaveSetWrColIntHandler:
  5772  0738                     l2726:	
  5773                           ;incstack = 0
  5774                           ; Regs used in _I2C_SlaveSetWrColIntHandler: [wreg]
  5775                           
  5776                           
  5777                           ;mcc_generated_files/i2c_slave.c: 289: void I2C_SlaveSetWrColIntHandler(i2cInterruptHand
      +                          ler handler);mcc_generated_files/i2c_slave.c: 290: {;mcc_generated_files/i2c_slave.c: 29
      +                          1:     I2C_SlaveWrColInterruptHandler = handler;
  5778  0738  0874               	movf	I2C_SlaveSetWrColIntHandler@handler+1,w
  5779  0739  0020               	movlb	0	; select bank0
  5780  073A  00B9               	movwf	_I2C_SlaveWrColInterruptHandler+1
  5781  073B  0873               	movf	I2C_SlaveSetWrColIntHandler@handler,w
  5782  073C  00B8               	movwf	_I2C_SlaveWrColInterruptHandler
  5783  073D                     l732:
  5784  073D  0008               	return
  5785  073E                     __end_of_I2C_SlaveSetWrColIntHandler:
  5786                           
  5787                           	psect	text25
  5788  075C                     __ptext25:	
  5789 ;; *************** function _I2C_SlaveSetSlaveMask *****************
  5790 ;; Defined at:
  5791 ;;		line 352 in file "mcc_generated_files/i2c_slave.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  maskAddr        1    wreg     unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  maskAddr        1    3[COMMON] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		wreg, status,2, status,0
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        1 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    5
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_I2C_Open
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _I2C_SlaveSetSlaveMask
  5821  075C                     _I2C_SlaveSetSlaveMask:
  5822                           
  5823                           ;incstack = 0
  5824                           ; Regs used in _I2C_SlaveSetSlaveMask: [wreg+status,2+status,0]
  5825                           ;I2C_SlaveSetSlaveMask@maskAddr stored from wreg
  5826  075C  00F3               	movwf	I2C_SlaveSetSlaveMask@maskAddr
  5827  075D                     l2714:
  5828                           
  5829                           ;mcc_generated_files/i2c_slave.c: 352: static __attribute__((inline)) void I2C_SlaveSetS
      +                          laveMask(uint8_t maskAddr);mcc_generated_files/i2c_slave.c: 353: {;mcc_generated_files/i
      +                          2c_slave.c: 354:     SSPMSK = (uint8_t)(maskAddr << 1);
  5830  075D  3573               	lslf	I2C_SlaveSetSlaveMask@maskAddr,w
  5831  075E  0024               	movlb	4	; select bank4
  5832  075F  0093               	movwf	19	;volatile
  5833  0760                     l762:
  5834  0760  0008               	return
  5835  0761                     __end_of_I2C_SlaveSetSlaveMask:
  5836                           
  5837                           	psect	text26
  5838  0761                     __ptext26:	
  5839 ;; *************** function _I2C_SlaveSetSlaveAddr *****************
  5840 ;; Defined at:
  5841 ;;		line 347 in file "mcc_generated_files/i2c_slave.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  slaveAddr       1    wreg     unsigned char 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  slaveAddr       1    3[COMMON] unsigned char 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;Total ram usage:        1 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    5
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_I2C_Open
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           
  5870                           ;psect for function _I2C_SlaveSetSlaveAddr
  5871  0761                     _I2C_SlaveSetSlaveAddr:
  5872                           
  5873                           ;incstack = 0
  5874                           ; Regs used in _I2C_SlaveSetSlaveAddr: [wreg+status,2+status,0]
  5875                           ;I2C_SlaveSetSlaveAddr@slaveAddr stored from wreg
  5876  0761  00F3               	movwf	I2C_SlaveSetSlaveAddr@slaveAddr
  5877  0762                     l2712:
  5878                           
  5879                           ;mcc_generated_files/i2c_slave.c: 347: static __attribute__((inline)) void I2C_SlaveSetS
      +                          laveAddr(uint8_t slaveAddr);mcc_generated_files/i2c_slave.c: 348: {;mcc_generated_files/
      +                          i2c_slave.c: 349:     SSPADD = (uint8_t)(slaveAddr << 1);
  5880  0762  3573               	lslf	I2C_SlaveSetSlaveAddr@slaveAddr,w
  5881  0763  0024               	movlb	4	; select bank4
  5882  0764  0092               	movwf	18	;volatile
  5883  0765                     l759:
  5884  0765  0008               	return
  5885  0766                     __end_of_I2C_SlaveSetSlaveAddr:
  5886                           
  5887                           	psect	text27
  5888  073E                     __ptext27:	
  5889 ;; *************** function _I2C_SlaveSetReadIntHandler *****************
  5890 ;; Defined at:
  5891 ;;		line 229 in file "mcc_generated_files/i2c_slave.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  handler         2    3[COMMON] PTR FTN()void 
  5894 ;;		 -> I2C_SlaveDefRdInterruptHandler(1), 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;		None
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  1    wreg      void 
  5899 ;; Registers used:
  5900 ;;		wreg
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5906 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;Total ram usage:        2 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    5
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_I2C_Open
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           
  5921                           ;psect for function _I2C_SlaveSetReadIntHandler
  5922  073E                     _I2C_SlaveSetReadIntHandler:
  5923  073E                     l2722:	
  5924                           ;incstack = 0
  5925                           ; Regs used in _I2C_SlaveSetReadIntHandler: [wreg]
  5926                           
  5927                           
  5928                           ;mcc_generated_files/i2c_slave.c: 229: void I2C_SlaveSetReadIntHandler(i2cInterruptHandl
      +                          er handler);mcc_generated_files/i2c_slave.c: 230: {;mcc_generated_files/i2c_slave.c: 231
      +                          :     I2C_SlaveRdInterruptHandler = handler;
  5929  073E  0874               	movf	I2C_SlaveSetReadIntHandler@handler+1,w
  5930  073F  0020               	movlb	0	; select bank0
  5931  0740  00C1               	movwf	_I2C_SlaveRdInterruptHandler+1
  5932  0741  0873               	movf	I2C_SlaveSetReadIntHandler@handler,w
  5933  0742  00C0               	movwf	_I2C_SlaveRdInterruptHandler
  5934  0743                     l702:
  5935  0743  0008               	return
  5936  0744                     __end_of_I2C_SlaveSetReadIntHandler:
  5937                           
  5938                           	psect	text28
  5939  0744                     __ptext28:	
  5940 ;; *************** function _I2C_SlaveSetIsrHandler *****************
  5941 ;; Defined at:
  5942 ;;		line 223 in file "mcc_generated_files/i2c_slave.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  handler         2    3[COMMON] PTR FTN()void 
  5945 ;;		 -> I2C_Isr(1), 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;		None
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5957 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;Total ram usage:        2 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    5
  5964 ;; This function calls:
  5965 ;;		Nothing
  5966 ;; This function is called by:
  5967 ;;		_I2C_Open
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           
  5972                           ;psect for function _I2C_SlaveSetIsrHandler
  5973  0744                     _I2C_SlaveSetIsrHandler:
  5974  0744                     l2716:	
  5975                           ;incstack = 0
  5976                           ; Regs used in _I2C_SlaveSetIsrHandler: [wreg]
  5977                           
  5978                           
  5979                           ;mcc_generated_files/i2c_slave.c: 223: void I2C_SlaveSetIsrHandler(i2cInterruptHandler h
      +                          andler);mcc_generated_files/i2c_slave.c: 224: {;mcc_generated_files/i2c_slave.c: 225:   
      +                            MSSP_InterruptHandler = handler;
  5980  0744  0874               	movf	I2C_SlaveSetIsrHandler@handler+1,w
  5981  0745  0020               	movlb	0	; select bank0
  5982  0746  00C3               	movwf	_MSSP_InterruptHandler+1
  5983  0747  0873               	movf	I2C_SlaveSetIsrHandler@handler,w
  5984  0748  00C2               	movwf	_MSSP_InterruptHandler
  5985  0749                     l699:
  5986  0749  0008               	return
  5987  074A                     __end_of_I2C_SlaveSetIsrHandler:
  5988                           
  5989                           	psect	text29
  5990  074A                     __ptext29:	
  5991 ;; *************** function _I2C_SlaveSetBusColIntHandler *****************
  5992 ;; Defined at:
  5993 ;;		line 308 in file "mcc_generated_files/i2c_slave.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  handler         2    3[COMMON] PTR FTN()void 
  5996 ;;		 -> I2C_SlaveDefBusColInterruptHandler(1), 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;Total ram usage:        2 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    5
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_I2C_Open
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _I2C_SlaveSetBusColIntHandler
  6024  074A                     _I2C_SlaveSetBusColIntHandler:
  6025  074A                     l2718:	
  6026                           ;incstack = 0
  6027                           ; Regs used in _I2C_SlaveSetBusColIntHandler: [wreg]
  6028                           
  6029                           
  6030                           ;mcc_generated_files/i2c_slave.c: 308: void I2C_SlaveSetBusColIntHandler(i2cInterruptHan
      +                          dler handler);mcc_generated_files/i2c_slave.c: 309: {;mcc_generated_files/i2c_slave.c: 3
      +                          10:     I2C_SlaveBusColInterruptHandler = handler;
  6031  074A  0874               	movf	I2C_SlaveSetBusColIntHandler@handler+1,w
  6032  074B  0020               	movlb	0	; select bank0
  6033  074C  00BB               	movwf	_I2C_SlaveBusColInterruptHandler+1
  6034  074D  0873               	movf	I2C_SlaveSetBusColIntHandler@handler,w
  6035  074E  00BA               	movwf	_I2C_SlaveBusColInterruptHandler
  6036  074F                     l742:
  6037  074F  0008               	return
  6038  0750                     __end_of_I2C_SlaveSetBusColIntHandler:
  6039                           
  6040                           	psect	text30
  6041  0750                     __ptext30:	
  6042 ;; *************** function _I2C_SlaveSetAddrIntHandler *****************
  6043 ;; Defined at:
  6044 ;;		line 269 in file "mcc_generated_files/i2c_slave.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  handler         2    3[COMMON] PTR FTN()void 
  6047 ;;		 -> I2C_SlaveDefAddrInterruptHandler(1), 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;Total ram usage:        2 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    5
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_I2C_Open
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           
  6074                           ;psect for function _I2C_SlaveSetAddrIntHandler
  6075  0750                     _I2C_SlaveSetAddrIntHandler:
  6076  0750                     l2724:	
  6077                           ;incstack = 0
  6078                           ; Regs used in _I2C_SlaveSetAddrIntHandler: [wreg]
  6079                           
  6080                           
  6081                           ;mcc_generated_files/i2c_slave.c: 269: void I2C_SlaveSetAddrIntHandler(i2cInterruptHandl
      +                          er handler);mcc_generated_files/i2c_slave.c: 270: {;mcc_generated_files/i2c_slave.c: 271
      +                          :     I2C_SlaveAddrInterruptHandler = handler;
  6082  0750  0874               	movf	I2C_SlaveSetAddrIntHandler@handler+1,w
  6083  0751  0020               	movlb	0	; select bank0
  6084  0752  00BD               	movwf	_I2C_SlaveAddrInterruptHandler+1
  6085  0753  0873               	movf	I2C_SlaveSetAddrIntHandler@handler,w
  6086  0754  00BC               	movwf	_I2C_SlaveAddrInterruptHandler
  6087  0755                     l722:
  6088  0755  0008               	return
  6089  0756                     __end_of_I2C_SlaveSetAddrIntHandler:
  6090                           
  6091                           	psect	text31
  6092  0695                     __ptext31:	
  6093 ;; *************** function _I2C_SlaveOpen *****************
  6094 ;; Defined at:
  6095 ;;		line 326 in file "mcc_generated_files/i2c_slave.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;		None
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      _Bool 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;Total ram usage:        1 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    5
  6116 ;; This function calls:
  6117 ;;		Nothing
  6118 ;; This function is called by:
  6119 ;;		_I2C_Open
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function _I2C_SlaveOpen
  6125  0695                     _I2C_SlaveOpen:
  6126  0695                     l2700:	
  6127                           ;incstack = 0
  6128                           ; Regs used in _I2C_SlaveOpen: [wreg+status,2+status,0]
  6129                           
  6130                           
  6131                           ;mcc_generated_files/i2c_slave.c: 328:     if (!SSPCON1bits.SSPEN)
  6132  0695  0024               	movlb	4	; select bank4
  6133  0696  1A95               	btfsc	21,5	;volatile
  6134  0697  2E99               	goto	u541
  6135  0698  2E9A               	goto	u540
  6136  0699                     u541:
  6137  0699  2EA1               	goto	l753
  6138  069A                     u540:
  6139  069A                     l2702:
  6140                           
  6141                           ;mcc_generated_files/i2c_slave.c: 329:     {;mcc_generated_files/i2c_slave.c: 330:      
      +                             SSPSTAT = 0x00;
  6142  069A  0194               	clrf	20	;volatile
  6143  069B                     l2704:
  6144                           
  6145                           ;mcc_generated_files/i2c_slave.c: 331:         SSPCON1 |= 0x06;
  6146  069B  3006               	movlw	6
  6147  069C  00F3               	movwf	??_I2C_SlaveOpen
  6148  069D  0873               	movf	??_I2C_SlaveOpen,w
  6149  069E  0495               	iorwf	21,f	;volatile
  6150  069F                     l2706:
  6151                           
  6152                           ;mcc_generated_files/i2c_slave.c: 332:         SSPCON2 = 0x00;
  6153  069F  0196               	clrf	22	;volatile
  6154  06A0                     l2708:
  6155                           
  6156                           ;mcc_generated_files/i2c_slave.c: 333:         SSPCON1bits.SSPEN = 1;
  6157  06A0  1695               	bsf	21,5	;volatile
  6158  06A1                     l753:
  6159  06A1  0008               	return
  6160  06A2                     __end_of_I2C_SlaveOpen:
  6161                           
  6162                           	psect	text32
  6163  0787                     __ptext32:	
  6164 ;; *************** function _I2C_SlaveEnableIrq *****************
  6165 ;; Defined at:
  6166 ;;		line 357 in file "mcc_generated_files/i2c_slave.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		None
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    5
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_I2C_Open
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           
  6195                           ;psect for function _I2C_SlaveEnableIrq
  6196  0787                     _I2C_SlaveEnableIrq:
  6197  0787                     l2728:	
  6198                           ;incstack = 0
  6199                           ; Regs used in _I2C_SlaveEnableIrq: []
  6200                           
  6201                           
  6202                           ;mcc_generated_files/i2c_slave.c: 359:     PIE1bits.SSPIE = 1;
  6203  0787  0021               	movlb	1	; select bank1
  6204  0788  1591               	bsf	17,3	;volatile
  6205  0789                     l765:
  6206  0789  0008               	return
  6207  078A                     __end_of_I2C_SlaveEnableIrq:
  6208                           
  6209                           	psect	text33
  6210  06D2                     __ptext33:	
  6211 ;; *************** function _EUSART_is_rx_ready *****************
  6212 ;; Defined at:
  6213 ;;		line 137 in file "mcc_generated_files/eusart.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      _Bool 
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    5
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           
  6242                           ;psect for function _EUSART_is_rx_ready
  6243  06D2                     _EUSART_is_rx_ready:
  6244  06D2                     l2768:	
  6245                           ;incstack = 0
  6246                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  6247                           
  6248                           
  6249                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);;mcc_generated_fi
      +                          les/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  6250  06D2  0020               	movlb	0	; select bank0
  6251  06D3  0849               	movf	_eusartRxCount,w	;volatile
  6252  06D4  1D03               	btfss	3,2
  6253  06D5  2ED7               	goto	u581
  6254  06D6  2ED9               	goto	u580
  6255  06D7                     u581:
  6256  06D7  3001               	movlw	1
  6257  06D8  2EDA               	goto	u590
  6258  06D9                     u580:
  6259  06D9  3000               	movlw	0
  6260  06DA                     u590:
  6261  06DA                     l442:
  6262  06DA  0008               	return
  6263  06DB                     __end_of_EUSART_is_rx_ready:
  6264                           
  6265                           	psect	intentry
  6266  0004                     __pintentry:	
  6267 ;; *************** function _INTERRUPT_InterruptManager *****************
  6268 ;; Defined at:
  6269 ;;		line 54 in file "mcc_generated_files/interrupt_manager.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;Total ram usage:        0 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    4
  6290 ;; This function calls:
  6291 ;;		Absolute function
  6292 ;;		_EUSART_Receive_ISR
  6293 ;;		_EUSART_Transmit_ISR
  6294 ;;		_I2C_Isr
  6295 ;; This function is called by:
  6296 ;;		Interrupt level 1
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300  0004                     _INTERRUPT_InterruptManager:
  6301                           
  6302                           ;incstack = 0
  6303  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6304                           
  6305                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6306  0005  3180               	pagesel	$
  6307  0006                     i1l2942:
  6308                           
  6309                           ;mcc_generated_files/interrupt_manager.c: 57:     if (INTCONbits.PEIE == 1)
  6310  0006  1F0B               	btfss	11,6	;volatile
  6311  0007  2809               	goto	u78_21
  6312  0008  280A               	goto	u78_20
  6313  0009                     u78_21:
  6314  0009  2848               	goto	i1l548
  6315  000A                     u78_20:
  6316  000A                     i1l2944:
  6317                           
  6318                           ;mcc_generated_files/interrupt_manager.c: 58:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 59:         if (PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  6319  000A  0021               	movlb	1	; select bank1
  6320  000B  1E11               	btfss	17,4	;volatile
  6321  000C  280E               	goto	u79_21
  6322  000D  280F               	goto	u79_20
  6323  000E                     u79_21:
  6324  000E  281A               	goto	i1l539
  6325  000F                     u79_20:
  6326  000F                     i1l2946:
  6327  000F  0020               	movlb	0	; select bank0
  6328  0010  1E11               	btfss	17,4	;volatile
  6329  0011  2813               	goto	u80_21
  6330  0012  2814               	goto	u80_20
  6331  0013                     u80_21:
  6332  0013  281A               	goto	i1l539
  6333  0014                     u80_20:
  6334  0014                     i1l2948:
  6335                           
  6336                           ;mcc_generated_files/interrupt_manager.c: 60:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 61:             EUSART_TxDefaultInterruptHandler();
  6337  0014  0853               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  6338  0015  008A               	movwf	10
  6339  0016  0852               	movf	_EUSART_TxDefaultInterruptHandler,w
  6340  0017  000A               	callw
  6341  0018  3180               	pagesel	$
  6342                           
  6343                           ;mcc_generated_files/interrupt_manager.c: 62:         }
  6344  0019  2848               	goto	i1l548
  6345  001A                     i1l539:	
  6346                           ;mcc_generated_files/interrupt_manager.c: 63:         else if (PIE1bits.RCIE == 1 && PIR
      +                          1bits.RCIF == 1)
  6347                           
  6348  001A  0021               	movlb	1	; select bank1
  6349  001B  1E91               	btfss	17,5	;volatile
  6350  001C  281E               	goto	u81_21
  6351  001D  281F               	goto	u81_20
  6352  001E                     u81_21:
  6353  001E  282A               	goto	i1l541
  6354  001F                     u81_20:
  6355  001F                     i1l2950:
  6356  001F  0020               	movlb	0	; select bank0
  6357  0020  1E91               	btfss	17,5	;volatile
  6358  0021  2823               	goto	u82_21
  6359  0022  2824               	goto	u82_20
  6360  0023                     u82_21:
  6361  0023  282A               	goto	i1l541
  6362  0024                     u82_20:
  6363  0024                     i1l2952:
  6364                           
  6365                           ;mcc_generated_files/interrupt_manager.c: 64:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 65:             EUSART_RxDefaultInterruptHandler();
  6366  0024  0851               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  6367  0025  008A               	movwf	10
  6368  0026  0850               	movf	_EUSART_RxDefaultInterruptHandler,w
  6369  0027  000A               	callw
  6370  0028  3180               	pagesel	$
  6371                           
  6372                           ;mcc_generated_files/interrupt_manager.c: 66:         }
  6373  0029  2848               	goto	i1l548
  6374  002A                     i1l541:	
  6375                           ;mcc_generated_files/interrupt_manager.c: 67:         else if (PIE2bits.BCLIE == 1 && PI
      +                          R2bits.BCLIF == 1)
  6376                           
  6377  002A  0021               	movlb	1	; select bank1
  6378  002B  1D92               	btfss	18,3	;volatile
  6379  002C  282E               	goto	u83_21
  6380  002D  282F               	goto	u83_20
  6381  002E                     u83_21:
  6382  002E  283D               	goto	i1l543
  6383  002F                     u83_20:
  6384  002F                     i1l2954:
  6385  002F  0020               	movlb	0	; select bank0
  6386  0030  1D92               	btfss	18,3	;volatile
  6387  0031  2833               	goto	u84_21
  6388  0032  2834               	goto	u84_20
  6389  0033                     u84_21:
  6390  0033  283D               	goto	i1l543
  6391  0034                     u84_20:
  6392  0034                     i1l2956:
  6393                           
  6394                           ;mcc_generated_files/interrupt_manager.c: 68:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 69:             MSSP_InterruptHandler();
  6395  0034  0843               	movf	_MSSP_InterruptHandler+1,w
  6396  0035  008A               	movwf	10
  6397  0036  0842               	movf	_MSSP_InterruptHandler,w
  6398  0037  000A               	callw
  6399  0038  3180               	pagesel	$
  6400  0039                     i1l2958:
  6401                           
  6402                           ;mcc_generated_files/interrupt_manager.c: 70:             is_I2C_interrupt = 1;
  6403  0039  0020               	movlb	0	; select bank0
  6404  003A  01CA               	clrf	_is_I2C_interrupt
  6405  003B  0ACA               	incf	_is_I2C_interrupt,f
  6406                           
  6407                           ;mcc_generated_files/interrupt_manager.c: 71:         }
  6408  003C  2848               	goto	i1l548
  6409  003D                     i1l543:	
  6410                           ;mcc_generated_files/interrupt_manager.c: 72:         else if (PIE1bits.SSPIE == 1 && PI
      +                          R1bits.SSPIF == 1)
  6411                           
  6412  003D  0021               	movlb	1	; select bank1
  6413  003E  1D91               	btfss	17,3	;volatile
  6414  003F  2841               	goto	u85_21
  6415  0040  2842               	goto	u85_20
  6416  0041                     u85_21:
  6417  0041  2848               	goto	i1l542
  6418  0042                     u85_20:
  6419  0042                     i1l2960:
  6420  0042  0020               	movlb	0	; select bank0
  6421  0043  1D91               	btfss	17,3	;volatile
  6422  0044  2846               	goto	u86_21
  6423  0045  2847               	goto	u86_20
  6424  0046                     u86_21:
  6425  0046  2848               	goto	i1l542
  6426  0047                     u86_20:
  6427  0047  2834               	goto	i1l2956
  6428  0048                     i1l542:
  6429  0048                     i1l548:
  6430  0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6431  0049  0009               	retfie
  6432  004A                     __end_of_INTERRUPT_InterruptManager:
  6433                           
  6434                           	psect	text35
  6435  03F3                     __ptext35:	
  6436 ;; *************** function _I2C_Isr *****************
  6437 ;; Defined at:
  6438 ;;		line 165 in file "mcc_generated_files/i2c_slave.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        2 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    3
  6459 ;; This function calls:
  6460 ;;		_I2C_SlaveAddrCallBack
  6461 ;;		_I2C_SlaveClearIrq
  6462 ;;		_I2C_SlaveIsAddr
  6463 ;;		_I2C_SlaveIsRead
  6464 ;;		_I2C_SlaveIsRxBufFull
  6465 ;;		_I2C_SlaveIsTxBufEmpty
  6466 ;;		_I2C_SlaveRdCallBack
  6467 ;;		_I2C_SlaveReleaseClock
  6468 ;;		_I2C_SlaveWrCallBack
  6469 ;; This function is called by:
  6470 ;;		_I2C_Open
  6471 ;;		_INTERRUPT_InterruptManager
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _I2C_Isr
  6477  03F3                     _I2C_Isr:
  6478  03F3                     i1l2866:	
  6479                           ;incstack = 0
  6480                           ; Regs used in _I2C_Isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6481                           
  6482                           
  6483                           ;mcc_generated_files/i2c_slave.c: 167:     I2C_SlaveClearIrq();
  6484  03F3  3187  278D  3183   	fcall	_I2C_SlaveClearIrq
  6485  03F6                     i1l2868:
  6486                           
  6487                           ;mcc_generated_files/i2c_slave.c: 169:     if (I2C_SlaveIsAddr())
  6488  03F6  3187  2707  3183   	fcall	_I2C_SlaveIsAddr
  6489  03F9  3A00               	xorlw	0
  6490  03FA  1903               	skipnz
  6491  03FB  2BFD               	goto	u67_21
  6492  03FC  2BFE               	goto	u67_20
  6493  03FD                     u67_21:
  6494  03FD  2C12               	goto	i1l2876
  6495  03FE                     u67_20:
  6496  03FE                     i1l2870:
  6497                           
  6498                           ;mcc_generated_files/i2c_slave.c: 170:     {;mcc_generated_files/i2c_slave.c: 171:      
      +                             if (I2C_SlaveIsRead())
  6499  03FE  3187  276B  3183   	fcall	_I2C_SlaveIsRead
  6500  0401  3A00               	xorlw	0
  6501  0402  1903               	skipnz
  6502  0403  2C05               	goto	u68_21
  6503  0404  2C06               	goto	u68_20
  6504  0405                     u68_21:
  6505  0405  2C0C               	goto	i1l2874
  6506  0406                     u68_20:
  6507  0406                     i1l2872:
  6508                           
  6509                           ;mcc_generated_files/i2c_slave.c: 172:         {;mcc_generated_files/i2c_slave.c: 173:  
      +                                     i2cSlaveState = I2C_ADDR_TX;
  6510  0406  3001               	movlw	1
  6511  0407  00F1               	movwf	??_I2C_Isr
  6512  0408  0871               	movf	??_I2C_Isr,w
  6513  0409  0020               	movlb	0	; select bank0
  6514  040A  00C4               	movwf	_i2cSlaveState	;volatile
  6515                           
  6516                           ;mcc_generated_files/i2c_slave.c: 174:         }
  6517  040B  2C4E               	goto	i1l2900
  6518  040C                     i1l2874:
  6519                           
  6520                           ;mcc_generated_files/i2c_slave.c: 176:         {;mcc_generated_files/i2c_slave.c: 177:  
      +                                     i2cSlaveState = I2C_ADDR_RX;
  6521  040C  3002               	movlw	2
  6522  040D  00F1               	movwf	??_I2C_Isr
  6523  040E  0871               	movf	??_I2C_Isr,w
  6524  040F  0020               	movlb	0	; select bank0
  6525  0410  00C4               	movwf	_i2cSlaveState	;volatile
  6526  0411  2C4E               	goto	i1l2900
  6527  0412                     i1l2876:
  6528                           
  6529                           ;mcc_generated_files/i2c_slave.c: 181:     {;mcc_generated_files/i2c_slave.c: 182:      
      +                             if (I2C_SlaveIsRead())
  6530  0412  3187  276B  3183   	fcall	_I2C_SlaveIsRead
  6531  0415  3A00               	xorlw	0
  6532  0416  1903               	skipnz
  6533  0417  2C19               	goto	u69_21
  6534  0418  2C1A               	goto	u69_20
  6535  0419                     u69_21:
  6536  0419  2C20               	goto	i1l2880
  6537  041A                     u69_20:
  6538  041A                     i1l2878:
  6539                           
  6540                           ;mcc_generated_files/i2c_slave.c: 183:         {;mcc_generated_files/i2c_slave.c: 184:  
      +                                     i2cSlaveState = I2C_DATA_TX;
  6541  041A  3003               	movlw	3
  6542  041B  00F1               	movwf	??_I2C_Isr
  6543  041C  0871               	movf	??_I2C_Isr,w
  6544  041D  0020               	movlb	0	; select bank0
  6545  041E  00C4               	movwf	_i2cSlaveState	;volatile
  6546                           
  6547                           ;mcc_generated_files/i2c_slave.c: 185:         }
  6548  041F  2C4E               	goto	i1l2900
  6549  0420                     i1l2880:
  6550                           
  6551                           ;mcc_generated_files/i2c_slave.c: 187:         {;mcc_generated_files/i2c_slave.c: 188:  
      +                                     i2cSlaveState = I2C_DATA_RX;
  6552  0420  3004               	movlw	4
  6553  0421  00F1               	movwf	??_I2C_Isr
  6554  0422  0871               	movf	??_I2C_Isr,w
  6555  0423  0020               	movlb	0	; select bank0
  6556  0424  00C4               	movwf	_i2cSlaveState	;volatile
  6557  0425  2C4E               	goto	i1l2900
  6558  0426                     i1l2882:
  6559                           
  6560                           ;mcc_generated_files/i2c_slave.c: 195:         I2C_SlaveAddrCallBack();
  6561  0426  3186  26BC  3183   	fcall	_I2C_SlaveAddrCallBack
  6562  0429                     i1l2884:
  6563                           
  6564                           ;mcc_generated_files/i2c_slave.c: 196:         if (I2C_SlaveIsTxBufEmpty())
  6565  0429  3187  2700  3183   	fcall	_I2C_SlaveIsTxBufEmpty
  6566  042C  3A00               	xorlw	0
  6567  042D  1903               	skipnz
  6568  042E  2C30               	goto	u70_21
  6569  042F  2C31               	goto	u70_20
  6570  0430                     u70_21:
  6571  0430  2C64               	goto	i1l2902
  6572  0431                     u70_20:
  6573  0431                     i1l2886:
  6574                           
  6575                           ;mcc_generated_files/i2c_slave.c: 197:         {;mcc_generated_files/i2c_slave.c: 198:  
      +                                     I2C_SlaveWrCallBack();
  6576  0431  3186  26A2  3183   	fcall	_I2C_SlaveWrCallBack
  6577  0434  2C64               	goto	i1l2902
  6578  0435                     i1l2888:
  6579                           
  6580                           ;mcc_generated_files/i2c_slave.c: 202:         I2C_SlaveAddrCallBack();
  6581  0435  3186  26BC  3183   	fcall	_I2C_SlaveAddrCallBack
  6582                           
  6583                           ;mcc_generated_files/i2c_slave.c: 203:         break;
  6584  0438  2C64               	goto	i1l2902
  6585  0439                     i1l2890:
  6586                           
  6587                           ;mcc_generated_files/i2c_slave.c: 205:         if (I2C_SlaveIsTxBufEmpty())
  6588  0439  3187  2700  3183   	fcall	_I2C_SlaveIsTxBufEmpty
  6589  043C  3A00               	xorlw	0
  6590  043D  1903               	skipnz
  6591  043E  2C40               	goto	u71_21
  6592  043F  2C41               	goto	u71_20
  6593  0440                     u71_21:
  6594  0440  2C64               	goto	i1l2902
  6595  0441                     u71_20:
  6596  0441  2C31               	goto	i1l2886
  6597  0442                     i1l2894:
  6598                           
  6599                           ;mcc_generated_files/i2c_slave.c: 211:         if (I2C_SlaveIsRxBufFull())
  6600  0442  3187  2778  3183   	fcall	_I2C_SlaveIsRxBufFull
  6601  0445  3A00               	xorlw	0
  6602  0446  1903               	skipnz
  6603  0447  2C49               	goto	u72_21
  6604  0448  2C4A               	goto	u72_20
  6605  0449                     u72_21:
  6606  0449  2C64               	goto	i1l2902
  6607  044A                     u72_20:
  6608  044A                     i1l2896:
  6609                           
  6610                           ;mcc_generated_files/i2c_slave.c: 212:         {;mcc_generated_files/i2c_slave.c: 213:  
      +                                     I2C_SlaveRdCallBack();
  6611  044A  3186  26AF  3183   	fcall	_I2C_SlaveRdCallBack
  6612  044D  2C64               	goto	i1l2902
  6613  044E                     i1l2900:
  6614  044E  0844               	movf	_i2cSlaveState,w	;volatile
  6615  044F  00F1               	movwf	??_I2C_Isr
  6616  0450  01F2               	clrf	??_I2C_Isr+1
  6617                           
  6618                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6619                           ; Switch size 1, requested type "simple"
  6620                           ; Number of cases is 1, Range of values is 0 to 0
  6621                           ; switch strategies available:
  6622                           ; Name         Instructions Cycles
  6623                           ; simple_byte            4     3 (average)
  6624                           ; direct_byte            8     6 (fixed)
  6625                           ; jumptable            260     6 (fixed)
  6626                           ;	Chosen strategy is simple_byte
  6627  0451  0872               	movf	??_I2C_Isr+1,w
  6628  0452  3A00               	xorlw	0	; case 0
  6629  0453  1903               	skipnz
  6630  0454  2C56               	goto	i1l4056
  6631  0455  2C64               	goto	i1l2902
  6632  0456                     i1l4056:
  6633                           
  6634                           ; Switch size 1, requested type "simple"
  6635                           ; Number of cases is 4, Range of values is 1 to 4
  6636                           ; switch strategies available:
  6637                           ; Name         Instructions Cycles
  6638                           ; simple_byte           13     7 (average)
  6639                           ; direct_byte           17     9 (fixed)
  6640                           ; jumptable            263     9 (fixed)
  6641                           ;	Chosen strategy is simple_byte
  6642  0456  0871               	movf	??_I2C_Isr,w
  6643  0457  3A01               	xorlw	1	; case 1
  6644  0458  1903               	skipnz
  6645  0459  2C26               	goto	i1l2882
  6646  045A  3A03               	xorlw	3	; case 2
  6647  045B  1903               	skipnz
  6648  045C  2C35               	goto	i1l2888
  6649  045D  3A01               	xorlw	1	; case 3
  6650  045E  1903               	skipnz
  6651  045F  2C39               	goto	i1l2890
  6652  0460  3A07               	xorlw	7	; case 4
  6653  0461  1903               	skipnz
  6654  0462  2C42               	goto	i1l2894
  6655  0463  2C64               	goto	i1l2902
  6656  0464                     i1l2902:
  6657                           
  6658                           ;mcc_generated_files/i2c_slave.c: 219:     I2C_SlaveReleaseClock();
  6659  0464  3187  278A  3183   	fcall	_I2C_SlaveReleaseClock
  6660  0467                     i1l696:
  6661  0467  0008               	return
  6662  0468                     __end_of_I2C_Isr:
  6663                           
  6664                           	psect	text36
  6665  06A2                     __ptext36:	
  6666 ;; *************** function _I2C_SlaveWrCallBack *****************
  6667 ;; Defined at:
  6668 ;;		line 254 in file "mcc_generated_files/i2c_slave.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, status,2, status,0, pclath, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    2
  6689 ;; This function calls:
  6690 ;;		Absolute function
  6691 ;;		_I2C_SlaveDefWrInterruptHandler
  6692 ;; This function is called by:
  6693 ;;		_I2C_Isr
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function _I2C_SlaveWrCallBack
  6699  06A2                     _I2C_SlaveWrCallBack:
  6700  06A2                     i1l2748:	
  6701                           ;incstack = 0
  6702                           ; Regs used in _I2C_SlaveWrCallBack: [wreg+status,2+status,0+pclath+cstack]
  6703                           
  6704                           
  6705                           ;mcc_generated_files/i2c_slave.c: 257:     if (I2C_SlaveWrInterruptHandler)
  6706  06A2  0020               	movlb	0	; select bank0
  6707  06A3  083E               	movf	_I2C_SlaveWrInterruptHandler,w
  6708  06A4  043F               	iorwf	_I2C_SlaveWrInterruptHandler+1,w
  6709  06A5  1903               	btfsc	3,2
  6710  06A6  2EA8               	goto	u56_21
  6711  06A7  2EA9               	goto	u56_20
  6712  06A8                     u56_21:
  6713  06A8  2EAE               	goto	i1l716
  6714  06A9                     u56_20:
  6715  06A9                     i1l2750:
  6716                           
  6717                           ;mcc_generated_files/i2c_slave.c: 258:     {;mcc_generated_files/i2c_slave.c: 259:      
      +                             I2C_SlaveWrInterruptHandler();
  6718  06A9  083F               	movf	_I2C_SlaveWrInterruptHandler+1,w
  6719  06AA  008A               	movwf	10
  6720  06AB  083E               	movf	_I2C_SlaveWrInterruptHandler,w
  6721  06AC  000A               	callw
  6722  06AD  3186               	pagesel	$
  6723  06AE                     i1l716:
  6724  06AE  0008               	return
  6725  06AF                     __end_of_I2C_SlaveWrCallBack:
  6726                           
  6727                           	psect	text37
  6728  0756                     __ptext37:	
  6729 ;; *************** function _I2C_SlaveDefWrInterruptHandler *****************
  6730 ;; Defined at:
  6731 ;;		line 263 in file "mcc_generated_files/i2c_slave.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;Total ram usage:        0 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    1
  6752 ;; This function calls:
  6753 ;;		_I2C_SlaveSendTxData
  6754 ;; This function is called by:
  6755 ;;		_I2C_Open
  6756 ;;		_I2C_SlaveWrCallBack
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _I2C_SlaveDefWrInterruptHandler
  6762  0756                     _I2C_SlaveDefWrInterruptHandler:
  6763  0756                     i1l2420:	
  6764                           ;incstack = 0
  6765                           ; Regs used in _I2C_SlaveDefWrInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
  6766                           
  6767                           
  6768                           ;mcc_generated_files/i2c_slave.c: 265:     I2C_SlaveSendTxData(i2cWrData);
  6769  0756  0020               	movlb	0	; select bank0
  6770  0757  0847               	movf	_i2cWrData,w	;volatile
  6771  0758  3187  2766  3187   	fcall	_I2C_SlaveSendTxData
  6772  075B                     i1l719:
  6773  075B  0008               	return
  6774  075C                     __end_of_I2C_SlaveDefWrInterruptHandler:
  6775                           
  6776                           	psect	text38
  6777  0766                     __ptext38:	
  6778 ;; *************** function _I2C_SlaveSendTxData *****************
  6779 ;; Defined at:
  6780 ;;		line 407 in file "mcc_generated_files/i2c_slave.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  data            1    wreg     unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  data            1    0[COMMON] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  1    wreg      void 
  6787 ;; Registers used:
  6788 ;;		wreg
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        1 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; This function calls:
  6801 ;;		Nothing
  6802 ;; This function is called by:
  6803 ;;		_I2C_SlaveDefWrInterruptHandler
  6804 ;;		_I2C_Write
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _I2C_SlaveSendTxData
  6810  0766                     _I2C_SlaveSendTxData:
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _I2C_SlaveSendTxData: [wreg]
  6814                           ;I2C_SlaveSendTxData@data stored from wreg
  6815  0766  00F0               	movwf	I2C_SlaveSendTxData@data
  6816  0767                     i1l2378:
  6817                           
  6818                           ;mcc_generated_files/i2c_slave.c: 407: static __attribute__((inline)) void I2C_SlaveSend
      +                          TxData(uint8_t data);mcc_generated_files/i2c_slave.c: 408: {;mcc_generated_files/i2c_sla
      +                          ve.c: 409:     SSPBUF = data;
  6819  0767  0870               	movf	I2C_SlaveSendTxData@data,w
  6820  0768  0024               	movlb	4	; select bank4
  6821  0769  0091               	movwf	17	;volatile
  6822  076A                     i1l795:
  6823  076A  0008               	return
  6824  076B                     __end_of_I2C_SlaveSendTxData:
  6825                           
  6826                           	psect	text39
  6827  078A                     __ptext39:	
  6828 ;; *************** function _I2C_SlaveReleaseClock *****************
  6829 ;; Defined at:
  6830 ;;		line 377 in file "mcc_generated_files/i2c_slave.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;                  1    wreg      void 
  6837 ;; Registers used:
  6838 ;;		None
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;Total ram usage:        0 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_I2C_Isr
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _I2C_SlaveReleaseClock
  6859  078A                     _I2C_SlaveReleaseClock:
  6860  078A                     i1l2760:	
  6861                           ;incstack = 0
  6862                           ; Regs used in _I2C_SlaveReleaseClock: []
  6863                           
  6864                           
  6865                           ;mcc_generated_files/i2c_slave.c: 379:     SSPCON1bits.CKP = 1;
  6866  078A  0024               	movlb	4	; select bank4
  6867  078B  1615               	bsf	21,4	;volatile
  6868  078C                     i1l777:
  6869  078C  0008               	return
  6870  078D                     __end_of_I2C_SlaveReleaseClock:
  6871                           
  6872                           	psect	text40
  6873  06AF                     __ptext40:	
  6874 ;; *************** function _I2C_SlaveRdCallBack *****************
  6875 ;; Defined at:
  6876 ;;		line 234 in file "mcc_generated_files/i2c_slave.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        0 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    2
  6897 ;; This function calls:
  6898 ;;		Absolute function
  6899 ;;		_I2C_SlaveDefRdInterruptHandler
  6900 ;; This function is called by:
  6901 ;;		_I2C_Isr
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           
  6906                           ;psect for function _I2C_SlaveRdCallBack
  6907  06AF                     _I2C_SlaveRdCallBack:
  6908  06AF                     i1l2756:	
  6909                           ;incstack = 0
  6910                           ; Regs used in _I2C_SlaveRdCallBack: [wreg+status,2+status,0+pclath+cstack]
  6911                           
  6912                           
  6913                           ;mcc_generated_files/i2c_slave.c: 237:     if (I2C_SlaveRdInterruptHandler)
  6914  06AF  0020               	movlb	0	; select bank0
  6915  06B0  0840               	movf	_I2C_SlaveRdInterruptHandler,w
  6916  06B1  0441               	iorwf	_I2C_SlaveRdInterruptHandler+1,w
  6917  06B2  1903               	btfsc	3,2
  6918  06B3  2EB5               	goto	u57_21
  6919  06B4  2EB6               	goto	u57_20
  6920  06B5                     u57_21:
  6921  06B5  2EBB               	goto	i1l706
  6922  06B6                     u57_20:
  6923  06B6                     i1l2758:
  6924                           
  6925                           ;mcc_generated_files/i2c_slave.c: 238:     {;mcc_generated_files/i2c_slave.c: 239:      
      +                             I2C_SlaveRdInterruptHandler();
  6926  06B6  0841               	movf	_I2C_SlaveRdInterruptHandler+1,w
  6927  06B7  008A               	movwf	10
  6928  06B8  0840               	movf	_I2C_SlaveRdInterruptHandler,w
  6929  06B9  000A               	callw
  6930  06BA  3186               	pagesel	$
  6931  06BB                     i1l706:
  6932  06BB  0008               	return
  6933  06BC                     __end_of_I2C_SlaveRdCallBack:
  6934                           
  6935                           	psect	text41
  6936  06DB                     __ptext41:	
  6937 ;; *************** function _I2C_SlaveDefRdInterruptHandler *****************
  6938 ;; Defined at:
  6939 ;;		line 243 in file "mcc_generated_files/i2c_slave.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;Total ram usage:        1 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    1
  6960 ;; This function calls:
  6961 ;;		i1_I2C_SlaveGetRxData
  6962 ;; This function is called by:
  6963 ;;		_I2C_Open
  6964 ;;		_I2C_SlaveRdCallBack
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _I2C_SlaveDefRdInterruptHandler
  6970  06DB                     _I2C_SlaveDefRdInterruptHandler:
  6971  06DB                     i1l2418:	
  6972                           ;incstack = 0
  6973                           ; Regs used in _I2C_SlaveDefRdInterruptHandler: [wreg+pclath+cstack]
  6974                           
  6975                           
  6976                           ;mcc_generated_files/i2c_slave.c: 245:     i2cRdData = I2C_SlaveGetRxData();
  6977  06DB  3187  2790  3186   	fcall	i1_I2C_SlaveGetRxData
  6978  06DE  00F0               	movwf	??_I2C_SlaveDefRdInterruptHandler
  6979  06DF  0870               	movf	??_I2C_SlaveDefRdInterruptHandler,w
  6980  06E0  0020               	movlb	0	; select bank0
  6981  06E1  00C6               	movwf	_i2cRdData	;volatile
  6982  06E2                     i1l709:
  6983  06E2  0008               	return
  6984  06E3                     __end_of_I2C_SlaveDefRdInterruptHandler:
  6985                           
  6986                           	psect	text42
  6987  0700                     __ptext42:	
  6988 ;; *************** function _I2C_SlaveIsTxBufEmpty *****************
  6989 ;; Defined at:
  6990 ;;		line 397 in file "mcc_generated_files/i2c_slave.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;		None
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;		None
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      _Bool 
  6997 ;; Registers used:
  6998 ;;		wreg, status,0
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;Total ram usage:        0 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_I2C_Isr
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _I2C_SlaveIsTxBufEmpty
  7019  0700                     _I2C_SlaveIsTxBufEmpty:
  7020  0700                     i1l2744:	
  7021                           ;incstack = 0
  7022                           ; Regs used in _I2C_SlaveIsTxBufEmpty: [wreg+status,0]
  7023                           
  7024                           
  7025                           ;mcc_generated_files/i2c_slave.c: 399:     return !SSPSTATbits.BF;
  7026  0700  1003               	clrc
  7027  0701  0024               	movlb	4	; select bank4
  7028  0702  1C14               	btfss	20,0	;volatile
  7029  0703  1403               	setc
  7030  0704  3000               	movlw	0
  7031  0705  3D09               	addwfc	9,w
  7032  0706                     i1l789:
  7033  0706  0008               	return
  7034  0707                     __end_of_I2C_SlaveIsTxBufEmpty:
  7035                           
  7036                           	psect	text43
  7037  0778                     __ptext43:	
  7038 ;; *************** function _I2C_SlaveIsRxBufFull *****************
  7039 ;; Defined at:
  7040 ;;		line 402 in file "mcc_generated_files/i2c_slave.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      _Bool 
  7047 ;; Registers used:
  7048 ;;		wreg, status,2, status,0
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:        0 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_I2C_Isr
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _I2C_SlaveIsRxBufFull
  7069  0778                     _I2C_SlaveIsRxBufFull:
  7070  0778                     i1l2752:	
  7071                           ;incstack = 0
  7072                           ; Regs used in _I2C_SlaveIsRxBufFull: [wreg+status,2+status,0]
  7073                           
  7074                           
  7075                           ;mcc_generated_files/i2c_slave.c: 404:     return SSPSTATbits.BF;
  7076  0778  0024               	movlb	4	; select bank4
  7077  0779  0814               	movf	20,w	;volatile
  7078  077A  3901               	andlw	1
  7079  077B                     i1l792:
  7080  077B  0008               	return
  7081  077C                     __end_of_I2C_SlaveIsRxBufFull:
  7082                           
  7083                           	psect	text44
  7084  076B                     __ptext44:	
  7085 ;; *************** function _I2C_SlaveIsRead *****************
  7086 ;; Defined at:
  7087 ;;		line 367 in file "mcc_generated_files/i2c_slave.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      _Bool 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        0 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; This function calls:
  7108 ;;		Nothing
  7109 ;; This function is called by:
  7110 ;;		_I2C_Isr
  7111 ;;		_I2C_IsRead
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _I2C_SlaveIsRead
  7117  076B                     _I2C_SlaveIsRead:
  7118  076B                     i1l2730:	
  7119                           ;incstack = 0
  7120                           ; Regs used in _I2C_SlaveIsRead: [wreg+status,2+status,0]
  7121                           
  7122                           
  7123                           ;mcc_generated_files/i2c_slave.c: 369:     return (SSPSTATbits.R_nW);
  7124  076B  0024               	movlb	4	; select bank4
  7125  076C  0C14               	rrf	20,w	;volatile
  7126  076D  0C89               	rrf	9,f
  7127  076E  3901               	andlw	1
  7128  076F                     i1l771:
  7129  076F  0008               	return
  7130  0770                     __end_of_I2C_SlaveIsRead:
  7131                           
  7132                           	psect	text45
  7133  0707                     __ptext45:	
  7134 ;; *************** function _I2C_SlaveIsAddr *****************
  7135 ;; Defined at:
  7136 ;;		line 362 in file "mcc_generated_files/i2c_slave.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;		None
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      _Bool 
  7143 ;; Registers used:
  7144 ;;		wreg, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;Total ram usage:        0 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		_I2C_Isr
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _I2C_SlaveIsAddr
  7165  0707                     _I2C_SlaveIsAddr:
  7166  0707                     i1l2736:	
  7167                           ;incstack = 0
  7168                           ; Regs used in _I2C_SlaveIsAddr: [wreg+status,0]
  7169                           
  7170                           
  7171                           ;mcc_generated_files/i2c_slave.c: 364:     return !(SSPSTATbits.D_nA);
  7172  0707  1003               	clrc
  7173  0708  0024               	movlb	4	; select bank4
  7174  0709  1E94               	btfss	20,5	;volatile
  7175  070A  1403               	setc
  7176  070B  3000               	movlw	0
  7177  070C  3D09               	addwfc	9,w
  7178  070D                     i1l768:
  7179  070D  0008               	return
  7180  070E                     __end_of_I2C_SlaveIsAddr:
  7181                           
  7182                           	psect	text46
  7183  078D                     __ptext46:	
  7184 ;; *************** function _I2C_SlaveClearIrq *****************
  7185 ;; Defined at:
  7186 ;;		line 372 in file "mcc_generated_files/i2c_slave.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		None
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_I2C_Isr
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _I2C_SlaveClearIrq
  7215  078D                     _I2C_SlaveClearIrq:
  7216  078D                     i1l2734:	
  7217                           ;incstack = 0
  7218                           ; Regs used in _I2C_SlaveClearIrq: []
  7219                           
  7220                           
  7221                           ;mcc_generated_files/i2c_slave.c: 374:     PIR1bits.SSPIF = 0;
  7222  078D  0020               	movlb	0	; select bank0
  7223  078E  1191               	bcf	17,3	;volatile
  7224  078F                     i1l774:
  7225  078F  0008               	return
  7226  0790                     __end_of_I2C_SlaveClearIrq:
  7227                           
  7228                           	psect	text47
  7229  06BC                     __ptext47:	
  7230 ;; *************** function _I2C_SlaveAddrCallBack *****************
  7231 ;; Defined at:
  7232 ;;		line 274 in file "mcc_generated_files/i2c_slave.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0, pclath, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;Total ram usage:        0 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    2
  7253 ;; This function calls:
  7254 ;;		Absolute function
  7255 ;;		_I2C_SlaveDefAddrInterruptHandler
  7256 ;; This function is called by:
  7257 ;;		_I2C_Isr
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _I2C_SlaveAddrCallBack
  7263  06BC                     _I2C_SlaveAddrCallBack:
  7264  06BC                     i1l2740:	
  7265                           ;incstack = 0
  7266                           ; Regs used in _I2C_SlaveAddrCallBack: [wreg+status,2+status,0+pclath+cstack]
  7267                           
  7268                           
  7269                           ;mcc_generated_files/i2c_slave.c: 277:     if (I2C_SlaveAddrInterruptHandler)
  7270  06BC  0020               	movlb	0	; select bank0
  7271  06BD  083C               	movf	_I2C_SlaveAddrInterruptHandler,w
  7272  06BE  043D               	iorwf	_I2C_SlaveAddrInterruptHandler+1,w
  7273  06BF  1903               	btfsc	3,2
  7274  06C0  2EC2               	goto	u55_21
  7275  06C1  2EC3               	goto	u55_20
  7276  06C2                     u55_21:
  7277  06C2  2EC8               	goto	i1l726
  7278  06C3                     u55_20:
  7279  06C3                     i1l2742:
  7280                           
  7281                           ;mcc_generated_files/i2c_slave.c: 278:     {;mcc_generated_files/i2c_slave.c: 279:      
      +                             I2C_SlaveAddrInterruptHandler();
  7282  06C3  083D               	movf	_I2C_SlaveAddrInterruptHandler+1,w
  7283  06C4  008A               	movwf	10
  7284  06C5  083C               	movf	_I2C_SlaveAddrInterruptHandler,w
  7285  06C6  000A               	callw
  7286  06C7  3186               	pagesel	$
  7287  06C8                     i1l726:
  7288  06C8  0008               	return
  7289  06C9                     __end_of_I2C_SlaveAddrCallBack:
  7290                           
  7291                           	psect	text48
  7292  06E3                     __ptext48:	
  7293 ;; *************** function _I2C_SlaveDefAddrInterruptHandler *****************
  7294 ;; Defined at:
  7295 ;;		line 283 in file "mcc_generated_files/i2c_slave.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      void 
  7302 ;; Registers used:
  7303 ;;		wreg, pclath, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;Total ram usage:        1 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    1
  7316 ;; This function calls:
  7317 ;;		i1_I2C_SlaveGetRxData
  7318 ;; This function is called by:
  7319 ;;		_I2C_Open
  7320 ;;		_I2C_SlaveAddrCallBack
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _I2C_SlaveDefAddrInterruptHandler
  7326  06E3                     _I2C_SlaveDefAddrInterruptHandler:
  7327  06E3                     i1l2422:	
  7328                           ;incstack = 0
  7329                           ; Regs used in _I2C_SlaveDefAddrInterruptHandler: [wreg+pclath+cstack]
  7330                           
  7331                           
  7332                           ;mcc_generated_files/i2c_slave.c: 285:     i2cSlaveAddr = I2C_SlaveGetRxData();
  7333  06E3  3187  2790  3186   	fcall	i1_I2C_SlaveGetRxData
  7334  06E6  00F0               	movwf	??_I2C_SlaveDefAddrInterruptHandler
  7335  06E7  0870               	movf	??_I2C_SlaveDefAddrInterruptHandler,w
  7336  06E8  0020               	movlb	0	; select bank0
  7337  06E9  00C5               	movwf	_i2cSlaveAddr	;volatile
  7338  06EA                     i1l729:
  7339  06EA  0008               	return
  7340  06EB                     __end_of_I2C_SlaveDefAddrInterruptHandler:
  7341                           
  7342                           	psect	text49
  7343  0790                     __ptext49:	
  7344 ;; *************** function i1_I2C_SlaveGetRxData *****************
  7345 ;; Defined at:
  7346 ;;		line 412 in file "mcc_generated_files/i2c_slave.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      unsigned char 
  7353 ;; Registers used:
  7354 ;;		wreg
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;Total ram usage:        0 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; This function calls:
  7367 ;;		Nothing
  7368 ;; This function is called by:
  7369 ;;		_I2C_SlaveDefRdInterruptHandler
  7370 ;;		_I2C_SlaveDefAddrInterruptHandler
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           
  7375                           ;psect for function i1_I2C_SlaveGetRxData
  7376  0790                     i1_I2C_SlaveGetRxData:
  7377  0790                     i1l2380:	
  7378                           ;incstack = 0
  7379                           ; Regs used in i1_I2C_SlaveGetRxData: [wreg]
  7380                           
  7381                           
  7382                           ;mcc_generated_files/i2c_slave.c: 414:     return SSPBUF;
  7383  0790  0024               	movlb	4	; select bank4
  7384  0791  0811               	movf	17,w	;volatile
  7385  0792                     i1l798:
  7386  0792  0008               	return
  7387  0793                     __end_ofi1_I2C_SlaveGetRxData:
  7388                           
  7389                           	psect	text50
  7390  062E                     __ptext50:	
  7391 ;; *************** function _EUSART_Transmit_ISR *****************
  7392 ;; Defined at:
  7393 ;;		line 197 in file "mcc_generated_files/eusart.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;		None
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;		None
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      void 
  7400 ;; Registers used:
  7401 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:        1 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; This function calls:
  7414 ;;		Nothing
  7415 ;; This function is called by:
  7416 ;;		_EUSART_Initialize
  7417 ;;		_INTERRUPT_InterruptManager
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function _EUSART_Transmit_ISR
  7423  062E                     _EUSART_Transmit_ISR:
  7424  062E                     i1l2834:	
  7425                           ;incstack = 0
  7426                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7427                           
  7428                           
  7429                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing);mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRe
      +                          maining)
  7430  062E  3008               	movlw	8
  7431  062F  0020               	movlb	0	; select bank0
  7432  0630  0254               	subwf	_eusartTxBufferRemaining,w	;volatile
  7433  0631  1803               	skipnc
  7434  0632  2E34               	goto	u62_21
  7435  0633  2E35               	goto	u62_20
  7436  0634                     u62_21:
  7437  0634  2E4D               	goto	i1l467
  7438  0635                     u62_20:
  7439  0635                     i1l2836:
  7440                           
  7441                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 202:     {;mcc_g
      +                          enerated_files/eusart.c: 203:         TXREG = eusartTxBuffer[eusartTxTail++];;mcc_genera
      +                          ted_files/eusart.c: 203:         TXREG = eusartTxBuffer[eusartTxTail++];
  7442  0635  0878               	movf	_eusartTxTail,w
  7443  0636  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7444  0637  0086               	movwf	6
  7445  0638  0187               	clrf	7
  7446  0639  0801               	movf	1,w
  7447  063A  0023               	movlb	3	; select bank3
  7448  063B  009A               	movwf	26	;volatile
  7449  063C                     i1l2838:
  7450  063C  3001               	movlw	1
  7451  063D  00F0               	movwf	??_EUSART_Transmit_ISR
  7452  063E  0870               	movf	??_EUSART_Transmit_ISR,w
  7453  063F  07F8               	addwf	_eusartTxTail,f	;volatile
  7454  0640                     i1l2840:
  7455                           
  7456                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail);m
      +                          cc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7457  0640  3008               	movlw	8
  7458  0641  0278               	subwf	_eusartTxTail,w	;volatile
  7459  0642  1C03               	skipc
  7460  0643  2E45               	goto	u63_21
  7461  0644  2E46               	goto	u63_20
  7462  0645                     u63_21:
  7463  0645  2E47               	goto	i1l2844
  7464  0646                     u63_20:
  7465  0646                     i1l2842:
  7466                           
  7467                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 205:        
      +                           {;mcc_generated_files/eusart.c: 206:             eusartTxTail = 0;;mcc_generated_files/
      +                          eusart.c: 206:             eusartTxTail = 0;
  7468  0646  01F8               	clrf	_eusartTxTail	;volatile
  7469  0647                     i1l2844:
  7470                           
  7471                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;;mcc_generated_fil
      +                          es/eusart.c: 208:         eusartTxBufferRemaining++;
  7472  0647  3001               	movlw	1
  7473  0648  00F0               	movwf	??_EUSART_Transmit_ISR
  7474  0649  0870               	movf	??_EUSART_Transmit_ISR,w
  7475  064A  0020               	movlb	0	; select bank0
  7476  064B  07D4               	addwf	_eusartTxBufferRemaining,f	;volatile
  7477                           
  7478                           ;mcc_generated_files/eusart.c: 209:     };mcc_generated_files/eusart.c: 209:     }
  7479  064C  2E4F               	goto	i1l470
  7480  064D                     i1l467:	
  7481                           ;mcc_generated_files/eusart.c: 210:     else;mcc_generated_files/eusart.c: 210:     else
  7482                           
  7483                           
  7484                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 211:     {;mcc_g
      +                          enerated_files/eusart.c: 212:         PIE1bits.TXIE = 0;;mcc_generated_files/eusart.c: 2
      +                          12:         PIE1bits.TXIE = 0;
  7485  064D  0021               	movlb	1	; select bank1
  7486  064E  1211               	bcf	17,4	;volatile
  7487  064F                     i1l470:
  7488  064F  0008               	return
  7489  0650                     __end_of_EUSART_Transmit_ISR:
  7490                           
  7491                           	psect	text51
  7492  0576                     __ptext51:	
  7493 ;; *************** function _EUSART_Receive_ISR *****************
  7494 ;; Defined at:
  7495 ;;		line 216 in file "mcc_generated_files/eusart.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;		None
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  1    wreg      void 
  7502 ;; Registers used:
  7503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;Total ram usage:        0 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    2
  7516 ;; This function calls:
  7517 ;;		Absolute function
  7518 ;;		_EUSART_DefaultErrorHandler
  7519 ;;		_EUSART_DefaultFramingErrorHandler
  7520 ;;		_EUSART_DefaultOverrunErrorHandler
  7521 ;;		_EUSART_RxDataHandler
  7522 ;; This function is called by:
  7523 ;;		_EUSART_Initialize
  7524 ;;		_INTERRUPT_InterruptManager
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           
  7529                           ;psect for function _EUSART_Receive_ISR
  7530  0576                     _EUSART_Receive_ISR:
  7531  0576                     i1l2846:	
  7532                           ;incstack = 0
  7533                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7534                           
  7535                           
  7536                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;;m
      +                          cc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  7537  0576  0877               	movf	_eusartRxHead,w	;volatile
  7538  0577  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7539  0578  0086               	movwf	6
  7540  0579  0187               	clrf	7
  7541  057A  0181               	clrf	1
  7542  057B                     i1l2848:
  7543                           
  7544                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){;mcc_generated_files/eusart.c
      +                          : 221:     if(RCSTAbits.FERR){
  7545  057B  0023               	movlb	3	; select bank3
  7546  057C  1D1D               	btfss	29,2	;volatile
  7547  057D  2D7F               	goto	u64_21
  7548  057E  2D80               	goto	u64_20
  7549  057F                     u64_21:
  7550  057F  2D8B               	goto	i1l2854
  7551  0580                     u64_20:
  7552  0580                     i1l2850:
  7553                           
  7554                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
      +                          ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  7555  0580  0877               	movf	_eusartRxHead,w	;volatile
  7556  0581  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7557  0582  0086               	movwf	6
  7558  0583  0187               	clrf	7
  7559  0584  1481               	bsf	1,1
  7560  0585                     i1l2852:
  7561                           
  7562                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();;mcc_generated_
      +                          files/eusart.c: 223:         EUSART_FramingErrorHandler();
  7563  0585  0020               	movlb	0	; select bank0
  7564  0586  084F               	movf	_EUSART_FramingErrorHandler+1,w
  7565  0587  008A               	movwf	10
  7566  0588  084E               	movf	_EUSART_FramingErrorHandler,w
  7567  0589  000A               	callw
  7568  058A  3185               	pagesel	$
  7569  058B                     i1l2854:
  7570                           
  7571                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){;mcc_generated_files/eusart.c
      +                          : 226:     if(RCSTAbits.OERR){
  7572  058B  0023               	movlb	3	; select bank3
  7573  058C  1C9D               	btfss	29,1	;volatile
  7574  058D  2D8F               	goto	u65_21
  7575  058E  2D90               	goto	u65_20
  7576  058F                     u65_21:
  7577  058F  2D9B               	goto	i1l2860
  7578  0590                     u65_20:
  7579  0590                     i1l2856:
  7580                           
  7581                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
      +                          ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  7582  0590  0877               	movf	_eusartRxHead,w	;volatile
  7583  0591  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7584  0592  0086               	movwf	6
  7585  0593  0187               	clrf	7
  7586  0594  1501               	bsf	1,2
  7587  0595                     i1l2858:
  7588                           
  7589                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();;mcc_generated_
      +                          files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  7590  0595  0020               	movlb	0	; select bank0
  7591  0596  084D               	movf	_EUSART_OverrunErrorHandler+1,w
  7592  0597  008A               	movwf	10
  7593  0598  084C               	movf	_EUSART_OverrunErrorHandler,w
  7594  0599  000A               	callw
  7595  059A  3185               	pagesel	$
  7596  059B                     i1l2860:
  7597                           
  7598                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){;m
      +                          cc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  7599  059B  0877               	movf	_eusartRxHead,w	;volatile
  7600  059C  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7601  059D  0086               	movwf	6
  7602  059E  0187               	clrf	7
  7603  059F  0801               	movf	1,w
  7604  05A0  1903               	btfsc	3,2
  7605  05A1  2DA3               	goto	u66_21
  7606  05A2  2DA4               	goto	u66_20
  7607  05A3                     u66_21:
  7608  05A3  2DAB               	goto	i1l2864
  7609  05A4                     u66_20:
  7610  05A4                     i1l2862:
  7611                           
  7612                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();;mcc_generated_files/e
      +                          usart.c: 232:         EUSART_ErrorHandler();
  7613  05A4  0021               	movlb	1	; select bank1
  7614  05A5  084C               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  7615  05A6  008A               	movwf	10
  7616  05A7  084B               	movf	_EUSART_ErrorHandler^(0+128),w
  7617  05A8  000A               	callw
  7618  05A9  3185               	pagesel	$
  7619                           
  7620                           ;mcc_generated_files/eusart.c: 233:     } else {;mcc_generated_files/eusart.c: 233:     
      +                          } else {
  7621  05AA  2DAE               	goto	i1l477
  7622  05AB                     i1l2864:
  7623                           
  7624                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();;mcc_generated_files/
      +                          eusart.c: 234:         EUSART_RxDataHandler();
  7625  05AB  3186  266B  3185   	fcall	_EUSART_RxDataHandler
  7626  05AE                     i1l477:
  7627  05AE  0008               	return
  7628  05AF                     __end_of_EUSART_Receive_ISR:
  7629                           
  7630                           	psect	text52
  7631  077C                     __ptext52:	
  7632 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  7633 ;; Defined at:
  7634 ;;		line 252 in file "mcc_generated_files/eusart.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      void 
  7641 ;; Registers used:
  7642 ;;		None
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;Total ram usage:        0 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; This function calls:
  7655 ;;		Nothing
  7656 ;; This function is called by:
  7657 ;;		_EUSART_Initialize
  7658 ;;		_EUSART_Receive_ISR
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           
  7663                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  7664  077C                     _EUSART_DefaultOverrunErrorHandler:
  7665  077C                     i1l2696:	
  7666                           ;incstack = 0
  7667                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  7668                           
  7669                           
  7670                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;;mcc_generated_files/eusart.c
      +                          : 255:     RCSTAbits.CREN = 0;
  7671  077C  0023               	movlb	3	; select bank3
  7672  077D  121D               	bcf	29,4	;volatile
  7673                           
  7674                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;;mcc_generated_files/eusart.c
      +                          : 256:     RCSTAbits.CREN = 1;
  7675  077E  161D               	bsf	29,4	;volatile
  7676  077F                     i1l487:
  7677  077F  0008               	return
  7678  0780                     __end_of_EUSART_DefaultOverrunErrorHandler:
  7679                           
  7680                           	psect	text53
  7681  0793                     __ptext53:	
  7682 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  7683 ;; Defined at:
  7684 ;;		line 250 in file "mcc_generated_files/eusart.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		None
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;Total ram usage:        0 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_EUSART_Initialize
  7708 ;;		_EUSART_Receive_ISR
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _EUSART_DefaultFramingErrorHandler
  7714  0793                     _EUSART_DefaultFramingErrorHandler:
  7715  0793                     i1l484:	
  7716                           ;incstack = 0
  7717                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  7718                           
  7719  0793  0008               	return
  7720  0794                     __end_of_EUSART_DefaultFramingErrorHandler:
  7721                           
  7722                           	psect	text54
  7723  0780                     __ptext54:	
  7724 ;; *************** function _EUSART_DefaultErrorHandler *****************
  7725 ;; Defined at:
  7726 ;;		line 260 in file "mcc_generated_files/eusart.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;		None
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;		None
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  1    wreg      void 
  7733 ;; Registers used:
  7734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : 0/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;Total ram usage:        0 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    1
  7747 ;; This function calls:
  7748 ;;		_EUSART_RxDataHandler
  7749 ;; This function is called by:
  7750 ;;		_EUSART_Initialize
  7751 ;;		_EUSART_Receive_ISR
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _EUSART_DefaultErrorHandler
  7757  0780                     _EUSART_DefaultErrorHandler:
  7758  0780                     i1l2698:	
  7759                           ;incstack = 0
  7760                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7761                           
  7762                           
  7763                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();;mcc_generated_files/eusa
      +                          rt.c: 261:     EUSART_RxDataHandler();
  7764  0780  3186  266B  3187   	fcall	_EUSART_RxDataHandler
  7765  0783                     i1l490:
  7766  0783  0008               	return
  7767  0784                     __end_of_EUSART_DefaultErrorHandler:
  7768                           
  7769                           	psect	text55
  7770  066B                     __ptext55:	
  7771 ;; *************** function _EUSART_RxDataHandler *****************
  7772 ;; Defined at:
  7773 ;;		line 240 in file "mcc_generated_files/eusart.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      void 
  7780 ;; Registers used:
  7781 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:        1 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; This function calls:
  7794 ;;		Nothing
  7795 ;; This function is called by:
  7796 ;;		_EUSART_Receive_ISR
  7797 ;;		_EUSART_DefaultErrorHandler
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _EUSART_RxDataHandler
  7803  066B                     _EUSART_RxDataHandler:
  7804  066B                     i1l2404:	
  7805                           ;incstack = 0
  7806                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  7807                           
  7808                           
  7809                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;;mcc_gene
      +                          rated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7810  066B  0023               	movlb	3	; select bank3
  7811  066C  0819               	movf	25,w	;volatile
  7812  066D  00F0               	movwf	??_EUSART_RxDataHandler
  7813  066E  0877               	movf	_eusartRxHead,w
  7814  066F  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7815  0670  0086               	movwf	6
  7816  0671  0187               	clrf	7
  7817  0672  0870               	movf	??_EUSART_RxDataHandler,w
  7818  0673  0081               	movwf	1
  7819  0674                     i1l2406:
  7820  0674  3001               	movlw	1
  7821  0675  00F0               	movwf	??_EUSART_RxDataHandler
  7822  0676  0870               	movf	??_EUSART_RxDataHandler,w
  7823  0677  07F7               	addwf	_eusartRxHead,f	;volatile
  7824  0678                     i1l2408:
  7825                           
  7826                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead);mcc_g
      +                          enerated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7827  0678  3008               	movlw	8
  7828  0679  0277               	subwf	_eusartRxHead,w	;volatile
  7829  067A  1C03               	skipc
  7830  067B  2E7D               	goto	u45_21
  7831  067C  2E7E               	goto	u45_20
  7832  067D                     u45_21:
  7833  067D  2E7F               	goto	i1l2412
  7834  067E                     u45_20:
  7835  067E                     i1l2410:
  7836                           
  7837                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 244:     {;mcc_g
      +                          enerated_files/eusart.c: 245:         eusartRxHead = 0;;mcc_generated_files/eusart.c: 24
      +                          5:         eusartRxHead = 0;
  7838  067E  01F7               	clrf	_eusartRxHead	;volatile
  7839  067F                     i1l2412:
  7840                           
  7841                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;;mcc_generated_files/eusart.c: 2
      +                          47:     eusartRxCount++;
  7842  067F  3001               	movlw	1
  7843  0680  00F0               	movwf	??_EUSART_RxDataHandler
  7844  0681  0870               	movf	??_EUSART_RxDataHandler,w
  7845  0682  0020               	movlb	0	; select bank0
  7846  0683  07C9               	addwf	_eusartRxCount,f	;volatile
  7847  0684                     i1l481:
  7848  0684  0008               	return
  7849  0685                     __end_of_EUSART_RxDataHandler:
  7850  007E                     btemp	set	126	;btemp
  7851  007E                     int$flags	set	126
  7852  007E                     wtemp0	set	126
  7853                           
  7854                           	psect	config
  7855                           
  7856                           ;Config register CONFIG1 @ 0x8007
  7857                           ;	Oscillator Selection
  7858                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  7859                           ;	Watchdog Timer Enable
  7860                           ;	WDTE = OFF, WDT disabled
  7861                           ;	Power-up Timer Enable
  7862                           ;	PWRTE = OFF, PWRT disabled
  7863                           ;	MCLR Pin Function Select
  7864                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  7865                           ;	Flash Program Memory Code Protection
  7866                           ;	CP = OFF, Program memory code protection is disabled
  7867                           ;	Data Memory Code Protection
  7868                           ;	CPD = OFF, Data memory code protection is disabled
  7869                           ;	Brown-out Reset Enable
  7870                           ;	BOREN = ON, Brown-out Reset enabled
  7871                           ;	Clock Out Enable
  7872                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  7873                           ;	Internal/External Switchover
  7874                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7875                           ;	Fail-Safe Clock Monitor Enable
  7876                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7877  8007                     	org	32775
  7878  8007  3FE4               	dw	16356
  7879                           
  7880                           ;Config register CONFIG2 @ 0x8008
  7881                           ;	Flash Memory Self-Write Protection
  7882                           ;	WRT = OFF, Write protection off
  7883                           ;	Voltage Regulator Capacitor Enable
  7884                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
  7885                           ;	PLL Enable
  7886                           ;	PLLEN = OFF, 4x PLL disabled
  7887                           ;	Stack Overflow/Underflow Reset Enable
  7888                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  7889                           ;	Brown-out Reset Voltage Selection
  7890                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  7891                           ;	Low-Voltage Programming Enable
  7892                           ;	LVP = ON, Low-voltage programming enabled
  7893  8008                     	org	32776
  7894  8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         69
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      8      61
    BANK1            80     22      45
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    I2C_SlaveSetBusColIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_SlaveDefBusColInterruptHandler(), 

    I2C_SlaveBusColInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_SlaveDefBusColInterruptHandler(), 

    I2C_SlaveSetWrColIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_SlaveDefWrColInterruptHandler(), 

    I2C_SlaveWrColInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_SlaveDefWrColInterruptHandler(), 

    I2C_SlaveSetAddrIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_SlaveDefAddrInterruptHandler(), 

    I2C_SlaveAddrInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_SlaveDefAddrInterruptHandler(), 

    I2C_SlaveSetWriteIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_SlaveDefWrInterruptHandler(), 

    I2C_SlaveWrInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_SlaveDefWrInterruptHandler(), 

    I2C_SlaveSetReadIntHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_SlaveDefRdInterruptHandler(), 

    I2C_SlaveRdInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_SlaveDefRdInterruptHandler(), 

    I2C_SlaveSetIsrHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_Isr(), 

    MSSP_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), I2C_Isr(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _show->_off_digit
    _show_character->_on_digit
    _receive_char_from_I2C->_decode_received_char
    _receive_char_from_EUSART->_decode_received_char
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _I2C_Open->_I2C_SlaveSetAddrIntHandler
    _I2C_Open->_I2C_SlaveSetBusColIntHandler
    _I2C_Open->_I2C_SlaveSetIsrHandler
    _I2C_Open->_I2C_SlaveSetReadIntHandler
    _I2C_Open->_I2C_SlaveSetWrColIntHandler
    _I2C_Open->_I2C_SlaveSetWriteIntHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_Isr
    _I2C_SlaveDefWrInterruptHandler->_I2C_SlaveSendTxData
    _I2C_SlaveRdCallBack->_I2C_SlaveDefRdInterruptHandler
    _I2C_SlaveAddrCallBack->_I2C_SlaveDefAddrInterruptHandler
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_show
    _show->_show_character

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_show

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4930
                 _EUSART_is_rx_ready
                           _I2C_Open
                  _SYSTEM_Initialize
           _receive_char_from_EUSART
              _receive_char_from_I2C
                               _show
 ---------------------------------------------------------------------------------
 (1) _show                                                24    24      0    3560
                                              6 BANK0      2     2      0
                                              0 BANK1     22    22      0
                          _off_digit
                     _show_character
 ---------------------------------------------------------------------------------
 (2) _show_character                                       6     4      2    2398
                                              0 BANK0      6     4      2
                           _on_digit
 ---------------------------------------------------------------------------------
 (3) _on_digit                                             3     3      0      31
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _off_digit                                            3     3      0      31
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _receive_char_from_I2C                                0     0      0     112
                           _I2C_Read
               _decode_received_char
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             0     0      0       0
                 _I2C_SlaveGetRxData
 ---------------------------------------------------------------------------------
 (3) _I2C_SlaveGetRxData                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _receive_char_from_EUSART                             0     0      0     136
                        _EUSART_Read
               _decode_received_char
 ---------------------------------------------------------------------------------
 (2) _decode_received_char                                 3     3      0     112
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     490
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              5 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Open                                             0     0      0     632
                 _I2C_SlaveEnableIrq
                      _I2C_SlaveOpen
         _I2C_SlaveSetAddrIntHandler
       _I2C_SlaveSetBusColIntHandler
             _I2C_SlaveSetIsrHandler
         _I2C_SlaveSetReadIntHandler
              _I2C_SlaveSetSlaveAddr
              _I2C_SlaveSetSlaveMask
        _I2C_SlaveSetWrColIntHandler
        _I2C_SlaveSetWriteIntHandler
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetWriteIntHandler                          2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetWrColIntHandler                          2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetSlaveMask                                1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetSlaveAddr                                1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetReadIntHandler                           2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetIsrHandler                               2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetBusColIntHandler                         2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveSetAddrIntHandler                           2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveOpen                                        1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_SlaveEnableIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      22
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _I2C_Isr *
 ---------------------------------------------------------------------------------
 (5) _I2C_Isr                                              2     2      0      22
                                              1 COMMON     2     2      0
              _I2C_SlaveAddrCallBack
                  _I2C_SlaveClearIrq
                    _I2C_SlaveIsAddr
                    _I2C_SlaveIsRead
               _I2C_SlaveIsRxBufFull
              _I2C_SlaveIsTxBufEmpty
                _I2C_SlaveRdCallBack
              _I2C_SlaveReleaseClock
                _I2C_SlaveWrCallBack
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveWrCallBack                                  0     0      0      22
                   Absolute function *
     _I2C_SlaveDefWrInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_SlaveDefWrInterruptHandler                       0     0      0      22
                _I2C_SlaveSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C_SlaveSendTxData                                  1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveReleaseClock                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveRdCallBack                                  0     0      0       0
                   Absolute function *
     _I2C_SlaveDefRdInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_SlaveDefRdInterruptHandler                       1     1      0       0
                                              0 COMMON     1     1      0
               i1_I2C_SlaveGetRxData
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveIsTxBufEmpty                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveIsRxBufFull                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveIsRead                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveIsAddr                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveClearIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_SlaveAddrCallBack                                0     0      0       0
                   Absolute function *
   _I2C_SlaveDefAddrInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _I2C_SlaveDefAddrInterruptHandler                     1     1      0       0
                                              0 COMMON     1     1      0
               i1_I2C_SlaveGetRxData
 ---------------------------------------------------------------------------------
 (8) i1_I2C_SlaveGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_is_rx_ready
   _I2C_Open
     _I2C_SlaveEnableIrq
     _I2C_SlaveOpen
     _I2C_SlaveSetAddrIntHandler
     _I2C_SlaveSetBusColIntHandler
     _I2C_SlaveSetIsrHandler
     _I2C_SlaveSetReadIntHandler
     _I2C_SlaveSetSlaveAddr
     _I2C_SlaveSetSlaveMask
     _I2C_SlaveSetWrColIntHandler
     _I2C_SlaveSetWriteIntHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _receive_char_from_EUSART
     _EUSART_Read
     _decode_received_char
   _receive_char_from_I2C
     _I2C_Read
       _I2C_SlaveGetRxData
     _decode_received_char
   _show
     _off_digit
     _show_character
       _on_digit

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _I2C_Isr *
     _I2C_SlaveAddrCallBack
       Absolute function(Fake) *
       _I2C_SlaveDefAddrInterruptHandler *
         i1_I2C_SlaveGetRxData
     _I2C_SlaveClearIrq
     _I2C_SlaveIsAddr
     _I2C_SlaveIsRead
     _I2C_SlaveIsRxBufFull
     _I2C_SlaveIsTxBufEmpty
     _I2C_SlaveRdCallBack
       Absolute function(Fake) *
       _I2C_SlaveDefRdInterruptHandler *
         i1_I2C_SlaveGetRxData
     _I2C_SlaveReleaseClock
     _I2C_SlaveWrCallBack
       Absolute function(Fake) *
       _I2C_SlaveDefWrInterruptHandler *
         _I2C_SlaveSendTxData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      3D       5       76.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     16      2D       7       56.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      74      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      74      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Mar 22 19:41:10 2023

                ?_EUSART_SetRxInterruptHandler 0073                                    _SSPSTATbits 0214  
                                           l39 066A                                             l81 0777  
                                           l75 0694                                             l78 06FF  
                                          l211 009D                                            l204 0084  
                                          l301 01F1                                            l221 00B8  
                                          l213 009F                                            l214 00A1  
                                          l206 0086                                            l311 0218  
                                          l303 01F6                                            l231 00DB  
                                          l223 00BD                                            l207 0088  
                                          l320 046D                                            l312 021D  
                                          l304 01FB                                            l240 00FE  
                                          l224 00C2                                            l321 0470  
                                          l233 00E0                                            l209 00B6  
                                          l322 0473                                            l330 04B2  
                                          l314 029A                                            l250 0125  
                                          l242 0103                                            l234 00E5  
                                          l323 0476                                            l251 012A  
                                          l243 0108                                            l219 00B7  
                                          l340 04C4                                            l324 0479  
                                          l260 014D                                            l341 04C7  
                                          l325 047C                                            l309 0213  
                                          l229 00DA                                            l502 0719  
                                          l342 04CA                                            l334 04B5  
                                          l326 047F                                            l318 046A  
                                          l238 00FD                                            l182 0613  
                                          l343 04CD                                            l327 0482  
                                          l255 0142                                            l352 06F1  
                                          l344 04D0                                            l336 04B8  
                                          l328 0485                                            l264 0165  
                                          l248 0120                                            l505 071F  
                                          l361 05E0                                            l337 04BB  
                                          l273 0188                                            l257 0143  
                                          l442 06DA                                            l338 04BE  
                                          l346 04FD                                            l282 01AB  
                                          l266 0166                                            l339 04C1  
                                          l275 0189                                            l259 0148  
                                          l195 03F2                                            l436 053C  
                                          l292 01CE                                            l284 01AC  
                                          l268 016B                                            l349 06F8  
                                          l277 018E                                            l269 0170  
                                          l702 0743                                            l294 01D3  
                                          l286 01B1                                            l278 0193  
                                          l455 060A                                            l295 01D8  
                                          l287 01B6                                            l712 0737  
                                          l722 0755                                            l299 01F0  
                                          l732 073D                                            l493 072B  
                                          l653 06D1                                            l742 074F  
                                          l662 0773                                            l656 0575  
                                          l496 0725                                            l753 06A1  
                                          l762 0760                                            l499 0731  
                                          l765 0789                                            l759 0765  
                                          l699 0749                                            l798 0786  
         __end_of_I2C_SlaveSetBusColIntHandler 0750          __size_of_I2C_SlaveSetBusColIntHandler 0006  
                 _I2C_SlaveSetBusColIntHandler 074A                                            _RA0 0060  
                                          _RA1 0061                                            _RA2 0062  
                                          _RB0 0068                                            _RA3 0063  
                                          _RB1 0069                                            _RA4 0064  
                                          _RC0 0070                                            _RB2 006A  
                                          _RC1 0071                                            _RA5 0065  
                                          _RB3 006B                                            _RD0 0078  
                                          _RA6 0066                                            _RC2 0072  
                                          _RB4 006C                                            _RA7 0067  
                                          _RB5 006D                                            _RE0 0080  
                                          _RE1 0081                                            _RE2 0082  
                                          _RD4 007C                                            _RD5 007D  
                                          _RD6 007E                                            _RD7 007F  
                                          u500 0601                                            u501 0600  
                                          u510 05B6                                            u511 05B5  
                                          u520 05BE                                            u521 05BD  
                                          u530 05D3                                            u531 05D2  
                                          u540 069A                                            u541 0699  
                                          u490 05E7                                            u491 05E6  
                                          u580 06D9                                            u900 0076  
                                          u581 06D7                                            u901 0075  
                                          u590 06DA                                            u910 0083  
                                          u911 0082                                            u920 02A9  
                                          u921 02A8                                            u930 030E  
                                          u931 030D                                            u940 061B  
                                          u941 061A                                            u950 0624  
                                          u951 0623                                            u890 006D  
                                          u891 006C                                            u967 0338  
                                          u977 034B                                            u987 037A  
                                          u997 038D                          ??_I2C_SlaveRdCallBack 0071  
                 __end_ofi1_I2C_SlaveGetRxData 0793                         ??_EUSART_RxDataHandler 0070  
                          _I2C_SlaveSendTxData 0766                  I2C_SlaveSetSlaveMask@maskAddr 0073  
                              __end_of_I2C_Isr 0468                 ?_EUSART_SetFramingErrorHandler 0073  
         __size_of_I2C_SlaveSetWrColIntHandler 0006                                            wreg 0009  
                          _I2C_SlaveWrCallBack 06A2                                   ?_EUSART_Read 0070  
                                         l2400 0720                                           l2402 072C  
                                         l2430 065A                                           l2414 0784  
                                         l4030 00F2                                           l2440 06CF  
                                         l2432 065B                                           l2424 0650  
                                         l4040 01A0                                           l4032 0115  
                                         l4024 0092                                           l2442 06D0  
                                         l2434 0666                                           l2426 0656  
                                         l2450 0774                                           l4050 023D  
                                         l4042 01C3                                           l4034 0137  
                                         l4026 00AB                                           l2700 0695  
                                         l2460 0513                                           l2452 04FE  
                                         l2436 06C9                                           l2444 06F9  
                                         l2428 0659                                           l4052 0492  
                                         l4044 01E5                                           l4036 015A  
                                         l3500 00EA                                           l4028 00CF  
                                         l2702 069A                                           l2470 0521  
                                         l2462 0515                                           l2454 0500  
                                         l2438 06CB                                           l2446 06FC  
                                         l4054 04DD                                           l4046 0208  
                                         l4038 017D                                           l2704 069B  
                                         l2712 0762                                           l2720 0732  
                                         l2480 0539                                           l2472 0528  
                                         l2464 0517                                           l2456 0507  
                                         l2448 06FD                                           l3600 04B4  
                                         l4048 022A                                           l3520 0198  
                                         l3512 0152                                           l3504 010D  
                                         l2706 069F                                           l2722 073E  
                                         l2714 075D                                           l2394 071A  
                                         l2482 053A                                           l2474 0533  
                                         l2466 0519                                           l2458 0510  
                                         l2650 05E1                                           l3610 029B  
                                         l2708 06A0                                           l2724 0750  
                                         l2716 0744                                           l2396 0714  
                                         l2476 0537                                           l2468 051A  
                                         l2660 0601                                           l2652 05E1  
                                         l3604 04D3                                           l3532 0200  
                                         l3524 01BB                                           l3516 0175  
                                         l3508 012F                                           l3540 0235  
                                         l3620 02D2                                           l3612 029F  
                                         l2718 074A                                           l2726 0738  
                                         l2398 0726                                           l2478 0538  
                                         l2662 0602                                           l2654 05E7  
                                         l3462 0469                                           l3542 0296  
                                         l3622 02D7                                           l3614 02A9  
                                         l3630 0308                                           l2728 0787  
                                         l2664 0604                                           l2656 05F7  
                                         l2672 05B0                                           l3536 0222  
                                         l3528 01DD                                           l3480 0079  
                                         l3472 0066                                           l3640 0346  
                                         l3632 030E                                           l3616 02B8  
                                         l3624 02DE                                           l2762 0685  
                                         l2666 0607                                           l2658 05FB  
                                         l2690 05DC                                           l2682 05C1  
                                         l2674 05B6                                           l3466 0488  
                                         l3482 007D                                           l3474 006D  
                                         l3650 038C                                           l3642 034E  
                                         l3634 0337                                           l3626 02E9  
                                         l3618 02BD                                           l2764 053D  
                                         l2668 0609                                           l2684 05C9  
                                         l2676 05BE                                           l2772 06F2  
                                         l2692 0770                                           l3492 00A3  
                                         l3476 006F                                           l3660 03C1  
                                         l3652 0390                                           l3644 035B  
                                         l3636 033E                                           l3628 02EE  
                                         l2766 0572                                           l2686 05CD  
                                         l2774 06EB                                           l3478 0076  
                                         l3662 03D0                                           l3654 039F  
                                         l3646 036A                                           l3638 0342  
                                         l3670 060E                                           l2768 06D2  
                                         l2688 05D4                                           l3496 00C7  
                                         l3488 008A                                           l3664 03DF  
                                         l3656 03AE                                           l3648 0379  
                                         l3680 0625                                           l3672 060F  
                                         l3666 03EE                                           l3658 03BD  
                                         l3682 0628                                           l3674 061B  
                                         l3676 061E                                           l3668 060B  
                                         l3678 0624                                           u1007 03AF  
                                         u1017 03BE                                           u1027 03E0  
                                         u1037 03EF                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _LATD 010F                                           _LATE 0110  
                                         _WPUB 020D                                           _WPUE 0210  
                      __end_of_I2C_SlaveIsAddr 070E                        __end_of_I2C_SlaveIsRead 0770  
                                         _main 060B              I2C_SlaveSetAddrIntHandler@handler 0073  
                             __end_of_I2C_Read 0774                                           _show 029B  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                             __end_of_I2C_Open 0576                                           btemp 007E  
                         ?_I2C_SlaveSendTxData 0070                                           start 004A  
                         ?_I2C_SlaveWrCallBack 0070                 __size_of_I2C_SlaveAddrCallBack 000D  
            I2C_SlaveSetReadIntHandler@handler 0073                  __end_of_I2C_SlaveAddrCallBack 06C9  
               __size_of_OSCILLATOR_Initialize 0007                  __end_of_OSCILLATOR_Initialize 0700  
     __end_of_I2C_SlaveDefAddrInterruptHandler 06EB      __size_of_I2C_SlaveDefAddrInterruptHandler 0008  
           ??_I2C_SlaveDefAddrInterruptHandler 0070              ?_I2C_SlaveDefAddrInterruptHandler 0070  
             _I2C_SlaveDefAddrInterruptHandler 06E3                                          ?_main 0070  
                                        ?_show 0070                                          i1l541 002A  
                                        i1l470 064F                                          i1l542 0048  
                                        i1l543 003D                                          i1l481 0684  
                                        i1l490 0783                                          i1l706 06BB  
                                        i1l467 064D                                          i1l539 001A  
                                        i1l484 0793                                          i1l716 06AE  
                                        i1l548 0048                                          i1l477 05AE  
                                        i1l709 06E2                                          i1l726 06C8  
                                        i1l487 077F                                          i1l719 075B  
                                        i1l729 06EA                                          i1l771 076F  
                                        i1l774 078F                                          i1l768 070D  
                                        i1l792 077B                                          i1l696 0467  
                                        i1l777 078C                                          i1l795 076A  
                                        i1l789 0706                                          i1l798 0792  
                                        _RCREG 0199                                          _RCSTA 019D  
                        _I2C_SlaveReleaseClock 078A                                          u45_20 067E  
                                        u45_21 067D                                          u62_20 0635  
                                        u70_20 0431                                          u62_21 0634  
                                        u70_21 0430                                          u63_20 0646  
                                        u55_20 06C3                                          u71_20 0441  
                                        u63_21 0645                                          u55_21 06C2  
                                        u71_21 0440                                          u64_20 0580  
                                        u56_20 06A9                                          u72_20 044A  
                                        u80_20 0014                                          u64_21 057F  
                                        u56_21 06A8                                          u72_21 0449  
                                        u80_21 0013                                          u65_20 0590  
                                        u57_20 06B6                                          u81_20 001F  
                                        u65_21 058F                                          u57_21 06B5  
                                        u81_21 001E                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TRISD 008F                                          _TRISE 0090  
                                        u66_20 05A4                                          u82_20 0024  
                                        u66_21 05A3                                          u82_21 0023  
                                        u67_20 03FE                                          u83_20 002F  
                                        u67_21 03FD                                          u83_21 002E  
                                        u68_20 0406                                          u84_20 0034  
                                        u68_21 0405                                          u84_21 0033  
                                        u69_20 041A                                          u85_20 0042  
                                        u69_21 0419                                          u85_21 0041  
                                        u86_20 0047                                          u78_20 000A  
                                        u86_21 0046                                          u78_21 0009  
                                        u79_20 000F                                          u79_21 000E  
                                        _TXREG 019A                                          _TXSTA 019E  
                ?_I2C_SlaveSetBusColIntHandler 0073                         ??_I2C_SlaveIsRxBufFull 0070  
                               _WDT_Initialize 0774                                          _value 00B6  
              __size_of_I2C_SlaveSetIsrHandler 0006                                          pclath 000A  
                                        status 0003                                          wtemp0 007E  
                        ??_I2C_SlaveSendTxData 0070                          ??_I2C_SlaveWrCallBack 0071  
                        _I2C_SlaveSetSlaveAddr 0761                                __initialization 004C  
                        _I2C_SlaveSetSlaveMask 075C                         __size_of_I2C_SlaveOpen 000D  
                                 __end_of_main 062E                                   __end_of_show 03F3  
                                on_digit@digit 0075                    ?_INTERRUPT_InterruptManager 0070  
                                    ??_I2C_Isr 0071                 ??_EUSART_SetRxInterruptHandler 0075  
                              show@chars_index 00B5                                         ??_main 0076  
                                       ??_show 005B                               ??_show_character 0057  
                     _receive_char_from_EUSART 06F2                         __end_of_WDT_Initialize 0778  
                  _I2C_SlaveRdInterruptHandler 0040                    _I2C_SlaveWrInterruptHandler 003E  
                   __end_of_I2C_SlaveEnableIrq 078A      __end_of_EUSART_DefaultFramingErrorHandler 0794  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0793  
                   __end_of_I2C_SlaveGetRxData 0787                     _EUSART_OverrunErrorHandler 004C  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELD 018F  
                                       _ANSELE 0190                     __end_of_EUSART_is_rx_ready 06DB  
                                       _BORCON 0116                                         i1l2410 067E  
                                       i1l2412 067F                                         i1l2404 066B  
                                       i1l2420 0756                                         i1l2406 0674  
                                       i1l2422 06E3                                         i1l2408 0678  
                                       i1l2418 06DB                                         i1l2380 0790  
                                       i1l4056 0456                                         i1l2730 076B  
                                       i1l2378 0767                                         i1l2740 06BC  
                                       i1l2900 044E                                         i1l2742 06C3  
                                       i1l2734 078D                                         i1l2750 06A9  
                                       i1l2902 0464                                         i1l2840 0640  
                                       i1l2736 0707                                         i1l2752 0778  
                                       i1l2744 0700                                         i1l2760 078A  
                                       i1l2850 0580                                         i1l2842 0646  
                                       i1l2834 062E                                         i1l2860 059B  
                                       i1l2852 0585                                         i1l2844 0647  
                                       i1l2836 0635                                         i1l2756 06AF  
                                       i1l2748 06A2                                         i1l2862 05A4  
                                       i1l2854 058B                                         i1l2846 0576  
                                       i1l2838 063C                                         i1l2758 06B6  
                                       i1l2870 03FE                                         i1l2950 001F  
                                       i1l2942 0006                                         i1l2696 077C  
                                       i1l2864 05AB                                         i1l2856 0590  
                                       i1l2848 057B                                         i1l2880 0420  
                                       i1l2872 0406                                         i1l2960 0042  
                                       i1l2952 0024                                         i1l2944 000A  
                                       i1l2698 0780                                         i1l2858 0595  
                                       i1l2890 0439                                         i1l2882 0426  
                                       i1l2874 040C                                         i1l2866 03F3  
                                       i1l2954 002F                                         i1l2946 000F  
                                       i1l2884 0429                                         i1l2876 0412  
                                       i1l2868 03F6                                         i1l2956 0034  
                                       i1l2948 0014                                         i1l2894 0442  
                                       i1l2886 0431                                         i1l2878 041A  
                                       i1l2958 0039                                         i1l2896 044A  
                                       i1l2888 0435                                         _OSCCON 0099  
                             ?_I2C_SlaveIsAddr 0070                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                       _SSPADD 0212                               ?_I2C_SlaveIsRead 0070  
                                       _SSPBUF 0211                                         _SSPMSK 0213  
                         i1_I2C_SlaveGetRxData 0790                         _I2C_SlaveSetIsrHandler 0744  
                          _EUSART_Transmit_ISR 062E                               __end_of_on_digit 04B3  
                      __size_of_I2C_Initialize 0009                         ?_I2C_SlaveReleaseClock 0070  
                      ??_I2C_SlaveIsTxBufEmpty 0070                                      ?_I2C_Read 0070  
                                    ?_I2C_Open 0070            I2C_SlaveSetBusColIntHandler@handler 0073  
                              ?_WDT_Initialize 0070                                  _I2C_SlaveOpen 0695  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 002A  
                            _SYSTEM_Initialize 0685                        __end_of__initialization 0060  
           I2C_SlaveSetWrColIntHandler@handler 0073                   ??_I2C_SlaveSetAddrIntHandler 0075  
                           ?_SYSTEM_Initialize 0070                          ?i1_I2C_SlaveGetRxData 0070  
                       ?_I2C_SlaveSetSlaveAddr 0070                         ?_I2C_SlaveSetSlaveMask 0070  
         __end_of_EUSART_SetTxInterruptHandler 071A          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 0714                                 __pcstackCOMMON 0070  
                        _receive_char_from_I2C 06EB                            ??_SYSTEM_Initialize 0076  
               I2C_SlaveSetSlaveAddr@slaveAddr 0073                   ??_I2C_SlaveSetReadIntHandler 0075  
                               _OPTION_REGbits 0095                                     ??_I2C_Read 0073  
                                   ??_I2C_Open 0075                               _is_I2C_interrupt 004A  
                         _eusartRxStatusBuffer 0020                                 ?_I2C_SlaveOpen 0070  
              ??_EUSART_SetOverrunErrorHandler 0075            __size_of_I2C_SlaveSetAddrIntHandler 0006  
                    __end_of_SYSTEM_Initialize 0695                          ??_EUSART_Transmit_ISR 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00B6  
                           __size_of_off_digit 004B            __end_of_I2C_SlaveSetWrColIntHandler 073E  
                  _I2C_SlaveSetWrColIntHandler 0738                    __size_of_EUSART_Receive_ISR 0039  
          __size_of_I2C_SlaveSetReadIntHandler 0006                                     __pmaintext 060B  
                ?_EUSART_SetTxInterruptHandler 0073               _EUSART_TxDefaultInterruptHandler 0052  
                __size_of_decode_received_char 0032                                     __pintentry 0004  
                  __end_of_I2C_SlaveRdCallBack 06BC                  ??_I2C_SlaveSetWrColIntHandler 0075  
                                      _BAUDCON 019F                                        _I2C_Isr 03F3  
                 ??_EUSART_DefaultErrorHandler 0071                                  _eusartRxCount 0049  
                __size_of_EUSART_RxDataHandler 001A                                        _OSCTUNE 0098  
                     ??_EUSART_SetErrorHandler 0075                                        _SSPCON1 0215  
                                      _SSPCON2 0216                          decode_received_char@i 0075  
                                      _SSPSTAT 0214                         ??i1_I2C_SlaveGetRxData 0070  
                                    ?_on_digit 0070                         ?_receive_char_from_I2C 0070  
          __size_of_EUSART_DefaultErrorHandler 0004                        I2C_SlaveSendTxData@data 0070  
                   ??_receive_char_from_EUSART 0076                          _I2C_SlaveAddrCallBack 06BC  
                               _I2C_Initialize 06C9                                        __ptext1 029B  
                                      __ptext2 0064                                        __ptext3 0468  
                                      __ptext4 04B3                                        __ptext5 06EB  
                                      __ptext6 0770                                        __ptext7 0784  
                                      __ptext8 06F2                                        __ptext9 05AF  
                            __end_of_off_digit 04FE                                ??_I2C_SlaveOpen 0073  
                        _OSCILLATOR_Initialize 06F9                       ??_PIN_MANAGER_Initialize 0073  
                I2C_SlaveSetIsrHandler@handler 0073                     __size_of_SYSTEM_Initialize 0010  
                                      clrloop0 070F                                  _receive_index 004B  
                  __end_of_I2C_SlaveSendTxData 076B                           end_of_initialization 0060  
                  __end_of_I2C_SlaveWrCallBack 06AF                  __size_of_I2C_SlaveIsRxBufFull 0004  
                               off_digit@digit 0075          __end_of_EUSART_SetOverrunErrorHandler 0726  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0720  
           __end_of_I2C_SlaveSetAddrIntHandler 0756                     _I2C_SlaveSetAddrIntHandler 0750  
                              show@value_index 00B4                                     ??_on_digit 0073  
                            _EUSART_Initialize 04FE                             _I2C_SlaveEnableIrq 0787  
                           _I2C_SlaveGetRxData 0784                        ?_I2C_SlaveSetIsrHandler 0073  
                                 _i2cSlaveAddr 0045                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 06D2  
                       __end_of_I2C_Initialize 06D2                        ??_I2C_SlaveReleaseClock 0070  
                          ?_I2C_SlaveEnableIrq 0070                            ?_I2C_SlaveGetRxData 0070  
           __end_of_I2C_SlaveSetReadIntHandler 0744                     _I2C_SlaveSetReadIntHandler 073E  
                          ??_EUSART_Initialize 0075                               ??_WDT_Initialize 0073  
               ??_EUSART_SetTxInterruptHandler 0075                   ?_I2C_SlaveSetWriteIntHandler 0073  
                          ?_EUSART_is_rx_ready 0070                 __size_of_I2C_SlaveIsTxBufEmpty 0007  
                __end_of_I2C_SlaveIsTxBufEmpty 0707                              __size_of_I2C_Read 0004  
                            __size_of_I2C_Open 0039                __size_of_EUSART_SetErrorHandler 0006  
                         ??_I2C_SlaveEnableIrq 0073                           ??_I2C_SlaveGetRxData 0073  
                      ??_I2C_SlaveSetSlaveAddr 0073                      __end_of_EUSART_Initialize 053D  
                         ??_EUSART_is_rx_ready 0073                        ??_I2C_SlaveSetSlaveMask 0073  
                                    _TXSTAbits 019E                 __end_of_I2C_SlaveSetIsrHandler 074A  
                     __size_of_I2C_SlaveIsAddr 0007                       __size_of_I2C_SlaveIsRead 0005  
                       ?_I2C_SlaveAddrCallBack 0070                                ?_I2C_Initialize 0070  
           __end_of_EUSART_DefaultErrorHandler 0784                     _EUSART_DefaultErrorHandler 0780  
                                    _i2cRdData 0046                         ?_OSCILLATOR_Initialize 0070  
                                    _i2cWrData 0047                            start_initialization 004C  
              __size_of_PIN_MANAGER_Initialize 001B                                  ??_EUSART_Read 0073  
 EUSART_SetRxInterruptHandler@interruptHandler 0073   EUSART_SetTxInterruptHandler@interruptHandler 0073  
                      __size_of_show_character 0237                 ?_EUSART_SetOverrunErrorHandler 0073  
                   _EUSART_FramingErrorHandler 004E               __end_of_receive_char_from_EUSART 06F9  
                       _EUSART_SetErrorHandler 072C                                       ?_I2C_Isr 0070  
                  __end_of_EUSART_Transmit_ISR 0650                                    __pbssCOMMON 0076  
                                    ___latbits 0003                                  __pcstackBANK0 0055  
                                __pcstackBANK1 00A0                   __end_of_decode_received_char 05E1  
            decode_received_char@received_char 0074                     __end_of_EUSART_Receive_ISR 05AF  
                   __size_of_EUSART_Initialize 003F           __size_of_I2C_SlaveSetWriteIntHandler 0006  
                      ??_receive_char_from_I2C 0076                 ??_I2C_SlaveSetBusColIntHandler 0075  
             _EUSART_RxDefaultInterruptHandler 0050                            __end_of_EUSART_Read 060B  
                                    __pnvBANK0 004C                                      __pnvBANK1 00CB  
                 __end_of_EUSART_RxDataHandler 0685                         _PIN_MANAGER_Initialize 0650  
                            __size_of_on_digit 004B                           EUSART_Read@readValue 0074  
                      show_character@character 0055                                   _eusartRxHead 0077  
                                 _eusartTxHead 0079                                   _eusartRxTail 0076  
                                 _eusartTxTail 0078                   ??_INTERRUPT_InterruptManager 0073  
                            ??_I2C_SlaveIsAddr 0070                        _eusartTxBufferRemaining 0054  
                            ??_I2C_SlaveIsRead 0070               ??_I2C_SlaveDefRdInterruptHandler 0070  
              ?_I2C_SlaveDefRdInterruptHandler 0070               ??_I2C_SlaveDefWrInterruptHandler 0071  
              ?_I2C_SlaveDefWrInterruptHandler 0070                                       _I2C_Read 0770  
                                     _I2C_Open 053D                   __size_of_I2C_SlaveRdCallBack 000D  
                                    _off_digit 04B3                                 _eusartRxBuffer 0028  
                  ?_I2C_SlaveSetAddrIntHandler 0073                                 _eusartTxBuffer 0030  
       EUSART_SetErrorHandler@interruptHandler 0073                                      clear_ram0 070E  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0048                              _I2C_SlaveClearIrq 078D  
                __size_ofi1_I2C_SlaveGetRxData 0003            __size_of_INTERRUPT_InterruptManager 0046  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0075  
                                     _PIR2bits 0012                             ?_I2C_SlaveClearIrq 0070  
    __end_of_EUSART_DefaultOverrunErrorHandler 0780     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 077C                   __end_of_I2C_SlaveIsRxBufFull 077C  
                            show_character@dot 0059                 __size_of_I2C_SlaveReleaseClock 0003  
                  ?_I2C_SlaveSetReadIntHandler 0073                  __end_of_I2C_SlaveReleaseClock 078D  
                          ??_I2C_SlaveClearIrq 0070                               __size_of_I2C_Isr 0075  
                        __end_of_I2C_SlaveOpen 06A2                                     ?_off_digit 0070  
            __size_of_receive_char_from_EUSART 0007                                    _EUSART_Read 05E1  
                    ?_receive_char_from_EUSART 0070                                 _show_character 0064  
            _I2C_SlaveDefWrColInterruptHandler 0000                      __end_of_I2C_SlaveClearIrq 0790  
               __size_of_I2C_SlaveSetSlaveAddr 0005                  __end_of_I2C_SlaveSetSlaveAddr 0766  
               __size_of_I2C_SlaveSetSlaveMask 0005                  __end_of_I2C_SlaveSetSlaveMask 0761  
                 __size_of_I2C_SlaveSendTxData 0005                               ??_I2C_Initialize 0073  
                      ??_I2C_SlaveAddrCallBack 0071                   __size_of_I2C_SlaveWrCallBack 000D  
                      ??_OSCILLATOR_Initialize 0073                           _decode_received_char 05AF  
                          _EUSART_ErrorHandler 00CB                  _I2C_SlaveAddrInterruptHandler 003C  
                  ?_EUSART_DefaultErrorHandler 0070             _I2C_SlaveDefBusColInterruptHandler 0000  
               _I2C_SlaveWrColInterruptHandler 0038                           _EUSART_RxDataHandler 066B  
                       __end_of_show_character 029B                                       __ptext10 05E1  
                                     __ptext11 0685                                       __ptext20 0726  
                                     __ptext12 0774                                       __ptext21 072C  
                                     __ptext13 0650                                       __ptext30 0750  
                                     __ptext22 053D                                       __ptext14 06F9  
                                     __ptext31 0695                                       __ptext23 0732  
                                     __ptext15 06C9                                       __ptext40 06AF  
                                     __ptext32 0787                                       __ptext24 0738  
                                     __ptext16 04FE                                       __ptext41 06DB  
                                     __ptext33 06D2                                       __ptext25 075C  
                                     __ptext17 0714                                       __ptext50 062E  
                                     __ptext42 0700                                       __ptext26 0761  
                                     __ptext18 071A                                       __ptext51 0576  
                                     __ptext43 0778                                       __ptext35 03F3  
                                     __ptext27 073E                                       __ptext19 0720  
                                     __ptext52 077C                                       __ptext44 076B  
                                     __ptext36 06A2                                       __ptext28 0744  
                                     __ptext53 0793                                       __ptext45 0707  
                                     __ptext37 0756                                       __ptext29 074A  
                                     __ptext54 0780                                       __ptext46 078D  
                                     __ptext38 0766                                       __ptext55 066B  
                                     __ptext47 06BC                                       __ptext39 078A  
                                     __ptext48 06E3                                       __ptext49 0790  
                        _I2C_SlaveIsTxBufEmpty 0700                    __size_of_I2C_SlaveEnableIrq 0003  
                  __size_of_I2C_SlaveGetRxData 0003                    __size_of_EUSART_is_rx_ready 0009  
                                __size_of_main 0023                                  __size_of_show 0158  
                                     _on_digit 0468                   ?_I2C_SlaveSetWrColIntHandler 0073  
                                    show@chars 00A0                        ?_EUSART_SetErrorHandler 0073  
EUSART_SetOverrunErrorHandler@interruptHandler 0073                          ?_decode_received_char 0070  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 004A  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 072C  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0726  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
                                  ??_off_digit 0073                                ?_show_character 0055  
                      __size_of_WDT_Initialize 0004                           _I2C_SlaveIsRxBufFull 0778  
                                     intlevel1 0000                _I2C_SlaveBusColInterruptHandler 003A  
                   __size_of_I2C_SlaveClearIrq 0003                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0732                 __size_of_receive_char_from_I2C 0007  
                __end_of_receive_char_from_I2C 06F2                            _I2C_SlaveRdCallBack 06AF  
         __end_of_EUSART_SetRxInterruptHandler 0720          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 071A                                _I2C_SlaveIsAddr 0707  
                              _I2C_SlaveIsRead 076B                                  _i2cSlaveState 0044  
                           _EUSART_Receive_ISR 0576             I2C_SlaveSetWriteIntHandler@handler 0073  
EUSART_SetFramingErrorHandler@interruptHandler 0073            __end_of_I2C_SlaveSetWriteIntHandler 0738  
                  _I2C_SlaveSetWriteIntHandler 0732                            ?_EUSART_Receive_ISR 0070  
                         ?_I2C_SlaveRdCallBack 0070                         ?_I2C_SlaveIsTxBufEmpty 0070  
                ??_I2C_SlaveSetWriteIntHandler 0075                                    _SSPCON1bits 0215  
                                  _SSPCON2bits 0216                       ??_I2C_SlaveSetIsrHandler 0075  
                        ?_I2C_SlaveIsRxBufFull 0070                   __size_of_EUSART_Transmit_ISR 0022  
               __end_of_PIN_MANAGER_Initialize 066B                            show_character@digit 0056  
                          show_character@group 005A         __end_of_I2C_SlaveDefRdInterruptHandler 06E3  
      __size_of_I2C_SlaveDefRdInterruptHandler 0008                 _I2C_SlaveDefRdInterruptHandler 06DB  
       __end_of_I2C_SlaveDefWrInterruptHandler 075C        __size_of_I2C_SlaveDefWrInterruptHandler 0006  
               _I2C_SlaveDefWrInterruptHandler 0756                           ??_EUSART_Receive_ISR 0071  
                        _MSSP_InterruptHandler 0042                         ??_decode_received_char 0073  
